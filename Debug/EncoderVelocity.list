
EncoderVelocity.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ec0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000340  08005090  08005090  00015090  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080053d0  080053d0  000153d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080053d8  080053d8  000153d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080053dc  080053dc  000153dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001dc  20000000  080053e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000104  200001dc  080055bc  000201dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200002e0  080055bc  000202e0  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   000136bc  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000256c  00000000  00000000  000338c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000697b  00000000  00000000  00035e34  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000930  00000000  00000000  0003c7b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000b30  00000000  00000000  0003d0e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005109  00000000  00000000  0003dc10  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003c01  00000000  00000000  00042d19  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004691a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002894  00000000  00000000  00046998  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005078 	.word	0x08005078

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08005078 	.word	0x08005078

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f092 0f00 	teq	r2, #0
 80005aa:	bf14      	ite	ne
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c0:	e720      	b.n	8000404 <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_ul2d>:
 80005c4:	ea50 0201 	orrs.w	r2, r0, r1
 80005c8:	bf08      	it	eq
 80005ca:	4770      	bxeq	lr
 80005cc:	b530      	push	{r4, r5, lr}
 80005ce:	f04f 0500 	mov.w	r5, #0
 80005d2:	e00a      	b.n	80005ea <__aeabi_l2d+0x16>

080005d4 <__aeabi_l2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005e2:	d502      	bpl.n	80005ea <__aeabi_l2d+0x16>
 80005e4:	4240      	negs	r0, r0
 80005e6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ea:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ee:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005f2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005f6:	f43f aedc 	beq.w	80003b2 <__adddf3+0xe6>
 80005fa:	f04f 0203 	mov.w	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000612:	f1c2 0320 	rsb	r3, r2, #32
 8000616:	fa00 fc03 	lsl.w	ip, r0, r3
 800061a:	fa20 f002 	lsr.w	r0, r0, r2
 800061e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000622:	ea40 000e 	orr.w	r0, r0, lr
 8000626:	fa21 f102 	lsr.w	r1, r1, r2
 800062a:	4414      	add	r4, r2
 800062c:	e6c1      	b.n	80003b2 <__adddf3+0xe6>
 800062e:	bf00      	nop

08000630 <__aeabi_dmul>:
 8000630:	b570      	push	{r4, r5, r6, lr}
 8000632:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000636:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800063a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800063e:	bf1d      	ittte	ne
 8000640:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000644:	ea94 0f0c 	teqne	r4, ip
 8000648:	ea95 0f0c 	teqne	r5, ip
 800064c:	f000 f8de 	bleq	800080c <__aeabi_dmul+0x1dc>
 8000650:	442c      	add	r4, r5
 8000652:	ea81 0603 	eor.w	r6, r1, r3
 8000656:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800065a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800065e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000662:	bf18      	it	ne
 8000664:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000668:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800066c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000670:	d038      	beq.n	80006e4 <__aeabi_dmul+0xb4>
 8000672:	fba0 ce02 	umull	ip, lr, r0, r2
 8000676:	f04f 0500 	mov.w	r5, #0
 800067a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800067e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000682:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000686:	f04f 0600 	mov.w	r6, #0
 800068a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800068e:	f09c 0f00 	teq	ip, #0
 8000692:	bf18      	it	ne
 8000694:	f04e 0e01 	orrne.w	lr, lr, #1
 8000698:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800069c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006a4:	d204      	bcs.n	80006b0 <__aeabi_dmul+0x80>
 80006a6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006aa:	416d      	adcs	r5, r5
 80006ac:	eb46 0606 	adc.w	r6, r6, r6
 80006b0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006b4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006bc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006c4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c8:	bf88      	it	hi
 80006ca:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ce:	d81e      	bhi.n	800070e <__aeabi_dmul+0xde>
 80006d0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006d4:	bf08      	it	eq
 80006d6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006da:	f150 0000 	adcs.w	r0, r0, #0
 80006de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e8:	ea46 0101 	orr.w	r1, r6, r1
 80006ec:	ea40 0002 	orr.w	r0, r0, r2
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f8:	bfc2      	ittt	gt
 80006fa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006fe:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000702:	bd70      	popgt	{r4, r5, r6, pc}
 8000704:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000708:	f04f 0e00 	mov.w	lr, #0
 800070c:	3c01      	subs	r4, #1
 800070e:	f300 80ab 	bgt.w	8000868 <__aeabi_dmul+0x238>
 8000712:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000716:	bfde      	ittt	le
 8000718:	2000      	movle	r0, #0
 800071a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd70      	pople	{r4, r5, r6, pc}
 8000720:	f1c4 0400 	rsb	r4, r4, #0
 8000724:	3c20      	subs	r4, #32
 8000726:	da35      	bge.n	8000794 <__aeabi_dmul+0x164>
 8000728:	340c      	adds	r4, #12
 800072a:	dc1b      	bgt.n	8000764 <__aeabi_dmul+0x134>
 800072c:	f104 0414 	add.w	r4, r4, #20
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f305 	lsl.w	r3, r0, r5
 8000738:	fa20 f004 	lsr.w	r0, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000750:	fa21 f604 	lsr.w	r6, r1, r4
 8000754:	eb42 0106 	adc.w	r1, r2, r6
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 040c 	rsb	r4, r4, #12
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f304 	lsl.w	r3, r0, r4
 8000770:	fa20 f005 	lsr.w	r0, r0, r5
 8000774:	fa01 f204 	lsl.w	r2, r1, r4
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000784:	f141 0100 	adc.w	r1, r1, #0
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f1c4 0520 	rsb	r5, r4, #32
 8000798:	fa00 f205 	lsl.w	r2, r0, r5
 800079c:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a0:	fa20 f304 	lsr.w	r3, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea43 0302 	orr.w	r3, r3, r2
 80007ac:	fa21 f004 	lsr.w	r0, r1, r4
 80007b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b4:	fa21 f204 	lsr.w	r2, r1, r4
 80007b8:	ea20 0002 	bic.w	r0, r0, r2
 80007bc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f094 0f00 	teq	r4, #0
 80007d0:	d10f      	bne.n	80007f2 <__aeabi_dmul+0x1c2>
 80007d2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007d6:	0040      	lsls	r0, r0, #1
 80007d8:	eb41 0101 	adc.w	r1, r1, r1
 80007dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e0:	bf08      	it	eq
 80007e2:	3c01      	subeq	r4, #1
 80007e4:	d0f7      	beq.n	80007d6 <__aeabi_dmul+0x1a6>
 80007e6:	ea41 0106 	orr.w	r1, r1, r6
 80007ea:	f095 0f00 	teq	r5, #0
 80007ee:	bf18      	it	ne
 80007f0:	4770      	bxne	lr
 80007f2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	eb43 0303 	adc.w	r3, r3, r3
 80007fc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3d01      	subeq	r5, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1c6>
 8000806:	ea43 0306 	orr.w	r3, r3, r6
 800080a:	4770      	bx	lr
 800080c:	ea94 0f0c 	teq	r4, ip
 8000810:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000814:	bf18      	it	ne
 8000816:	ea95 0f0c 	teqne	r5, ip
 800081a:	d00c      	beq.n	8000836 <__aeabi_dmul+0x206>
 800081c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000820:	bf18      	it	ne
 8000822:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000826:	d1d1      	bne.n	80007cc <__aeabi_dmul+0x19c>
 8000828:	ea81 0103 	eor.w	r1, r1, r3
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	f04f 0000 	mov.w	r0, #0
 8000834:	bd70      	pop	{r4, r5, r6, pc}
 8000836:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800083a:	bf06      	itte	eq
 800083c:	4610      	moveq	r0, r2
 800083e:	4619      	moveq	r1, r3
 8000840:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000844:	d019      	beq.n	800087a <__aeabi_dmul+0x24a>
 8000846:	ea94 0f0c 	teq	r4, ip
 800084a:	d102      	bne.n	8000852 <__aeabi_dmul+0x222>
 800084c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000850:	d113      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000852:	ea95 0f0c 	teq	r5, ip
 8000856:	d105      	bne.n	8000864 <__aeabi_dmul+0x234>
 8000858:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800085c:	bf1c      	itt	ne
 800085e:	4610      	movne	r0, r2
 8000860:	4619      	movne	r1, r3
 8000862:	d10a      	bne.n	800087a <__aeabi_dmul+0x24a>
 8000864:	ea81 0103 	eor.w	r1, r1, r3
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000870:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800087e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000882:	bd70      	pop	{r4, r5, r6, pc}

08000884 <__aeabi_ddiv>:
 8000884:	b570      	push	{r4, r5, r6, lr}
 8000886:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800088a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800088e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000892:	bf1d      	ittte	ne
 8000894:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000898:	ea94 0f0c 	teqne	r4, ip
 800089c:	ea95 0f0c 	teqne	r5, ip
 80008a0:	f000 f8a7 	bleq	80009f2 <__aeabi_ddiv+0x16e>
 80008a4:	eba4 0405 	sub.w	r4, r4, r5
 80008a8:	ea81 0e03 	eor.w	lr, r1, r3
 80008ac:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008b4:	f000 8088 	beq.w	80009c8 <__aeabi_ddiv+0x144>
 80008b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008bc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008c4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008cc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008d4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008dc:	429d      	cmp	r5, r3
 80008de:	bf08      	it	eq
 80008e0:	4296      	cmpeq	r6, r2
 80008e2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008e6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ea:	d202      	bcs.n	80008f2 <__aeabi_ddiv+0x6e>
 80008ec:	085b      	lsrs	r3, r3, #1
 80008ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f2:	1ab6      	subs	r6, r6, r2
 80008f4:	eb65 0503 	sbc.w	r5, r5, r3
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000902:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 000c 	orrcs.w	r0, r0, ip
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000960:	ea55 0e06 	orrs.w	lr, r5, r6
 8000964:	d018      	beq.n	8000998 <__aeabi_ddiv+0x114>
 8000966:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800096a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800096e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000972:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000976:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800097a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800097e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000982:	d1c0      	bne.n	8000906 <__aeabi_ddiv+0x82>
 8000984:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000988:	d10b      	bne.n	80009a2 <__aeabi_ddiv+0x11e>
 800098a:	ea41 0100 	orr.w	r1, r1, r0
 800098e:	f04f 0000 	mov.w	r0, #0
 8000992:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000996:	e7b6      	b.n	8000906 <__aeabi_ddiv+0x82>
 8000998:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800099c:	bf04      	itt	eq
 800099e:	4301      	orreq	r1, r0
 80009a0:	2000      	moveq	r0, #0
 80009a2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009a6:	bf88      	it	hi
 80009a8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009ac:	f63f aeaf 	bhi.w	800070e <__aeabi_dmul+0xde>
 80009b0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009b4:	bf04      	itt	eq
 80009b6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009be:	f150 0000 	adcs.w	r0, r0, #0
 80009c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009cc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009d4:	bfc2      	ittt	gt
 80009d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009de:	bd70      	popgt	{r4, r5, r6, pc}
 80009e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009e4:	f04f 0e00 	mov.w	lr, #0
 80009e8:	3c01      	subs	r4, #1
 80009ea:	e690      	b.n	800070e <__aeabi_dmul+0xde>
 80009ec:	ea45 0e06 	orr.w	lr, r5, r6
 80009f0:	e68d      	b.n	800070e <__aeabi_dmul+0xde>
 80009f2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009f6:	ea94 0f0c 	teq	r4, ip
 80009fa:	bf08      	it	eq
 80009fc:	ea95 0f0c 	teqeq	r5, ip
 8000a00:	f43f af3b 	beq.w	800087a <__aeabi_dmul+0x24a>
 8000a04:	ea94 0f0c 	teq	r4, ip
 8000a08:	d10a      	bne.n	8000a20 <__aeabi_ddiv+0x19c>
 8000a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a0e:	f47f af34 	bne.w	800087a <__aeabi_dmul+0x24a>
 8000a12:	ea95 0f0c 	teq	r5, ip
 8000a16:	f47f af25 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	e72c      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a20:	ea95 0f0c 	teq	r5, ip
 8000a24:	d106      	bne.n	8000a34 <__aeabi_ddiv+0x1b0>
 8000a26:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a2a:	f43f aefd 	beq.w	8000828 <__aeabi_dmul+0x1f8>
 8000a2e:	4610      	mov	r0, r2
 8000a30:	4619      	mov	r1, r3
 8000a32:	e722      	b.n	800087a <__aeabi_dmul+0x24a>
 8000a34:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a3e:	f47f aec5 	bne.w	80007cc <__aeabi_dmul+0x19c>
 8000a42:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a46:	f47f af0d 	bne.w	8000864 <__aeabi_dmul+0x234>
 8000a4a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a4e:	f47f aeeb 	bne.w	8000828 <__aeabi_dmul+0x1f8>
 8000a52:	e712      	b.n	800087a <__aeabi_dmul+0x24a>

08000a54 <__gedf2>:
 8000a54:	f04f 3cff 	mov.w	ip, #4294967295
 8000a58:	e006      	b.n	8000a68 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__ledf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	e002      	b.n	8000a68 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__cmpdf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a7e:	d01b      	beq.n	8000ab8 <__cmpdf2+0x54>
 8000a80:	b001      	add	sp, #4
 8000a82:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a86:	bf0c      	ite	eq
 8000a88:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a8c:	ea91 0f03 	teqne	r1, r3
 8000a90:	bf02      	ittt	eq
 8000a92:	ea90 0f02 	teqeq	r0, r2
 8000a96:	2000      	moveq	r0, #0
 8000a98:	4770      	bxeq	lr
 8000a9a:	f110 0f00 	cmn.w	r0, #0
 8000a9e:	ea91 0f03 	teq	r1, r3
 8000aa2:	bf58      	it	pl
 8000aa4:	4299      	cmppl	r1, r3
 8000aa6:	bf08      	it	eq
 8000aa8:	4290      	cmpeq	r0, r2
 8000aaa:	bf2c      	ite	cs
 8000aac:	17d8      	asrcs	r0, r3, #31
 8000aae:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ab2:	f040 0001 	orr.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000abc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac0:	d102      	bne.n	8000ac8 <__cmpdf2+0x64>
 8000ac2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac6:	d107      	bne.n	8000ad8 <__cmpdf2+0x74>
 8000ac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d1d6      	bne.n	8000a80 <__cmpdf2+0x1c>
 8000ad2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad6:	d0d3      	beq.n	8000a80 <__cmpdf2+0x1c>
 8000ad8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop

08000ae0 <__aeabi_cdrcmple>:
 8000ae0:	4684      	mov	ip, r0
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4662      	mov	r2, ip
 8000ae6:	468c      	mov	ip, r1
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4663      	mov	r3, ip
 8000aec:	e000      	b.n	8000af0 <__aeabi_cdcmpeq>
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdcmpeq>:
 8000af0:	b501      	push	{r0, lr}
 8000af2:	f7ff ffb7 	bl	8000a64 <__cmpdf2>
 8000af6:	2800      	cmp	r0, #0
 8000af8:	bf48      	it	mi
 8000afa:	f110 0f00 	cmnmi.w	r0, #0
 8000afe:	bd01      	pop	{r0, pc}

08000b00 <__aeabi_dcmpeq>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff fff4 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b08:	bf0c      	ite	eq
 8000b0a:	2001      	moveq	r0, #1
 8000b0c:	2000      	movne	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmplt>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffea 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b1c:	bf34      	ite	cc
 8000b1e:	2001      	movcc	r0, #1
 8000b20:	2000      	movcs	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmple>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffe0 	bl	8000af0 <__aeabi_cdcmpeq>
 8000b30:	bf94      	ite	ls
 8000b32:	2001      	movls	r0, #1
 8000b34:	2000      	movhi	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpge>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffce 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b44:	bf94      	ite	ls
 8000b46:	2001      	movls	r0, #1
 8000b48:	2000      	movhi	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmpgt>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffc4 	bl	8000ae0 <__aeabi_cdrcmple>
 8000b58:	bf34      	ite	cc
 8000b5a:	2001      	movcc	r0, #1
 8000b5c:	2000      	movcs	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpun>:
 8000b64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b6c:	d102      	bne.n	8000b74 <__aeabi_dcmpun+0x10>
 8000b6e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b72:	d10a      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b74:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x20>
 8000b7e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b82:	d102      	bne.n	8000b8a <__aeabi_dcmpun+0x26>
 8000b84:	f04f 0000 	mov.w	r0, #0
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0001 	mov.w	r0, #1
 8000b8e:	4770      	bx	lr

08000b90 <__aeabi_d2iz>:
 8000b90:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b98:	d215      	bcs.n	8000bc6 <__aeabi_d2iz+0x36>
 8000b9a:	d511      	bpl.n	8000bc0 <__aeabi_d2iz+0x30>
 8000b9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ba4:	d912      	bls.n	8000bcc <__aeabi_d2iz+0x3c>
 8000ba6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000baa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bb2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bba:	bf18      	it	ne
 8000bbc:	4240      	negne	r0, r0
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d105      	bne.n	8000bd8 <__aeabi_d2iz+0x48>
 8000bcc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd0:	bf08      	it	eq
 8000bd2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop

08000be0 <__aeabi_d2f>:
 8000be0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000be4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be8:	bf24      	itt	cs
 8000bea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bf2:	d90d      	bls.n	8000c10 <__aeabi_d2f+0x30>
 8000bf4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bfc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c00:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c04:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c08:	bf08      	it	eq
 8000c0a:	f020 0001 	biceq.w	r0, r0, #1
 8000c0e:	4770      	bx	lr
 8000c10:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c14:	d121      	bne.n	8000c5a <__aeabi_d2f+0x7a>
 8000c16:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c1a:	bfbc      	itt	lt
 8000c1c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c20:	4770      	bxlt	lr
 8000c22:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c26:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c2a:	f1c2 0218 	rsb	r2, r2, #24
 8000c2e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c32:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c36:	fa20 f002 	lsr.w	r0, r0, r2
 8000c3a:	bf18      	it	ne
 8000c3c:	f040 0001 	orrne.w	r0, r0, #1
 8000c40:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c44:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c48:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c4c:	ea40 000c 	orr.w	r0, r0, ip
 8000c50:	fa23 f302 	lsr.w	r3, r3, r2
 8000c54:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c58:	e7cc      	b.n	8000bf4 <__aeabi_d2f+0x14>
 8000c5a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c5e:	d107      	bne.n	8000c70 <__aeabi_d2f+0x90>
 8000c60:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c64:	bf1e      	ittt	ne
 8000c66:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c6a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c6e:	4770      	bxne	lr
 8000c70:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop

08000c80 <__aeabi_uldivmod>:
 8000c80:	b953      	cbnz	r3, 8000c98 <__aeabi_uldivmod+0x18>
 8000c82:	b94a      	cbnz	r2, 8000c98 <__aeabi_uldivmod+0x18>
 8000c84:	2900      	cmp	r1, #0
 8000c86:	bf08      	it	eq
 8000c88:	2800      	cmpeq	r0, #0
 8000c8a:	bf1c      	itt	ne
 8000c8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c90:	f04f 30ff 	movne.w	r0, #4294967295
 8000c94:	f000 b97a 	b.w	8000f8c <__aeabi_idiv0>
 8000c98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca0:	f000 f806 	bl	8000cb0 <__udivmoddi4>
 8000ca4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cac:	b004      	add	sp, #16
 8000cae:	4770      	bx	lr

08000cb0 <__udivmoddi4>:
 8000cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb4:	468c      	mov	ip, r1
 8000cb6:	460d      	mov	r5, r1
 8000cb8:	4604      	mov	r4, r0
 8000cba:	9e08      	ldr	r6, [sp, #32]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d151      	bne.n	8000d64 <__udivmoddi4+0xb4>
 8000cc0:	428a      	cmp	r2, r1
 8000cc2:	4617      	mov	r7, r2
 8000cc4:	d96d      	bls.n	8000da2 <__udivmoddi4+0xf2>
 8000cc6:	fab2 fe82 	clz	lr, r2
 8000cca:	f1be 0f00 	cmp.w	lr, #0
 8000cce:	d00b      	beq.n	8000ce8 <__udivmoddi4+0x38>
 8000cd0:	f1ce 0c20 	rsb	ip, lr, #32
 8000cd4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000cd8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cdc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ce0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000ce4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ce8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cec:	0c25      	lsrs	r5, r4, #16
 8000cee:	fbbc f8fa 	udiv	r8, ip, sl
 8000cf2:	fa1f f987 	uxth.w	r9, r7
 8000cf6:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cfa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cfe:	fb08 f309 	mul.w	r3, r8, r9
 8000d02:	42ab      	cmp	r3, r5
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x6c>
 8000d06:	19ed      	adds	r5, r5, r7
 8000d08:	f108 32ff 	add.w	r2, r8, #4294967295
 8000d0c:	f080 8123 	bcs.w	8000f56 <__udivmoddi4+0x2a6>
 8000d10:	42ab      	cmp	r3, r5
 8000d12:	f240 8120 	bls.w	8000f56 <__udivmoddi4+0x2a6>
 8000d16:	f1a8 0802 	sub.w	r8, r8, #2
 8000d1a:	443d      	add	r5, r7
 8000d1c:	1aed      	subs	r5, r5, r3
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d24:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d2c:	fb00 f909 	mul.w	r9, r0, r9
 8000d30:	45a1      	cmp	r9, r4
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x98>
 8000d34:	19e4      	adds	r4, r4, r7
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	f080 810a 	bcs.w	8000f52 <__udivmoddi4+0x2a2>
 8000d3e:	45a1      	cmp	r9, r4
 8000d40:	f240 8107 	bls.w	8000f52 <__udivmoddi4+0x2a2>
 8000d44:	3802      	subs	r0, #2
 8000d46:	443c      	add	r4, r7
 8000d48:	eba4 0409 	sub.w	r4, r4, r9
 8000d4c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d50:	2100      	movs	r1, #0
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d061      	beq.n	8000e1a <__udivmoddi4+0x16a>
 8000d56:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	6034      	str	r4, [r6, #0]
 8000d5e:	6073      	str	r3, [r6, #4]
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	428b      	cmp	r3, r1
 8000d66:	d907      	bls.n	8000d78 <__udivmoddi4+0xc8>
 8000d68:	2e00      	cmp	r6, #0
 8000d6a:	d054      	beq.n	8000e16 <__udivmoddi4+0x166>
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d72:	4608      	mov	r0, r1
 8000d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d78:	fab3 f183 	clz	r1, r3
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	f040 808e 	bne.w	8000e9e <__udivmoddi4+0x1ee>
 8000d82:	42ab      	cmp	r3, r5
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xdc>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80fa 	bhi.w	8000f80 <__udivmoddi4+0x2d0>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb65 0503 	sbc.w	r5, r5, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	46ac      	mov	ip, r5
 8000d96:	2e00      	cmp	r6, #0
 8000d98:	d03f      	beq.n	8000e1a <__udivmoddi4+0x16a>
 8000d9a:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da2:	b912      	cbnz	r2, 8000daa <__udivmoddi4+0xfa>
 8000da4:	2701      	movs	r7, #1
 8000da6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000daa:	fab7 fe87 	clz	lr, r7
 8000dae:	f1be 0f00 	cmp.w	lr, #0
 8000db2:	d134      	bne.n	8000e1e <__udivmoddi4+0x16e>
 8000db4:	1beb      	subs	r3, r5, r7
 8000db6:	0c3a      	lsrs	r2, r7, #16
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	fbb3 f8f2 	udiv	r8, r3, r2
 8000dc2:	0c25      	lsrs	r5, r4, #16
 8000dc4:	fb02 3318 	mls	r3, r2, r8, r3
 8000dc8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dcc:	fb0c f308 	mul.w	r3, ip, r8
 8000dd0:	42ab      	cmp	r3, r5
 8000dd2:	d907      	bls.n	8000de4 <__udivmoddi4+0x134>
 8000dd4:	19ed      	adds	r5, r5, r7
 8000dd6:	f108 30ff 	add.w	r0, r8, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x132>
 8000ddc:	42ab      	cmp	r3, r5
 8000dde:	f200 80d1 	bhi.w	8000f84 <__udivmoddi4+0x2d4>
 8000de2:	4680      	mov	r8, r0
 8000de4:	1aed      	subs	r5, r5, r3
 8000de6:	b2a3      	uxth	r3, r4
 8000de8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dec:	fb02 5510 	mls	r5, r2, r0, r5
 8000df0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000df4:	fb0c fc00 	mul.w	ip, ip, r0
 8000df8:	45a4      	cmp	ip, r4
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x15c>
 8000dfc:	19e4      	adds	r4, r4, r7
 8000dfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x15a>
 8000e04:	45a4      	cmp	ip, r4
 8000e06:	f200 80b8 	bhi.w	8000f7a <__udivmoddi4+0x2ca>
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	eba4 040c 	sub.w	r4, r4, ip
 8000e10:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e14:	e79d      	b.n	8000d52 <__udivmoddi4+0xa2>
 8000e16:	4631      	mov	r1, r6
 8000e18:	4630      	mov	r0, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	f1ce 0420 	rsb	r4, lr, #32
 8000e22:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e26:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e2a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e2e:	0c3a      	lsrs	r2, r7, #16
 8000e30:	fa25 f404 	lsr.w	r4, r5, r4
 8000e34:	ea48 0803 	orr.w	r8, r8, r3
 8000e38:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e3c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e40:	fb02 4411 	mls	r4, r2, r1, r4
 8000e44:	fa1f fc87 	uxth.w	ip, r7
 8000e48:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e4c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e50:	42ab      	cmp	r3, r5
 8000e52:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e56:	d909      	bls.n	8000e6c <__udivmoddi4+0x1bc>
 8000e58:	19ed      	adds	r5, r5, r7
 8000e5a:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e5e:	f080 808a 	bcs.w	8000f76 <__udivmoddi4+0x2c6>
 8000e62:	42ab      	cmp	r3, r5
 8000e64:	f240 8087 	bls.w	8000f76 <__udivmoddi4+0x2c6>
 8000e68:	3902      	subs	r1, #2
 8000e6a:	443d      	add	r5, r7
 8000e6c:	1aeb      	subs	r3, r5, r3
 8000e6e:	fa1f f588 	uxth.w	r5, r8
 8000e72:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e76:	fb02 3310 	mls	r3, r2, r0, r3
 8000e7a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e7e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e82:	42ab      	cmp	r3, r5
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x1e6>
 8000e86:	19ed      	adds	r5, r5, r7
 8000e88:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e8c:	d26f      	bcs.n	8000f6e <__udivmoddi4+0x2be>
 8000e8e:	42ab      	cmp	r3, r5
 8000e90:	d96d      	bls.n	8000f6e <__udivmoddi4+0x2be>
 8000e92:	3802      	subs	r0, #2
 8000e94:	443d      	add	r5, r7
 8000e96:	1aeb      	subs	r3, r5, r3
 8000e98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e9c:	e78f      	b.n	8000dbe <__udivmoddi4+0x10e>
 8000e9e:	f1c1 0720 	rsb	r7, r1, #32
 8000ea2:	fa22 f807 	lsr.w	r8, r2, r7
 8000ea6:	408b      	lsls	r3, r1
 8000ea8:	fa05 f401 	lsl.w	r4, r5, r1
 8000eac:	ea48 0303 	orr.w	r3, r8, r3
 8000eb0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000eb4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	ea4e 0e04 	orr.w	lr, lr, r4
 8000ebe:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ec2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000ec6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000eca:	fa1f f883 	uxth.w	r8, r3
 8000ece:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ed2:	fb09 f408 	mul.w	r4, r9, r8
 8000ed6:	42ac      	cmp	r4, r5
 8000ed8:	fa02 f201 	lsl.w	r2, r2, r1
 8000edc:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ee0:	d908      	bls.n	8000ef4 <__udivmoddi4+0x244>
 8000ee2:	18ed      	adds	r5, r5, r3
 8000ee4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ee8:	d243      	bcs.n	8000f72 <__udivmoddi4+0x2c2>
 8000eea:	42ac      	cmp	r4, r5
 8000eec:	d941      	bls.n	8000f72 <__udivmoddi4+0x2c2>
 8000eee:	f1a9 0902 	sub.w	r9, r9, #2
 8000ef2:	441d      	add	r5, r3
 8000ef4:	1b2d      	subs	r5, r5, r4
 8000ef6:	fa1f fe8e 	uxth.w	lr, lr
 8000efa:	fbb5 f0fc 	udiv	r0, r5, ip
 8000efe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f02:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f06:	fb00 f808 	mul.w	r8, r0, r8
 8000f0a:	45a0      	cmp	r8, r4
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x26e>
 8000f0e:	18e4      	adds	r4, r4, r3
 8000f10:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f14:	d229      	bcs.n	8000f6a <__udivmoddi4+0x2ba>
 8000f16:	45a0      	cmp	r8, r4
 8000f18:	d927      	bls.n	8000f6a <__udivmoddi4+0x2ba>
 8000f1a:	3802      	subs	r0, #2
 8000f1c:	441c      	add	r4, r3
 8000f1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f22:	eba4 0408 	sub.w	r4, r4, r8
 8000f26:	fba0 8902 	umull	r8, r9, r0, r2
 8000f2a:	454c      	cmp	r4, r9
 8000f2c:	46c6      	mov	lr, r8
 8000f2e:	464d      	mov	r5, r9
 8000f30:	d315      	bcc.n	8000f5e <__udivmoddi4+0x2ae>
 8000f32:	d012      	beq.n	8000f5a <__udivmoddi4+0x2aa>
 8000f34:	b156      	cbz	r6, 8000f4c <__udivmoddi4+0x29c>
 8000f36:	ebba 030e 	subs.w	r3, sl, lr
 8000f3a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f3e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f42:	40cb      	lsrs	r3, r1
 8000f44:	431f      	orrs	r7, r3
 8000f46:	40cc      	lsrs	r4, r1
 8000f48:	6037      	str	r7, [r6, #0]
 8000f4a:	6074      	str	r4, [r6, #4]
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f52:	4618      	mov	r0, r3
 8000f54:	e6f8      	b.n	8000d48 <__udivmoddi4+0x98>
 8000f56:	4690      	mov	r8, r2
 8000f58:	e6e0      	b.n	8000d1c <__udivmoddi4+0x6c>
 8000f5a:	45c2      	cmp	sl, r8
 8000f5c:	d2ea      	bcs.n	8000f34 <__udivmoddi4+0x284>
 8000f5e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f62:	eb69 0503 	sbc.w	r5, r9, r3
 8000f66:	3801      	subs	r0, #1
 8000f68:	e7e4      	b.n	8000f34 <__udivmoddi4+0x284>
 8000f6a:	4628      	mov	r0, r5
 8000f6c:	e7d7      	b.n	8000f1e <__udivmoddi4+0x26e>
 8000f6e:	4640      	mov	r0, r8
 8000f70:	e791      	b.n	8000e96 <__udivmoddi4+0x1e6>
 8000f72:	4681      	mov	r9, r0
 8000f74:	e7be      	b.n	8000ef4 <__udivmoddi4+0x244>
 8000f76:	4601      	mov	r1, r0
 8000f78:	e778      	b.n	8000e6c <__udivmoddi4+0x1bc>
 8000f7a:	3802      	subs	r0, #2
 8000f7c:	443c      	add	r4, r7
 8000f7e:	e745      	b.n	8000e0c <__udivmoddi4+0x15c>
 8000f80:	4608      	mov	r0, r1
 8000f82:	e708      	b.n	8000d96 <__udivmoddi4+0xe6>
 8000f84:	f1a8 0802 	sub.w	r8, r8, #2
 8000f88:	443d      	add	r5, r7
 8000f8a:	e72b      	b.n	8000de4 <__udivmoddi4+0x134>

08000f8c <__aeabi_idiv0>:
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop

08000f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f90:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f92:	4a0e      	ldr	r2, [pc, #56]	; (8000fcc <HAL_InitTick+0x3c>)
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_InitTick+0x40>)
{
 8000f96:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f98:	7818      	ldrb	r0, [r3, #0]
 8000f9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000fa2:	6810      	ldr	r0, [r2, #0]
 8000fa4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000fa8:	f000 f8a8 	bl	80010fc <HAL_SYSTICK_Config>
 8000fac:	4604      	mov	r4, r0
 8000fae:	b958      	cbnz	r0, 8000fc8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb0:	2d0f      	cmp	r5, #15
 8000fb2:	d809      	bhi.n	8000fc8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	4629      	mov	r1, r5
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fbc:	f000 f85e 	bl	800107c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <HAL_InitTick+0x44>)
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	601d      	str	r5, [r3, #0]
 8000fc6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000fc8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000fca:	bd38      	pop	{r3, r4, r5, pc}
 8000fcc:	20000008 	.word	0x20000008
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	20000004 	.word	0x20000004

08000fd8 <HAL_Init>:
{
 8000fd8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fda:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <HAL_Init+0x30>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fe2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000fea:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fec:	681a      	ldr	r2, [r3, #0]
 8000fee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ff2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff4:	2003      	movs	r0, #3
 8000ff6:	f000 f82f 	bl	8001058 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	f7ff ffc8 	bl	8000f90 <HAL_InitTick>
  HAL_MspInit();
 8001000:	f001 fb8a 	bl	8002718 <HAL_MspInit>
}
 8001004:	2000      	movs	r0, #0
 8001006:	bd08      	pop	{r3, pc}
 8001008:	40023c00 	.word	0x40023c00

0800100c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800100c:	4a03      	ldr	r2, [pc, #12]	; (800101c <HAL_IncTick+0x10>)
 800100e:	4b04      	ldr	r3, [pc, #16]	; (8001020 <HAL_IncTick+0x14>)
 8001010:	6811      	ldr	r1, [r2, #0]
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	440b      	add	r3, r1
 8001016:	6013      	str	r3, [r2, #0]
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000214 	.word	0x20000214
 8001020:	20000000 	.word	0x20000000

08001024 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001024:	4b01      	ldr	r3, [pc, #4]	; (800102c <HAL_GetTick+0x8>)
 8001026:	6818      	ldr	r0, [r3, #0]
}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000214 	.word	0x20000214

08001030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001030:	b538      	push	{r3, r4, r5, lr}
 8001032:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001034:	f7ff fff6 	bl	8001024 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001038:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800103a:	bf1c      	itt	ne
 800103c:	4b05      	ldrne	r3, [pc, #20]	; (8001054 <HAL_Delay+0x24>)
 800103e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8001040:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8001042:	bf18      	it	ne
 8001044:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001046:	f7ff ffed 	bl	8001024 <HAL_GetTick>
 800104a:	1b40      	subs	r0, r0, r5
 800104c:	4284      	cmp	r4, r0
 800104e:	d8fa      	bhi.n	8001046 <HAL_Delay+0x16>
  {
  }
}
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop
 8001054:	20000000 	.word	0x20000000

08001058 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001058:	4a07      	ldr	r2, [pc, #28]	; (8001078 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800105a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800105c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001060:	041b      	lsls	r3, r3, #16
 8001062:	0c1b      	lsrs	r3, r3, #16
 8001064:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001068:	0200      	lsls	r0, r0, #8
 800106a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800106e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001072:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001074:	60d3      	str	r3, [r2, #12]
 8001076:	4770      	bx	lr
 8001078:	e000ed00 	.word	0xe000ed00

0800107c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800107c:	4b17      	ldr	r3, [pc, #92]	; (80010dc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800107e:	b530      	push	{r4, r5, lr}
 8001080:	68dc      	ldr	r4, [r3, #12]
 8001082:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001086:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800108c:	2b04      	cmp	r3, #4
 800108e:	bf28      	it	cs
 8001090:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001092:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	f04f 0501 	mov.w	r5, #1
 8001098:	fa05 f303 	lsl.w	r3, r5, r3
 800109c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a0:	bf8c      	ite	hi
 80010a2:	3c03      	subhi	r4, #3
 80010a4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a6:	4019      	ands	r1, r3
 80010a8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010aa:	fa05 f404 	lsl.w	r4, r5, r4
 80010ae:	3c01      	subs	r4, #1
 80010b0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80010b2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b4:	ea42 0201 	orr.w	r2, r2, r1
 80010b8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010bc:	bfaf      	iteee	ge
 80010be:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c2:	f000 000f 	andlt.w	r0, r0, #15
 80010c6:	4b06      	ldrlt	r3, [pc, #24]	; (80010e0 <HAL_NVIC_SetPriority+0x64>)
 80010c8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ca:	bfa5      	ittet	ge
 80010cc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80010d0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80010d8:	bd30      	pop	{r4, r5, pc}
 80010da:	bf00      	nop
 80010dc:	e000ed00 	.word	0xe000ed00
 80010e0:	e000ed14 	.word	0xe000ed14

080010e4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80010e4:	0942      	lsrs	r2, r0, #5
 80010e6:	2301      	movs	r3, #1
 80010e8:	f000 001f 	and.w	r0, r0, #31
 80010ec:	fa03 f000 	lsl.w	r0, r3, r0
 80010f0:	4b01      	ldr	r3, [pc, #4]	; (80010f8 <HAL_NVIC_EnableIRQ+0x14>)
 80010f2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80010f6:	4770      	bx	lr
 80010f8:	e000e100 	.word	0xe000e100

080010fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010fc:	3801      	subs	r0, #1
 80010fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001102:	d20a      	bcs.n	800111a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001106:	4a07      	ldr	r2, [pc, #28]	; (8001124 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001108:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800110a:	21f0      	movs	r1, #240	; 0xf0
 800110c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001110:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001112:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001114:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800111a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000e010 	.word	0xe000e010
 8001124:	e000ed00 	.word	0xe000ed00

08001128 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001128:	4b04      	ldr	r3, [pc, #16]	; (800113c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800112a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800112c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800112e:	bf0c      	ite	eq
 8001130:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001134:	f022 0204 	bicne.w	r2, r2, #4
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	4770      	bx	lr
 800113c:	e000e010 	.word	0xe000e010

08001140 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001140:	4770      	bx	lr

08001142 <HAL_SYSTICK_IRQHandler>:
{
 8001142:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001144:	f7ff fffc 	bl	8001140 <HAL_SYSTICK_Callback>
 8001148:	bd08      	pop	{r3, pc}
	...

0800114c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800114c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001150:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001152:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001154:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80012f8 <HAL_GPIO_Init+0x1ac>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001158:	4a65      	ldr	r2, [pc, #404]	; (80012f0 <HAL_GPIO_Init+0x1a4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800115a:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 80012fc <HAL_GPIO_Init+0x1b0>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800115e:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001160:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 8001162:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001166:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001168:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800116c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001170:	45b6      	cmp	lr, r6
 8001172:	f040 80aa 	bne.w	80012ca <HAL_GPIO_Init+0x17e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001176:	684c      	ldr	r4, [r1, #4]
 8001178:	f024 0710 	bic.w	r7, r4, #16
 800117c:	2f02      	cmp	r7, #2
 800117e:	d116      	bne.n	80011ae <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001180:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001184:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001188:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800118c:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001190:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001194:	f04f 0c0f 	mov.w	ip, #15
 8001198:	fa0c fc0b 	lsl.w	ip, ip, fp
 800119c:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011a0:	690d      	ldr	r5, [r1, #16]
 80011a2:	fa05 f50b 	lsl.w	r5, r5, fp
 80011a6:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80011aa:	f8ca 5020 	str.w	r5, [sl, #32]
 80011ae:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011b2:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80011b4:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011b8:	fa05 f50a 	lsl.w	r5, r5, sl
 80011bc:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011be:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011c2:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011c6:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011ca:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011cc:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011d0:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80011d2:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011d6:	d811      	bhi.n	80011fc <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80011d8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011da:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011de:	68cf      	ldr	r7, [r1, #12]
 80011e0:	fa07 fc0a 	lsl.w	ip, r7, sl
 80011e4:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80011e8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80011ea:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011ec:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80011f0:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80011f4:	409f      	lsls	r7, r3
 80011f6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80011fa:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80011fc:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011fe:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001200:	688f      	ldr	r7, [r1, #8]
 8001202:	fa07 f70a 	lsl.w	r7, r7, sl
 8001206:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8001208:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800120a:	00e5      	lsls	r5, r4, #3
 800120c:	d55d      	bpl.n	80012ca <HAL_GPIO_Init+0x17e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120e:	f04f 0b00 	mov.w	fp, #0
 8001212:	f8cd b00c 	str.w	fp, [sp, #12]
 8001216:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800121a:	4d36      	ldr	r5, [pc, #216]	; (80012f4 <HAL_GPIO_Init+0x1a8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121c:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8001220:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8001224:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8001228:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 800122c:	9703      	str	r7, [sp, #12]
 800122e:	9f03      	ldr	r7, [sp, #12]
 8001230:	f023 0703 	bic.w	r7, r3, #3
 8001234:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001238:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800123c:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8001240:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001244:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001248:	f04f 0e0f 	mov.w	lr, #15
 800124c:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001250:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001252:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001256:	d03f      	beq.n	80012d8 <HAL_GPIO_Init+0x18c>
 8001258:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800125c:	42a8      	cmp	r0, r5
 800125e:	d03d      	beq.n	80012dc <HAL_GPIO_Init+0x190>
 8001260:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001264:	42a8      	cmp	r0, r5
 8001266:	d03b      	beq.n	80012e0 <HAL_GPIO_Init+0x194>
 8001268:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800126c:	42a8      	cmp	r0, r5
 800126e:	d039      	beq.n	80012e4 <HAL_GPIO_Init+0x198>
 8001270:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001274:	42a8      	cmp	r0, r5
 8001276:	d037      	beq.n	80012e8 <HAL_GPIO_Init+0x19c>
 8001278:	4548      	cmp	r0, r9
 800127a:	d037      	beq.n	80012ec <HAL_GPIO_Init+0x1a0>
 800127c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001280:	42a8      	cmp	r0, r5
 8001282:	bf14      	ite	ne
 8001284:	2507      	movne	r5, #7
 8001286:	2506      	moveq	r5, #6
 8001288:	fa05 f50c 	lsl.w	r5, r5, ip
 800128c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001290:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001292:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001294:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001296:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800129a:	bf0c      	ite	eq
 800129c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800129e:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80012a0:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80012a2:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012a4:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80012a8:	bf0c      	ite	eq
 80012aa:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80012ac:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80012ae:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012b0:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012b2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80012b6:	bf0c      	ite	eq
 80012b8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80012ba:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80012bc:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80012be:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012c0:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80012c2:	bf54      	ite	pl
 80012c4:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80012c6:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80012c8:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ca:	3301      	adds	r3, #1
 80012cc:	2b10      	cmp	r3, #16
 80012ce:	f47f af48 	bne.w	8001162 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80012d2:	b005      	add	sp, #20
 80012d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012d8:	465d      	mov	r5, fp
 80012da:	e7d5      	b.n	8001288 <HAL_GPIO_Init+0x13c>
 80012dc:	2501      	movs	r5, #1
 80012de:	e7d3      	b.n	8001288 <HAL_GPIO_Init+0x13c>
 80012e0:	2502      	movs	r5, #2
 80012e2:	e7d1      	b.n	8001288 <HAL_GPIO_Init+0x13c>
 80012e4:	2503      	movs	r5, #3
 80012e6:	e7cf      	b.n	8001288 <HAL_GPIO_Init+0x13c>
 80012e8:	2504      	movs	r5, #4
 80012ea:	e7cd      	b.n	8001288 <HAL_GPIO_Init+0x13c>
 80012ec:	2505      	movs	r5, #5
 80012ee:	e7cb      	b.n	8001288 <HAL_GPIO_Init+0x13c>
 80012f0:	40013c00 	.word	0x40013c00
 80012f4:	40020000 	.word	0x40020000
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40021400 	.word	0x40021400

08001300 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001300:	b10a      	cbz	r2, 8001306 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001302:	6181      	str	r1, [r0, #24]
 8001304:	4770      	bx	lr
 8001306:	0409      	lsls	r1, r1, #16
 8001308:	e7fb      	b.n	8001302 <HAL_GPIO_WritePin+0x2>
	...

0800130c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800130c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001310:	460d      	mov	r5, r1
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001312:	4604      	mov	r4, r0
 8001314:	b910      	cbnz	r0, 800131c <HAL_RCC_ClockConfig+0x10>
  {
    return HAL_ERROR;
 8001316:	2001      	movs	r0, #1
 8001318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800131c:	4b44      	ldr	r3, [pc, #272]	; (8001430 <HAL_RCC_ClockConfig+0x124>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	f002 020f 	and.w	r2, r2, #15
 8001324:	428a      	cmp	r2, r1
 8001326:	d328      	bcc.n	800137a <HAL_RCC_ClockConfig+0x6e>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001328:	6821      	ldr	r1, [r4, #0]
 800132a:	078f      	lsls	r7, r1, #30
 800132c:	d42d      	bmi.n	800138a <HAL_RCC_ClockConfig+0x7e>
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800132e:	07c8      	lsls	r0, r1, #31
 8001330:	d440      	bmi.n	80013b4 <HAL_RCC_ClockConfig+0xa8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001332:	4b3f      	ldr	r3, [pc, #252]	; (8001430 <HAL_RCC_ClockConfig+0x124>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	f002 020f 	and.w	r2, r2, #15
 800133a:	4295      	cmp	r5, r2
 800133c:	d366      	bcc.n	800140c <HAL_RCC_ClockConfig+0x100>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800133e:	6822      	ldr	r2, [r4, #0]
 8001340:	0751      	lsls	r1, r2, #29
 8001342:	d46c      	bmi.n	800141e <HAL_RCC_ClockConfig+0x112>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001344:	0713      	lsls	r3, r2, #28
 8001346:	d507      	bpl.n	8001358 <HAL_RCC_ClockConfig+0x4c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001348:	4a3a      	ldr	r2, [pc, #232]	; (8001434 <HAL_RCC_ClockConfig+0x128>)
 800134a:	6921      	ldr	r1, [r4, #16]
 800134c:	6893      	ldr	r3, [r2, #8]
 800134e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001352:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001356:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001358:	f000 f898 	bl	800148c <HAL_RCC_GetSysClockFreq>
 800135c:	4b35      	ldr	r3, [pc, #212]	; (8001434 <HAL_RCC_ClockConfig+0x128>)
 800135e:	4a36      	ldr	r2, [pc, #216]	; (8001438 <HAL_RCC_ClockConfig+0x12c>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001366:	5cd3      	ldrb	r3, [r2, r3]
 8001368:	40d8      	lsrs	r0, r3
 800136a:	4b34      	ldr	r3, [pc, #208]	; (800143c <HAL_RCC_ClockConfig+0x130>)
 800136c:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800136e:	2000      	movs	r0, #0
 8001370:	f7ff fe0e 	bl	8000f90 <HAL_InitTick>

  return HAL_OK;
 8001374:	2000      	movs	r0, #0
 8001376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800137a:	b2ca      	uxtb	r2, r1
 800137c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 030f 	and.w	r3, r3, #15
 8001384:	4299      	cmp	r1, r3
 8001386:	d1c6      	bne.n	8001316 <HAL_RCC_ClockConfig+0xa>
 8001388:	e7ce      	b.n	8001328 <HAL_RCC_ClockConfig+0x1c>
 800138a:	4b2a      	ldr	r3, [pc, #168]	; (8001434 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800138c:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001390:	bf1e      	ittt	ne
 8001392:	689a      	ldrne	r2, [r3, #8]
 8001394:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001398:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800139a:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800139c:	bf42      	ittt	mi
 800139e:	689a      	ldrmi	r2, [r3, #8]
 80013a0:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80013a4:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013a6:	689a      	ldr	r2, [r3, #8]
 80013a8:	68a0      	ldr	r0, [r4, #8]
 80013aa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80013ae:	4302      	orrs	r2, r0
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	e7bc      	b.n	800132e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013b4:	6862      	ldr	r2, [r4, #4]
 80013b6:	4b1f      	ldr	r3, [pc, #124]	; (8001434 <HAL_RCC_ClockConfig+0x128>)
 80013b8:	2a01      	cmp	r2, #1
 80013ba:	d11d      	bne.n	80013f8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c2:	d0a8      	beq.n	8001316 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013c4:	4e1b      	ldr	r6, [pc, #108]	; (8001434 <HAL_RCC_ClockConfig+0x128>)
 80013c6:	68b3      	ldr	r3, [r6, #8]
 80013c8:	f023 0303 	bic.w	r3, r3, #3
 80013cc:	4313      	orrs	r3, r2
 80013ce:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80013d0:	f7ff fe28 	bl	8001024 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013d4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80013d8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013da:	68b3      	ldr	r3, [r6, #8]
 80013dc:	6862      	ldr	r2, [r4, #4]
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80013e6:	d0a4      	beq.n	8001332 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013e8:	f7ff fe1c 	bl	8001024 <HAL_GetTick>
 80013ec:	1bc0      	subs	r0, r0, r7
 80013ee:	4540      	cmp	r0, r8
 80013f0:	d9f3      	bls.n	80013da <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 80013f2:	2003      	movs	r0, #3
}
 80013f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013f8:	1e91      	subs	r1, r2, #2
 80013fa:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013fc:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013fe:	d802      	bhi.n	8001406 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001400:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001404:	e7dd      	b.n	80013c2 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001406:	f013 0f02 	tst.w	r3, #2
 800140a:	e7da      	b.n	80013c2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800140c:	b2ea      	uxtb	r2, r5
 800140e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 030f 	and.w	r3, r3, #15
 8001416:	429d      	cmp	r5, r3
 8001418:	f47f af7d 	bne.w	8001316 <HAL_RCC_ClockConfig+0xa>
 800141c:	e78f      	b.n	800133e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800141e:	4905      	ldr	r1, [pc, #20]	; (8001434 <HAL_RCC_ClockConfig+0x128>)
 8001420:	68e0      	ldr	r0, [r4, #12]
 8001422:	688b      	ldr	r3, [r1, #8]
 8001424:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001428:	4303      	orrs	r3, r0
 800142a:	608b      	str	r3, [r1, #8]
 800142c:	e78a      	b.n	8001344 <HAL_RCC_ClockConfig+0x38>
 800142e:	bf00      	nop
 8001430:	40023c00 	.word	0x40023c00
 8001434:	40023800 	.word	0x40023800
 8001438:	080050f5 	.word	0x080050f5
 800143c:	20000008 	.word	0x20000008

08001440 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001440:	4b01      	ldr	r3, [pc, #4]	; (8001448 <HAL_RCC_GetHCLKFreq+0x8>)
 8001442:	6818      	ldr	r0, [r3, #0]
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	20000008 	.word	0x20000008

0800144c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <HAL_RCC_GetPCLK1Freq+0x14>)
 800144e:	4a05      	ldr	r2, [pc, #20]	; (8001464 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001456:	5cd3      	ldrb	r3, [r2, r3]
 8001458:	4a03      	ldr	r2, [pc, #12]	; (8001468 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800145a:	6810      	ldr	r0, [r2, #0]
}
 800145c:	40d8      	lsrs	r0, r3
 800145e:	4770      	bx	lr
 8001460:	40023800 	.word	0x40023800
 8001464:	08005105 	.word	0x08005105
 8001468:	20000008 	.word	0x20000008

0800146c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800146c:	4b04      	ldr	r3, [pc, #16]	; (8001480 <HAL_RCC_GetPCLK2Freq+0x14>)
 800146e:	4a05      	ldr	r2, [pc, #20]	; (8001484 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001476:	5cd3      	ldrb	r3, [r2, r3]
 8001478:	4a03      	ldr	r2, [pc, #12]	; (8001488 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800147a:	6810      	ldr	r0, [r2, #0]
}
 800147c:	40d8      	lsrs	r0, r3
 800147e:	4770      	bx	lr
 8001480:	40023800 	.word	0x40023800
 8001484:	08005105 	.word	0x08005105
 8001488:	20000008 	.word	0x20000008

0800148c <HAL_RCC_GetSysClockFreq>:
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800148c:	4920      	ldr	r1, [pc, #128]	; (8001510 <HAL_RCC_GetSysClockFreq+0x84>)
{
 800148e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001490:	688b      	ldr	r3, [r1, #8]
 8001492:	f003 030c 	and.w	r3, r3, #12
 8001496:	2b08      	cmp	r3, #8
 8001498:	d007      	beq.n	80014aa <HAL_RCC_GetSysClockFreq+0x1e>
 800149a:	2b0c      	cmp	r3, #12
 800149c:	d020      	beq.n	80014e0 <HAL_RCC_GetSysClockFreq+0x54>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800149e:	4a1d      	ldr	r2, [pc, #116]	; (8001514 <HAL_RCC_GetSysClockFreq+0x88>)
 80014a0:	481d      	ldr	r0, [pc, #116]	; (8001518 <HAL_RCC_GetSysClockFreq+0x8c>)
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	bf18      	it	ne
 80014a6:	4610      	movne	r0, r2
 80014a8:	bd08      	pop	{r3, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014aa:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014ac:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014ae:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014b0:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014b4:	bf14      	ite	ne
 80014b6:	4818      	ldrne	r0, [pc, #96]	; (8001518 <HAL_RCC_GetSysClockFreq+0x8c>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014b8:	4816      	ldreq	r0, [pc, #88]	; (8001514 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014ba:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80014be:	bf18      	it	ne
 80014c0:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014c2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014c6:	fba1 0100 	umull	r0, r1, r1, r0
 80014ca:	f7ff fbd9 	bl	8000c80 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <HAL_RCC_GetSysClockFreq+0x84>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80014d6:	3301      	adds	r3, #1
 80014d8:	005b      	lsls	r3, r3, #1
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);

      sysclockfreq = pllvco/pllr;
 80014da:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80014de:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014e0:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014e2:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014e4:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014e6:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014ea:	bf14      	ite	ne
 80014ec:	480a      	ldrne	r0, [pc, #40]	; (8001518 <HAL_RCC_GetSysClockFreq+0x8c>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014ee:	4809      	ldreq	r0, [pc, #36]	; (8001514 <HAL_RCC_GetSysClockFreq+0x88>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014f0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80014f4:	bf18      	it	ne
 80014f6:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014f8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014fc:	fba1 0100 	umull	r0, r1, r1, r0
 8001500:	f7ff fbbe 	bl	8000c80 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001504:	4b02      	ldr	r3, [pc, #8]	; (8001510 <HAL_RCC_GetSysClockFreq+0x84>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f3c3 7302 	ubfx	r3, r3, #28, #3
 800150c:	e7e5      	b.n	80014da <HAL_RCC_GetSysClockFreq+0x4e>
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800
 8001514:	00f42400 	.word	0x00f42400
 8001518:	007a1200 	.word	0x007a1200

0800151c <HAL_RCC_OscConfig>:
  uint32_t tickstart = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800151c:	6803      	ldr	r3, [r0, #0]
{
 800151e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001522:	07df      	lsls	r7, r3, #31
{
 8001524:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001526:	d410      	bmi.n	800154a <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001528:	6823      	ldr	r3, [r4, #0]
 800152a:	079e      	lsls	r6, r3, #30
 800152c:	d467      	bmi.n	80015fe <HAL_RCC_OscConfig+0xe2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800152e:	6823      	ldr	r3, [r4, #0]
 8001530:	071a      	lsls	r2, r3, #28
 8001532:	f100 80b2 	bmi.w	800169a <HAL_RCC_OscConfig+0x17e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001536:	6823      	ldr	r3, [r4, #0]
 8001538:	075b      	lsls	r3, r3, #29
 800153a:	f100 80d0 	bmi.w	80016de <HAL_RCC_OscConfig+0x1c2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800153e:	69a2      	ldr	r2, [r4, #24]
 8001540:	2a00      	cmp	r2, #0
 8001542:	f040 8139 	bne.w	80017b8 <HAL_RCC_OscConfig+0x29c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001546:	2000      	movs	r0, #0
 8001548:	e01e      	b.n	8001588 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800154a:	4b97      	ldr	r3, [pc, #604]	; (80017a8 <HAL_RCC_OscConfig+0x28c>)
 800154c:	689a      	ldr	r2, [r3, #8]
 800154e:	f002 020c 	and.w	r2, r2, #12
 8001552:	2a04      	cmp	r2, #4
 8001554:	d010      	beq.n	8001578 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001556:	689a      	ldr	r2, [r3, #8]
 8001558:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800155c:	2a08      	cmp	r2, #8
 800155e:	d102      	bne.n	8001566 <HAL_RCC_OscConfig+0x4a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	025d      	lsls	r5, r3, #9
 8001564:	d408      	bmi.n	8001578 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001566:	4b90      	ldr	r3, [pc, #576]	; (80017a8 <HAL_RCC_OscConfig+0x28c>)
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	f002 020c 	and.w	r2, r2, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800156e:	2a0c      	cmp	r2, #12
 8001570:	d10d      	bne.n	800158e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001572:	685a      	ldr	r2, [r3, #4]
 8001574:	0250      	lsls	r0, r2, #9
 8001576:	d50a      	bpl.n	800158e <HAL_RCC_OscConfig+0x72>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001578:	4b8b      	ldr	r3, [pc, #556]	; (80017a8 <HAL_RCC_OscConfig+0x28c>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	0399      	lsls	r1, r3, #14
 800157e:	d5d3      	bpl.n	8001528 <HAL_RCC_OscConfig+0xc>
 8001580:	6863      	ldr	r3, [r4, #4]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1d0      	bne.n	8001528 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001586:	2001      	movs	r0, #1
}
 8001588:	b002      	add	sp, #8
 800158a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800158e:	6862      	ldr	r2, [r4, #4]
 8001590:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001594:	d111      	bne.n	80015ba <HAL_RCC_OscConfig+0x9e>
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800159c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800159e:	f7ff fd41 	bl	8001024 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a2:	4d81      	ldr	r5, [pc, #516]	; (80017a8 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 80015a4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015a6:	682b      	ldr	r3, [r5, #0]
 80015a8:	039a      	lsls	r2, r3, #14
 80015aa:	d4bd      	bmi.n	8001528 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015ac:	f7ff fd3a 	bl	8001024 <HAL_GetTick>
 80015b0:	1b80      	subs	r0, r0, r6
 80015b2:	2864      	cmp	r0, #100	; 0x64
 80015b4:	d9f7      	bls.n	80015a6 <HAL_RCC_OscConfig+0x8a>
            return HAL_TIMEOUT;
 80015b6:	2003      	movs	r0, #3
 80015b8:	e7e6      	b.n	8001588 <HAL_RCC_OscConfig+0x6c>
 80015ba:	4d7b      	ldr	r5, [pc, #492]	; (80017a8 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015bc:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80015c0:	682b      	ldr	r3, [r5, #0]
 80015c2:	d107      	bne.n	80015d4 <HAL_RCC_OscConfig+0xb8>
 80015c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c8:	602b      	str	r3, [r5, #0]
 80015ca:	682b      	ldr	r3, [r5, #0]
 80015cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d0:	602b      	str	r3, [r5, #0]
 80015d2:	e7e4      	b.n	800159e <HAL_RCC_OscConfig+0x82>
 80015d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015d8:	602b      	str	r3, [r5, #0]
 80015da:	682b      	ldr	r3, [r5, #0]
 80015dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015e0:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015e2:	2a00      	cmp	r2, #0
 80015e4:	d1db      	bne.n	800159e <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80015e6:	f7ff fd1d 	bl	8001024 <HAL_GetTick>
 80015ea:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ec:	682b      	ldr	r3, [r5, #0]
 80015ee:	039b      	lsls	r3, r3, #14
 80015f0:	d59a      	bpl.n	8001528 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015f2:	f7ff fd17 	bl	8001024 <HAL_GetTick>
 80015f6:	1b80      	subs	r0, r0, r6
 80015f8:	2864      	cmp	r0, #100	; 0x64
 80015fa:	d9f7      	bls.n	80015ec <HAL_RCC_OscConfig+0xd0>
 80015fc:	e7db      	b.n	80015b6 <HAL_RCC_OscConfig+0x9a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80015fe:	4b6a      	ldr	r3, [pc, #424]	; (80017a8 <HAL_RCC_OscConfig+0x28c>)
 8001600:	689a      	ldr	r2, [r3, #8]
 8001602:	f012 0f0c 	tst.w	r2, #12
 8001606:	d010      	beq.n	800162a <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800160e:	2a08      	cmp	r2, #8
 8001610:	d102      	bne.n	8001618 <HAL_RCC_OscConfig+0xfc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	025f      	lsls	r7, r3, #9
 8001616:	d508      	bpl.n	800162a <HAL_RCC_OscConfig+0x10e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001618:	4a63      	ldr	r2, [pc, #396]	; (80017a8 <HAL_RCC_OscConfig+0x28c>)
 800161a:	6893      	ldr	r3, [r2, #8]
 800161c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001620:	2b0c      	cmp	r3, #12
 8001622:	d111      	bne.n	8001648 <HAL_RCC_OscConfig+0x12c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001624:	6853      	ldr	r3, [r2, #4]
 8001626:	025e      	lsls	r6, r3, #9
 8001628:	d40e      	bmi.n	8001648 <HAL_RCC_OscConfig+0x12c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800162a:	4b5f      	ldr	r3, [pc, #380]	; (80017a8 <HAL_RCC_OscConfig+0x28c>)
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	0795      	lsls	r5, r2, #30
 8001630:	d502      	bpl.n	8001638 <HAL_RCC_OscConfig+0x11c>
 8001632:	68e2      	ldr	r2, [r4, #12]
 8001634:	2a01      	cmp	r2, #1
 8001636:	d1a6      	bne.n	8001586 <HAL_RCC_OscConfig+0x6a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	6921      	ldr	r1, [r4, #16]
 800163c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001640:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001644:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001646:	e772      	b.n	800152e <HAL_RCC_OscConfig+0x12>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001648:	68e2      	ldr	r2, [r4, #12]
 800164a:	4b58      	ldr	r3, [pc, #352]	; (80017ac <HAL_RCC_OscConfig+0x290>)
 800164c:	b1b2      	cbz	r2, 800167c <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_ENABLE();
 800164e:	2201      	movs	r2, #1
 8001650:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001652:	f7ff fce7 	bl	8001024 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001656:	4d54      	ldr	r5, [pc, #336]	; (80017a8 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001658:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800165a:	682b      	ldr	r3, [r5, #0]
 800165c:	0798      	lsls	r0, r3, #30
 800165e:	d507      	bpl.n	8001670 <HAL_RCC_OscConfig+0x154>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001660:	682b      	ldr	r3, [r5, #0]
 8001662:	6922      	ldr	r2, [r4, #16]
 8001664:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001668:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800166c:	602b      	str	r3, [r5, #0]
 800166e:	e75e      	b.n	800152e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001670:	f7ff fcd8 	bl	8001024 <HAL_GetTick>
 8001674:	1b80      	subs	r0, r0, r6
 8001676:	2802      	cmp	r0, #2
 8001678:	d9ef      	bls.n	800165a <HAL_RCC_OscConfig+0x13e>
 800167a:	e79c      	b.n	80015b6 <HAL_RCC_OscConfig+0x9a>
        __HAL_RCC_HSI_DISABLE();
 800167c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800167e:	f7ff fcd1 	bl	8001024 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001682:	4d49      	ldr	r5, [pc, #292]	; (80017a8 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8001684:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001686:	682b      	ldr	r3, [r5, #0]
 8001688:	0799      	lsls	r1, r3, #30
 800168a:	f57f af50 	bpl.w	800152e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800168e:	f7ff fcc9 	bl	8001024 <HAL_GetTick>
 8001692:	1b80      	subs	r0, r0, r6
 8001694:	2802      	cmp	r0, #2
 8001696:	d9f6      	bls.n	8001686 <HAL_RCC_OscConfig+0x16a>
 8001698:	e78d      	b.n	80015b6 <HAL_RCC_OscConfig+0x9a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800169a:	6962      	ldr	r2, [r4, #20]
 800169c:	4b44      	ldr	r3, [pc, #272]	; (80017b0 <HAL_RCC_OscConfig+0x294>)
 800169e:	b17a      	cbz	r2, 80016c0 <HAL_RCC_OscConfig+0x1a4>
      __HAL_RCC_LSI_ENABLE();
 80016a0:	2201      	movs	r2, #1
 80016a2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80016a4:	f7ff fcbe 	bl	8001024 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016a8:	4d3f      	ldr	r5, [pc, #252]	; (80017a8 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80016aa:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ac:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80016ae:	079f      	lsls	r7, r3, #30
 80016b0:	f53f af41 	bmi.w	8001536 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016b4:	f7ff fcb6 	bl	8001024 <HAL_GetTick>
 80016b8:	1b80      	subs	r0, r0, r6
 80016ba:	2802      	cmp	r0, #2
 80016bc:	d9f6      	bls.n	80016ac <HAL_RCC_OscConfig+0x190>
 80016be:	e77a      	b.n	80015b6 <HAL_RCC_OscConfig+0x9a>
      __HAL_RCC_LSI_DISABLE();
 80016c0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80016c2:	f7ff fcaf 	bl	8001024 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c6:	4d38      	ldr	r5, [pc, #224]	; (80017a8 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80016c8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016ca:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80016cc:	0798      	lsls	r0, r3, #30
 80016ce:	f57f af32 	bpl.w	8001536 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016d2:	f7ff fca7 	bl	8001024 <HAL_GetTick>
 80016d6:	1b80      	subs	r0, r0, r6
 80016d8:	2802      	cmp	r0, #2
 80016da:	d9f6      	bls.n	80016ca <HAL_RCC_OscConfig+0x1ae>
 80016dc:	e76b      	b.n	80015b6 <HAL_RCC_OscConfig+0x9a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016de:	4b32      	ldr	r3, [pc, #200]	; (80017a8 <HAL_RCC_OscConfig+0x28c>)
 80016e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016e2:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80016e6:	d128      	bne.n	800173a <HAL_RCC_OscConfig+0x21e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e8:	9201      	str	r2, [sp, #4]
 80016ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016f0:	641a      	str	r2, [r3, #64]	; 0x40
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f8:	9301      	str	r3, [sp, #4]
 80016fa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80016fc:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fe:	4d2d      	ldr	r5, [pc, #180]	; (80017b4 <HAL_RCC_OscConfig+0x298>)
 8001700:	682b      	ldr	r3, [r5, #0]
 8001702:	05d9      	lsls	r1, r3, #23
 8001704:	d51b      	bpl.n	800173e <HAL_RCC_OscConfig+0x222>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001706:	68a3      	ldr	r3, [r4, #8]
 8001708:	4d27      	ldr	r5, [pc, #156]	; (80017a8 <HAL_RCC_OscConfig+0x28c>)
 800170a:	2b01      	cmp	r3, #1
 800170c:	d127      	bne.n	800175e <HAL_RCC_OscConfig+0x242>
 800170e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001710:	f043 0301 	orr.w	r3, r3, #1
 8001714:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001716:	f7ff fc85 	bl	8001024 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800171a:	4d23      	ldr	r5, [pc, #140]	; (80017a8 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 800171c:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800171e:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001722:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001724:	079b      	lsls	r3, r3, #30
 8001726:	d539      	bpl.n	800179c <HAL_RCC_OscConfig+0x280>
    if(pwrclkchanged == SET)
 8001728:	2e00      	cmp	r6, #0
 800172a:	f43f af08 	beq.w	800153e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 800172e:	4a1e      	ldr	r2, [pc, #120]	; (80017a8 <HAL_RCC_OscConfig+0x28c>)
 8001730:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001732:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001736:	6413      	str	r3, [r2, #64]	; 0x40
 8001738:	e701      	b.n	800153e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800173a:	2600      	movs	r6, #0
 800173c:	e7df      	b.n	80016fe <HAL_RCC_OscConfig+0x1e2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800173e:	682b      	ldr	r3, [r5, #0]
 8001740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001744:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001746:	f7ff fc6d 	bl	8001024 <HAL_GetTick>
 800174a:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174c:	682b      	ldr	r3, [r5, #0]
 800174e:	05da      	lsls	r2, r3, #23
 8001750:	d4d9      	bmi.n	8001706 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001752:	f7ff fc67 	bl	8001024 <HAL_GetTick>
 8001756:	1bc0      	subs	r0, r0, r7
 8001758:	2802      	cmp	r0, #2
 800175a:	d9f7      	bls.n	800174c <HAL_RCC_OscConfig+0x230>
 800175c:	e72b      	b.n	80015b6 <HAL_RCC_OscConfig+0x9a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800175e:	2b05      	cmp	r3, #5
 8001760:	d104      	bne.n	800176c <HAL_RCC_OscConfig+0x250>
 8001762:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001764:	f043 0304 	orr.w	r3, r3, #4
 8001768:	672b      	str	r3, [r5, #112]	; 0x70
 800176a:	e7d0      	b.n	800170e <HAL_RCC_OscConfig+0x1f2>
 800176c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800176e:	f022 0201 	bic.w	r2, r2, #1
 8001772:	672a      	str	r2, [r5, #112]	; 0x70
 8001774:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001776:	f022 0204 	bic.w	r2, r2, #4
 800177a:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1ca      	bne.n	8001716 <HAL_RCC_OscConfig+0x1fa>
      tickstart = HAL_GetTick();
 8001780:	f7ff fc50 	bl	8001024 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001784:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001788:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800178a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800178c:	0798      	lsls	r0, r3, #30
 800178e:	d5cb      	bpl.n	8001728 <HAL_RCC_OscConfig+0x20c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001790:	f7ff fc48 	bl	8001024 <HAL_GetTick>
 8001794:	1bc0      	subs	r0, r0, r7
 8001796:	4540      	cmp	r0, r8
 8001798:	d9f7      	bls.n	800178a <HAL_RCC_OscConfig+0x26e>
 800179a:	e70c      	b.n	80015b6 <HAL_RCC_OscConfig+0x9a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800179c:	f7ff fc42 	bl	8001024 <HAL_GetTick>
 80017a0:	1bc0      	subs	r0, r0, r7
 80017a2:	4540      	cmp	r0, r8
 80017a4:	d9bd      	bls.n	8001722 <HAL_RCC_OscConfig+0x206>
 80017a6:	e706      	b.n	80015b6 <HAL_RCC_OscConfig+0x9a>
 80017a8:	40023800 	.word	0x40023800
 80017ac:	42470000 	.word	0x42470000
 80017b0:	42470e80 	.word	0x42470e80
 80017b4:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017b8:	4d23      	ldr	r5, [pc, #140]	; (8001848 <HAL_RCC_OscConfig+0x32c>)
 80017ba:	68ab      	ldr	r3, [r5, #8]
 80017bc:	f003 030c 	and.w	r3, r3, #12
 80017c0:	2b08      	cmp	r3, #8
 80017c2:	f43f aee0 	beq.w	8001586 <HAL_RCC_OscConfig+0x6a>
 80017c6:	4e21      	ldr	r6, [pc, #132]	; (800184c <HAL_RCC_OscConfig+0x330>)
 80017c8:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ca:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80017cc:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017ce:	d12d      	bne.n	800182c <HAL_RCC_OscConfig+0x310>
        tickstart = HAL_GetTick();
 80017d0:	f7ff fc28 	bl	8001024 <HAL_GetTick>
 80017d4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017d6:	682b      	ldr	r3, [r5, #0]
 80017d8:	0199      	lsls	r1, r3, #6
 80017da:	d421      	bmi.n	8001820 <HAL_RCC_OscConfig+0x304>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017dc:	6a22      	ldr	r2, [r4, #32]
 80017de:	69e3      	ldr	r3, [r4, #28]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80017e4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80017e8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80017ea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80017ee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80017f0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80017f4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f6:	4c14      	ldr	r4, [pc, #80]	; (8001848 <HAL_RCC_OscConfig+0x32c>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017f8:	0852      	lsrs	r2, r2, #1
 80017fa:	3a01      	subs	r2, #1
 80017fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001800:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001802:	2301      	movs	r3, #1
 8001804:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001806:	f7ff fc0d 	bl	8001024 <HAL_GetTick>
 800180a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800180c:	6823      	ldr	r3, [r4, #0]
 800180e:	019a      	lsls	r2, r3, #6
 8001810:	f53f ae99 	bmi.w	8001546 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001814:	f7ff fc06 	bl	8001024 <HAL_GetTick>
 8001818:	1b40      	subs	r0, r0, r5
 800181a:	2802      	cmp	r0, #2
 800181c:	d9f6      	bls.n	800180c <HAL_RCC_OscConfig+0x2f0>
 800181e:	e6ca      	b.n	80015b6 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001820:	f7ff fc00 	bl	8001024 <HAL_GetTick>
 8001824:	1bc0      	subs	r0, r0, r7
 8001826:	2802      	cmp	r0, #2
 8001828:	d9d5      	bls.n	80017d6 <HAL_RCC_OscConfig+0x2ba>
 800182a:	e6c4      	b.n	80015b6 <HAL_RCC_OscConfig+0x9a>
        tickstart = HAL_GetTick();
 800182c:	f7ff fbfa 	bl	8001024 <HAL_GetTick>
 8001830:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001832:	682b      	ldr	r3, [r5, #0]
 8001834:	019b      	lsls	r3, r3, #6
 8001836:	f57f ae86 	bpl.w	8001546 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800183a:	f7ff fbf3 	bl	8001024 <HAL_GetTick>
 800183e:	1b00      	subs	r0, r0, r4
 8001840:	2802      	cmp	r0, #2
 8001842:	d9f6      	bls.n	8001832 <HAL_RCC_OscConfig+0x316>
 8001844:	e6b7      	b.n	80015b6 <HAL_RCC_OscConfig+0x9a>
 8001846:	bf00      	nop
 8001848:	40023800 	.word	0x40023800
 800184c:	42470060 	.word	0x42470060

08001850 <TIM_SlaveTimer_SetConfig>:
  uint32_t tmpsmcr = 0U;
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

 /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001850:	6803      	ldr	r3, [r0, #0]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8001852:	6848      	ldr	r0, [r1, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001854:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001856:	f022 0270 	bic.w	r2, r2, #112	; 0x70
{
 800185a:	b530      	push	{r4, r5, lr}
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800185c:	4302      	orrs	r2, r0

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800185e:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_SMS;
 8001860:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8001864:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
  
  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8001866:	2850      	cmp	r0, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 8001868:	609a      	str	r2, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 800186a:	d021      	beq.n	80018b0 <TIM_SlaveTimer_SetConfig+0x60>
 800186c:	d802      	bhi.n	8001874 <TIM_SlaveTimer_SetConfig+0x24>
 800186e:	2840      	cmp	r0, #64	; 0x40
 8001870:	d010      	beq.n	8001894 <TIM_SlaveTimer_SetConfig+0x44>
 8001872:	bd30      	pop	{r4, r5, pc}
 8001874:	2860      	cmp	r0, #96	; 0x60
 8001876:	d02d      	beq.n	80018d4 <TIM_SlaveTimer_SetConfig+0x84>
 8001878:	2870      	cmp	r0, #112	; 0x70
 800187a:	d13d      	bne.n	80018f8 <TIM_SlaveTimer_SetConfig+0xa8>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800187c:	68ca      	ldr	r2, [r1, #12]
 800187e:	688c      	ldr	r4, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8001880:	6898      	ldr	r0, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 8001882:	6909      	ldr	r1, [r1, #16]
 8001884:	4322      	orrs	r2, r4
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001886:	f420 407f 	bic.w	r0, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 800188a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800188e:	4302      	orrs	r2, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001890:	609a      	str	r2, [r3, #8]
 8001892:	bd30      	pop	{r4, r5, pc}
      tmpccer = htim->Instance->CCER;
 8001894:	6a18      	ldr	r0, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8001896:	6a1a      	ldr	r2, [r3, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8001898:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800189a:	f022 0201 	bic.w	r2, r2, #1
 800189e:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;    
 80018a0:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80018a2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80018a6:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 80018aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;                               
 80018ac:	6218      	str	r0, [r3, #32]
    break;
 80018ae:	bd30      	pop	{r4, r5, pc}
      TIM_TI1_ConfigInputStage(htim->Instance,
 80018b0:	6888      	ldr	r0, [r1, #8]
 80018b2:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 80018b4:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80018b6:	6a1c      	ldr	r4, [r3, #32]
 80018b8:	f024 0401 	bic.w	r4, r4, #1
 80018bc:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80018be:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80018c0:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80018c4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80018c8:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 80018cc:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80018ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80018d0:	6219      	str	r1, [r3, #32]
 80018d2:	bd30      	pop	{r4, r5, pc}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80018d4:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80018d6:	688c      	ldr	r4, [r1, #8]
 80018d8:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80018da:	f020 0010 	bic.w	r0, r0, #16
 80018de:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80018e0:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80018e2:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80018e4:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80018e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80018ec:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 80018f0:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80018f4:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80018f6:	621a      	str	r2, [r3, #32]
 80018f8:	bd30      	pop	{r4, r5, pc}

080018fa <HAL_TIM_IC_MspInit>:
 80018fa:	4770      	bx	lr

080018fc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80018fc:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001900:	2b01      	cmp	r3, #1
{
 8001902:	b570      	push	{r4, r5, r6, lr}
 8001904:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001908:	d01c      	beq.n	8001944 <HAL_TIM_ConfigClockSource+0x48>
  htim->State = HAL_TIM_STATE_BUSY;
 800190a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  tmpsmcr = htim->Instance->SMCR;
 800190e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001910:	2201      	movs	r2, #1
 8001912:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  tmpsmcr = htim->Instance->SMCR;
 8001916:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001918:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800191c:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8001920:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001922:	680a      	ldr	r2, [r1, #0]
 8001924:	2a40      	cmp	r2, #64	; 0x40
 8001926:	d079      	beq.n	8001a1c <HAL_TIM_ConfigClockSource+0x120>
 8001928:	d819      	bhi.n	800195e <HAL_TIM_ConfigClockSource+0x62>
 800192a:	2a10      	cmp	r2, #16
 800192c:	f000 8093 	beq.w	8001a56 <HAL_TIM_ConfigClockSource+0x15a>
 8001930:	d80a      	bhi.n	8001948 <HAL_TIM_ConfigClockSource+0x4c>
 8001932:	2a00      	cmp	r2, #0
 8001934:	f000 8089 	beq.w	8001a4a <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 8001938:	2301      	movs	r3, #1
 800193a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(htim);
 800193e:	2300      	movs	r3, #0
 8001940:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001944:	4618      	mov	r0, r3
}
 8001946:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001948:	2a20      	cmp	r2, #32
 800194a:	f000 808a 	beq.w	8001a62 <HAL_TIM_ConfigClockSource+0x166>
 800194e:	2a30      	cmp	r2, #48	; 0x30
 8001950:	d1f2      	bne.n	8001938 <HAL_TIM_ConfigClockSource+0x3c>
   tmpsmcr = TIMx->SMCR;
 8001952:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001954:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001958:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 800195c:	e036      	b.n	80019cc <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800195e:	2a70      	cmp	r2, #112	; 0x70
 8001960:	d036      	beq.n	80019d0 <HAL_TIM_ConfigClockSource+0xd4>
 8001962:	d81b      	bhi.n	800199c <HAL_TIM_ConfigClockSource+0xa0>
 8001964:	2a50      	cmp	r2, #80	; 0x50
 8001966:	d042      	beq.n	80019ee <HAL_TIM_ConfigClockSource+0xf2>
 8001968:	2a60      	cmp	r2, #96	; 0x60
 800196a:	d1e5      	bne.n	8001938 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800196c:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance, 
 800196e:	684d      	ldr	r5, [r1, #4]
 8001970:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001972:	f024 0410 	bic.w	r4, r4, #16
 8001976:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001978:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800197a:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800197c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001980:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001984:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001988:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800198c:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800198e:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001990:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001992:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001996:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 800199a:	e017      	b.n	80019cc <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800199c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80019a0:	d011      	beq.n	80019c6 <HAL_TIM_ConfigClockSource+0xca>
 80019a2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80019a6:	d1c7      	bne.n	8001938 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80019a8:	688a      	ldr	r2, [r1, #8]
 80019aa:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80019ac:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80019ae:	68c9      	ldr	r1, [r1, #12]
 80019b0:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019b2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80019b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80019ba:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80019bc:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019c4:	e002      	b.n	80019cc <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 80019cc:	609a      	str	r2, [r3, #8]
 80019ce:	e7b3      	b.n	8001938 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80019d0:	688a      	ldr	r2, [r1, #8]
 80019d2:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 80019d4:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80019d6:	68c9      	ldr	r1, [r1, #12]
 80019d8:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019da:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80019de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80019e2:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 80019e4:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 80019e6:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80019e8:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 80019ec:	e7ee      	b.n	80019cc <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80019ee:	684c      	ldr	r4, [r1, #4]
 80019f0:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80019f2:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80019f4:	6a1d      	ldr	r5, [r3, #32]
 80019f6:	f025 0501 	bic.w	r5, r5, #1
 80019fa:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80019fc:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80019fe:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a02:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001a06:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001a0a:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001a0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001a0e:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001a10:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a12:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001a16:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001a1a:	e7d7      	b.n	80019cc <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001a1c:	684c      	ldr	r4, [r1, #4]
 8001a1e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001a20:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a22:	6a1d      	ldr	r5, [r3, #32]
 8001a24:	f025 0501 	bic.w	r5, r5, #1
 8001a28:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001a2a:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a2c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a30:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001a34:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001a38:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8001a3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001a3c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001a3e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a40:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001a44:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 8001a48:	e7c0      	b.n	80019cc <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001a4a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a4c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001a50:	f042 0207 	orr.w	r2, r2, #7
 8001a54:	e7ba      	b.n	80019cc <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001a56:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a58:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001a5c:	f042 0217 	orr.w	r2, r2, #23
 8001a60:	e7b4      	b.n	80019cc <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 8001a62:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a64:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= TIM_ITRx | TIM_SLAVEMODE_EXTERNAL1;
 8001a68:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 8001a6c:	e7ae      	b.n	80019cc <HAL_TIM_ConfigClockSource+0xd0>

08001a6e <HAL_TIM_SlaveConfigSynchronization>:
{
 8001a6e:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8001a70:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001a74:	2b01      	cmp	r3, #1
{
 8001a76:	4604      	mov	r4, r0
 8001a78:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001a7c:	d015      	beq.n	8001aaa <HAL_TIM_SlaveConfigSynchronization+0x3c>
 8001a7e:	2501      	movs	r5, #1
 8001a80:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8001a84:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 8001a88:	f7ff fee2 	bl	8001850 <TIM_SlaveTimer_SetConfig>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8001a8c:	6823      	ldr	r3, [r4, #0]
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a94:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001a96:	68da      	ldr	r2, [r3, #12]
  __HAL_UNLOCK(htim);  
 8001a98:	2000      	movs	r0, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8001a9a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001a9e:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 8001aa0:	f884 5039 	strb.w	r5, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);  
 8001aa4:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 8001aa8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 8001aaa:	4618      	mov	r0, r3
} 
 8001aac:	bd38      	pop	{r3, r4, r5, pc}

08001aae <HAL_TIM_ReadCapturedValue>:
  __HAL_LOCK(htim);
 8001aae:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d01c      	beq.n	8001af0 <HAL_TIM_ReadCapturedValue+0x42>
  switch (Channel)
 8001ab6:	290c      	cmp	r1, #12
 8001ab8:	d818      	bhi.n	8001aec <HAL_TIM_ReadCapturedValue+0x3e>
 8001aba:	e8df f001 	tbb	[pc, r1]
 8001abe:	1707      	.short	0x1707
 8001ac0:	170e1717 	.word	0x170e1717
 8001ac4:	17111717 	.word	0x17111717
 8001ac8:	1717      	.short	0x1717
 8001aca:	14          	.byte	0x14
 8001acb:	00          	.byte	0x00
      tmpreg = htim->Instance->CCR1;
 8001acc:	6803      	ldr	r3, [r0, #0]
 8001ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  __HAL_UNLOCK(htim);  
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	4770      	bx	lr
      tmpreg = htim->Instance->CCR2;
 8001ada:	6803      	ldr	r3, [r0, #0]
 8001adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      break;
 8001ade:	e7f7      	b.n	8001ad0 <HAL_TIM_ReadCapturedValue+0x22>
      tmpreg = htim->Instance->CCR3;
 8001ae0:	6803      	ldr	r3, [r0, #0]
 8001ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      break;
 8001ae4:	e7f4      	b.n	8001ad0 <HAL_TIM_ReadCapturedValue+0x22>
      tmpreg = htim->Instance->CCR4;
 8001ae6:	6803      	ldr	r3, [r0, #0]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
      break;
 8001aea:	e7f1      	b.n	8001ad0 <HAL_TIM_ReadCapturedValue+0x22>
  uint32_t tmpreg = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	e7ef      	b.n	8001ad0 <HAL_TIM_ReadCapturedValue+0x22>
  __HAL_LOCK(htim);
 8001af0:	2302      	movs	r3, #2
 8001af2:	e7f0      	b.n	8001ad6 <HAL_TIM_ReadCapturedValue+0x28>

08001af4 <HAL_TIM_PeriodElapsedCallback>:
 8001af4:	4770      	bx	lr

08001af6 <HAL_TIM_OC_DelayElapsedCallback>:
 8001af6:	4770      	bx	lr

08001af8 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001af8:	4770      	bx	lr

08001afa <HAL_TIM_TriggerCallback>:
 8001afa:	4770      	bx	lr

08001afc <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001afc:	6803      	ldr	r3, [r0, #0]
 8001afe:	691a      	ldr	r2, [r3, #16]
 8001b00:	0791      	lsls	r1, r2, #30
{
 8001b02:	b510      	push	{r4, lr}
 8001b04:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b06:	d50e      	bpl.n	8001b26 <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	0792      	lsls	r2, r2, #30
 8001b0c:	d50b      	bpl.n	8001b26 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b0e:	f06f 0202 	mvn.w	r2, #2
 8001b12:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b14:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b16:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b18:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b1a:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001b1c:	d077      	beq.n	8001c0e <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001b1e:	f000 fc23 	bl	8002368 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b22:	2300      	movs	r3, #0
 8001b24:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001b26:	6823      	ldr	r3, [r4, #0]
 8001b28:	691a      	ldr	r2, [r3, #16]
 8001b2a:	0750      	lsls	r0, r2, #29
 8001b2c:	d510      	bpl.n	8001b50 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001b2e:	68da      	ldr	r2, [r3, #12]
 8001b30:	0751      	lsls	r1, r2, #29
 8001b32:	d50d      	bpl.n	8001b50 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001b34:	f06f 0204 	mvn.w	r2, #4
 8001b38:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b3a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b3c:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b3e:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001b42:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001b44:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b46:	d068      	beq.n	8001c1a <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001b48:	f000 fc0e 	bl	8002368 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b50:	6823      	ldr	r3, [r4, #0]
 8001b52:	691a      	ldr	r2, [r3, #16]
 8001b54:	0712      	lsls	r2, r2, #28
 8001b56:	d50f      	bpl.n	8001b78 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	0710      	lsls	r0, r2, #28
 8001b5c:	d50c      	bpl.n	8001b78 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b5e:	f06f 0208 	mvn.w	r2, #8
 8001b62:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b64:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b66:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b68:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b6a:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001b6c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b6e:	d05a      	beq.n	8001c26 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001b70:	f000 fbfa 	bl	8002368 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b74:	2300      	movs	r3, #0
 8001b76:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b78:	6823      	ldr	r3, [r4, #0]
 8001b7a:	691a      	ldr	r2, [r3, #16]
 8001b7c:	06d2      	lsls	r2, r2, #27
 8001b7e:	d510      	bpl.n	8001ba2 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	06d0      	lsls	r0, r2, #27
 8001b84:	d50d      	bpl.n	8001ba2 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b86:	f06f 0210 	mvn.w	r2, #16
 8001b8a:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b8c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b8e:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b90:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b94:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8001b96:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b98:	d04b      	beq.n	8001c32 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001b9a:	f000 fbe5 	bl	8002368 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ba2:	6823      	ldr	r3, [r4, #0]
 8001ba4:	691a      	ldr	r2, [r3, #16]
 8001ba6:	07d1      	lsls	r1, r2, #31
 8001ba8:	d508      	bpl.n	8001bbc <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001baa:	68da      	ldr	r2, [r3, #12]
 8001bac:	07d2      	lsls	r2, r2, #31
 8001bae:	d505      	bpl.n	8001bbc <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bb0:	f06f 0201 	mvn.w	r2, #1
 8001bb4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	f7ff ff9c 	bl	8001af4 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001bbc:	6823      	ldr	r3, [r4, #0]
 8001bbe:	691a      	ldr	r2, [r3, #16]
 8001bc0:	0610      	lsls	r0, r2, #24
 8001bc2:	d508      	bpl.n	8001bd6 <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	0611      	lsls	r1, r2, #24
 8001bc8:	d505      	bpl.n	8001bd6 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001bce:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001bd0:	4620      	mov	r0, r4
 8001bd2:	f000 f9ea 	bl	8001faa <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001bd6:	6823      	ldr	r3, [r4, #0]
 8001bd8:	691a      	ldr	r2, [r3, #16]
 8001bda:	0652      	lsls	r2, r2, #25
 8001bdc:	d508      	bpl.n	8001bf0 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001bde:	68da      	ldr	r2, [r3, #12]
 8001be0:	0650      	lsls	r0, r2, #25
 8001be2:	d505      	bpl.n	8001bf0 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001be4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001be8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001bea:	4620      	mov	r0, r4
 8001bec:	f7ff ff85 	bl	8001afa <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001bf0:	6823      	ldr	r3, [r4, #0]
 8001bf2:	691a      	ldr	r2, [r3, #16]
 8001bf4:	0691      	lsls	r1, r2, #26
 8001bf6:	d522      	bpl.n	8001c3e <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001bf8:	68da      	ldr	r2, [r3, #12]
 8001bfa:	0692      	lsls	r2, r2, #26
 8001bfc:	d51f      	bpl.n	8001c3e <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001bfe:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001c02:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c04:	611a      	str	r2, [r3, #16]
}
 8001c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8001c0a:	f000 b9cd 	b.w	8001fa8 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c0e:	f7ff ff72 	bl	8001af6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c12:	4620      	mov	r0, r4
 8001c14:	f7ff ff70 	bl	8001af8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001c18:	e783      	b.n	8001b22 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c1a:	f7ff ff6c 	bl	8001af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c1e:	4620      	mov	r0, r4
 8001c20:	f7ff ff6a 	bl	8001af8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001c24:	e792      	b.n	8001b4c <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c26:	f7ff ff66 	bl	8001af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001c2a:	4620      	mov	r0, r4
 8001c2c:	f7ff ff64 	bl	8001af8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001c30:	e7a0      	b.n	8001b74 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c32:	f7ff ff60 	bl	8001af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c36:	4620      	mov	r0, r4
 8001c38:	f7ff ff5e 	bl	8001af8 <HAL_TIM_PWM_PulseFinishedCallback>
 8001c3c:	e7af      	b.n	8001b9e <HAL_TIM_IRQHandler+0xa2>
 8001c3e:	bd10      	pop	{r4, pc}

08001c40 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001c40:	4a2e      	ldr	r2, [pc, #184]	; (8001cfc <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 8001c42:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001c44:	4290      	cmp	r0, r2
 8001c46:	d012      	beq.n	8001c6e <TIM_Base_SetConfig+0x2e>
 8001c48:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001c4c:	d00f      	beq.n	8001c6e <TIM_Base_SetConfig+0x2e>
 8001c4e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001c52:	4290      	cmp	r0, r2
 8001c54:	d00b      	beq.n	8001c6e <TIM_Base_SetConfig+0x2e>
 8001c56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c5a:	4290      	cmp	r0, r2
 8001c5c:	d007      	beq.n	8001c6e <TIM_Base_SetConfig+0x2e>
 8001c5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c62:	4290      	cmp	r0, r2
 8001c64:	d003      	beq.n	8001c6e <TIM_Base_SetConfig+0x2e>
 8001c66:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001c6a:	4290      	cmp	r0, r2
 8001c6c:	d11d      	bne.n	8001caa <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8001c6e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001c74:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001c76:	4a21      	ldr	r2, [pc, #132]	; (8001cfc <TIM_Base_SetConfig+0xbc>)
 8001c78:	4290      	cmp	r0, r2
 8001c7a:	d104      	bne.n	8001c86 <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c7c:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001c82:	4313      	orrs	r3, r2
 8001c84:	e028      	b.n	8001cd8 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001c86:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001c8a:	d0f7      	beq.n	8001c7c <TIM_Base_SetConfig+0x3c>
 8001c8c:	4a1c      	ldr	r2, [pc, #112]	; (8001d00 <TIM_Base_SetConfig+0xc0>)
 8001c8e:	4290      	cmp	r0, r2
 8001c90:	d0f4      	beq.n	8001c7c <TIM_Base_SetConfig+0x3c>
 8001c92:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c96:	4290      	cmp	r0, r2
 8001c98:	d0f0      	beq.n	8001c7c <TIM_Base_SetConfig+0x3c>
 8001c9a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001c9e:	4290      	cmp	r0, r2
 8001ca0:	d0ec      	beq.n	8001c7c <TIM_Base_SetConfig+0x3c>
 8001ca2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001ca6:	4290      	cmp	r0, r2
 8001ca8:	d0e8      	beq.n	8001c7c <TIM_Base_SetConfig+0x3c>
 8001caa:	4a16      	ldr	r2, [pc, #88]	; (8001d04 <TIM_Base_SetConfig+0xc4>)
 8001cac:	4290      	cmp	r0, r2
 8001cae:	d0e5      	beq.n	8001c7c <TIM_Base_SetConfig+0x3c>
 8001cb0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cb4:	4290      	cmp	r0, r2
 8001cb6:	d0e1      	beq.n	8001c7c <TIM_Base_SetConfig+0x3c>
 8001cb8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cbc:	4290      	cmp	r0, r2
 8001cbe:	d0dd      	beq.n	8001c7c <TIM_Base_SetConfig+0x3c>
 8001cc0:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001cc4:	4290      	cmp	r0, r2
 8001cc6:	d0d9      	beq.n	8001c7c <TIM_Base_SetConfig+0x3c>
 8001cc8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ccc:	4290      	cmp	r0, r2
 8001cce:	d0d5      	beq.n	8001c7c <TIM_Base_SetConfig+0x3c>
 8001cd0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cd4:	4290      	cmp	r0, r2
 8001cd6:	d0d1      	beq.n	8001c7c <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 8001cd8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cda:	688b      	ldr	r3, [r1, #8]
 8001cdc:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001cde:	680b      	ldr	r3, [r1, #0]
 8001ce0:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <TIM_Base_SetConfig+0xbc>)
 8001ce4:	4298      	cmp	r0, r3
 8001ce6:	d006      	beq.n	8001cf6 <TIM_Base_SetConfig+0xb6>
 8001ce8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cec:	4298      	cmp	r0, r3
 8001cee:	d002      	beq.n	8001cf6 <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	6143      	str	r3, [r0, #20]
}
 8001cf4:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001cf6:	690b      	ldr	r3, [r1, #16]
 8001cf8:	6303      	str	r3, [r0, #48]	; 0x30
 8001cfa:	e7f9      	b.n	8001cf0 <TIM_Base_SetConfig+0xb0>
 8001cfc:	40010000 	.word	0x40010000
 8001d00:	40000400 	.word	0x40000400
 8001d04:	40014000 	.word	0x40014000

08001d08 <HAL_TIM_Base_Init>:
{ 
 8001d08:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001d0a:	4604      	mov	r4, r0
 8001d0c:	b1a0      	cbz	r0, 8001d38 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001d0e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001d12:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d16:	b91b      	cbnz	r3, 8001d20 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001d18:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8001d1c:	f000 fd2c 	bl	8002778 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001d20:	2302      	movs	r3, #2
 8001d22:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001d26:	6820      	ldr	r0, [r4, #0]
 8001d28:	1d21      	adds	r1, r4, #4
 8001d2a:	f7ff ff89 	bl	8001c40 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001d34:	2000      	movs	r0, #0
 8001d36:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001d38:	2001      	movs	r0, #1
}
 8001d3a:	bd10      	pop	{r4, pc}

08001d3c <HAL_TIM_IC_Init>:
{
 8001d3c:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001d3e:	4604      	mov	r4, r0
 8001d40:	b1a0      	cbz	r0, 8001d6c <HAL_TIM_IC_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001d42:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8001d46:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d4a:	b91b      	cbnz	r3, 8001d54 <HAL_TIM_IC_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001d4c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_IC_MspInit(htim);
 8001d50:	f7ff fdd3 	bl	80018fa <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;   
 8001d54:	2302      	movs	r3, #2
 8001d56:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001d5a:	6820      	ldr	r0, [r4, #0]
 8001d5c:	1d21      	adds	r1, r4, #4
 8001d5e:	f7ff ff6f 	bl	8001c40 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001d62:	2301      	movs	r3, #1
 8001d64:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001d68:	2000      	movs	r0, #0
 8001d6a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001d6c:	2001      	movs	r0, #1
}
 8001d6e:	bd10      	pop	{r4, pc}

08001d70 <TIM_TI1_SetConfig>:
{
 8001d70:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d72:	6a04      	ldr	r4, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001d74:	4e1a      	ldr	r6, [pc, #104]	; (8001de0 <TIM_TI1_SetConfig+0x70>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d76:	f024 0401 	bic.w	r4, r4, #1
 8001d7a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d7c:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001d7e:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001d80:	42b0      	cmp	r0, r6
 8001d82:	f024 0403 	bic.w	r4, r4, #3
 8001d86:	d01a      	beq.n	8001dbe <TIM_TI1_SetConfig+0x4e>
 8001d88:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d8c:	d017      	beq.n	8001dbe <TIM_TI1_SetConfig+0x4e>
 8001d8e:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8001d92:	42b0      	cmp	r0, r6
 8001d94:	d013      	beq.n	8001dbe <TIM_TI1_SetConfig+0x4e>
 8001d96:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001d9a:	42b0      	cmp	r0, r6
 8001d9c:	d00f      	beq.n	8001dbe <TIM_TI1_SetConfig+0x4e>
 8001d9e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001da2:	42b0      	cmp	r0, r6
 8001da4:	d00b      	beq.n	8001dbe <TIM_TI1_SetConfig+0x4e>
 8001da6:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8001daa:	42b0      	cmp	r0, r6
 8001dac:	d007      	beq.n	8001dbe <TIM_TI1_SetConfig+0x4e>
 8001dae:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8001db2:	42b0      	cmp	r0, r6
 8001db4:	d003      	beq.n	8001dbe <TIM_TI1_SetConfig+0x4e>
 8001db6:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8001dba:	42b0      	cmp	r0, r6
 8001dbc:	d10d      	bne.n	8001dda <TIM_TI1_SetConfig+0x6a>
    tmpccmr1 |= TIM_ICSelection;
 8001dbe:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001dc0:	011b      	lsls	r3, r3, #4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001dc2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001dc6:	b2db      	uxtb	r3, r3
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001dc8:	f025 050a 	bic.w	r5, r5, #10
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001dcc:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001dd0:	431a      	orrs	r2, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001dd2:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8001dd4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001dd6:	6201      	str	r1, [r0, #32]
}
 8001dd8:	bd70      	pop	{r4, r5, r6, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001dda:	f044 0201 	orr.w	r2, r4, #1
 8001dde:	e7ef      	b.n	8001dc0 <TIM_TI1_SetConfig+0x50>
 8001de0:	40010000 	.word	0x40010000

08001de4 <HAL_TIM_IC_ConfigChannel>:
{
 8001de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001de6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001dea:	2b01      	cmp	r3, #1
{
 8001dec:	4604      	mov	r4, r0
 8001dee:	460d      	mov	r5, r1
 8001df0:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001df4:	d019      	beq.n	8001e2a <HAL_TIM_IC_ConfigChannel+0x46>
 8001df6:	2301      	movs	r3, #1
 8001df8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8001dfc:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  if (Channel == TIM_CHANNEL_1)
 8001e00:	b9a2      	cbnz	r2, 8001e2c <HAL_TIM_IC_ConfigChannel+0x48>
    TIM_TI1_SetConfig(htim->Instance,
 8001e02:	68cb      	ldr	r3, [r1, #12]
 8001e04:	6820      	ldr	r0, [r4, #0]
 8001e06:	c906      	ldmia	r1, {r1, r2}
 8001e08:	f7ff ffb2 	bl	8001d70 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001e0c:	6823      	ldr	r3, [r4, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001e0e:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8001e10:	699a      	ldr	r2, [r3, #24]
 8001e12:	f022 020c 	bic.w	r2, r2, #12
 8001e16:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001e18:	699a      	ldr	r2, [r3, #24]
 8001e1a:	430a      	orrs	r2, r1
 8001e1c:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001e1e:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001e20:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001e22:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8001e26:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8001e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (Channel == TIM_CHANNEL_2)
 8001e2c:	2a04      	cmp	r2, #4
 8001e2e:	688e      	ldr	r6, [r1, #8]
 8001e30:	6823      	ldr	r3, [r4, #0]
 8001e32:	68e8      	ldr	r0, [r5, #12]
 8001e34:	c982      	ldmia	r1, {r1, r7}
 8001e36:	d11f      	bne.n	8001e78 <HAL_TIM_IC_ConfigChannel+0x94>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001e38:	6a1a      	ldr	r2, [r3, #32]
 8001e3a:	f022 0210 	bic.w	r2, r2, #16
 8001e3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001e40:	699a      	ldr	r2, [r3, #24]
  tmpccer = TIMx->CCER;
 8001e42:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001e44:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001e48:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001e4c:	0300      	lsls	r0, r0, #12
 8001e4e:	b280      	uxth	r0, r0
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001e50:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001e54:	0109      	lsls	r1, r1, #4
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001e56:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001e58:	f001 01a0 	and.w	r1, r1, #160	; 0xa0
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001e5c:	f025 00a0 	bic.w	r0, r5, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001e60:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1 ;
 8001e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001e64:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001e66:	699a      	ldr	r2, [r3, #24]
 8001e68:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001e6c:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001e6e:	699a      	ldr	r2, [r3, #24]
 8001e70:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8001e74:	619e      	str	r6, [r3, #24]
 8001e76:	e7d2      	b.n	8001e1e <HAL_TIM_IC_ConfigChannel+0x3a>
  else if (Channel == TIM_CHANNEL_3)
 8001e78:	2a08      	cmp	r2, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e7a:	6a1a      	ldr	r2, [r3, #32]
  else if (Channel == TIM_CHANNEL_3)
 8001e7c:	d11c      	bne.n	8001eb8 <HAL_TIM_IC_ConfigChannel+0xd4>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001e7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e82:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001e84:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8001e86:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001e88:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr2 |= TIM_ICSelection;
 8001e8c:	433a      	orrs	r2, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001e8e:	0100      	lsls	r0, r0, #4
 8001e90:	b2c0      	uxtb	r0, r0
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8001e92:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001e96:	0209      	lsls	r1, r1, #8
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8001e98:	4302      	orrs	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001e9a:	f401 6120 	and.w	r1, r1, #2560	; 0xa00
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001e9e:	f425 6020 	bic.w	r0, r5, #2560	; 0xa00
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001ea2:	4301      	orrs	r1, r0
  TIMx->CCMR2 = tmpccmr2;
 8001ea4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8001ea6:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001ea8:	69da      	ldr	r2, [r3, #28]
 8001eaa:	f022 020c 	bic.w	r2, r2, #12
 8001eae:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001eb0:	69da      	ldr	r2, [r3, #28]
 8001eb2:	4316      	orrs	r6, r2
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001eb4:	61de      	str	r6, [r3, #28]
 8001eb6:	e7b2      	b.n	8001e1e <HAL_TIM_IC_ConfigChannel+0x3a>
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001eb8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ebc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001ebe:	69da      	ldr	r2, [r3, #28]
  tmpccer = TIMx->CCER;
 8001ec0:	6a1d      	ldr	r5, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001ec2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001ec6:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001eca:	0300      	lsls	r0, r0, #12
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001ecc:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001ed0:	b280      	uxth	r0, r0
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001ed2:	0309      	lsls	r1, r1, #12
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001ed4:	4310      	orrs	r0, r2
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001ed6:	f401 4120 	and.w	r1, r1, #40960	; 0xa000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001eda:	f425 4220 	bic.w	r2, r5, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001ede:	4311      	orrs	r1, r2
  TIMx->CCMR2 = tmpccmr2;
 8001ee0:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 8001ee2:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001ee4:	69da      	ldr	r2, [r3, #28]
 8001ee6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001eea:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001eec:	69da      	ldr	r2, [r3, #28]
 8001eee:	ea42 2606 	orr.w	r6, r2, r6, lsl #8
 8001ef2:	e7df      	b.n	8001eb4 <HAL_TIM_IC_ConfigChannel+0xd0>

08001ef4 <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 8001ef4:	6a03      	ldr	r3, [r0, #32]
{
 8001ef6:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8001ef8:	2401      	movs	r4, #1
 8001efa:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001efc:	ea23 0304 	bic.w	r3, r3, r4
 8001f00:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8001f02:	6a03      	ldr	r3, [r0, #32]
 8001f04:	408a      	lsls	r2, r1
 8001f06:	431a      	orrs	r2, r3
 8001f08:	6202      	str	r2, [r0, #32]
 8001f0a:	bd10      	pop	{r4, pc}

08001f0c <HAL_TIM_IC_Start_IT>:
{
 8001f0c:	b510      	push	{r4, lr}
 8001f0e:	4604      	mov	r4, r0
  switch (Channel)
 8001f10:	290c      	cmp	r1, #12
 8001f12:	d80d      	bhi.n	8001f30 <HAL_TIM_IC_Start_IT+0x24>
 8001f14:	e8df f001 	tbb	[pc, r1]
 8001f18:	0c0c0c07 	.word	0x0c0c0c07
 8001f1c:	0c0c0c17 	.word	0x0c0c0c17
 8001f20:	0c0c0c1c 	.word	0x0c0c0c1c
 8001f24:	21          	.byte	0x21
 8001f25:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001f26:	6802      	ldr	r2, [r0, #0]
 8001f28:	68d3      	ldr	r3, [r2, #12]
 8001f2a:	f043 0302 	orr.w	r3, r3, #2
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001f2e:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f30:	6820      	ldr	r0, [r4, #0]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f7ff ffde 	bl	8001ef4 <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);  
 8001f38:	6822      	ldr	r2, [r4, #0]
 8001f3a:	6813      	ldr	r3, [r2, #0]
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	6013      	str	r3, [r2, #0]
} 
 8001f42:	2000      	movs	r0, #0
 8001f44:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001f46:	6802      	ldr	r2, [r0, #0]
 8001f48:	68d3      	ldr	r3, [r2, #12]
 8001f4a:	f043 0304 	orr.w	r3, r3, #4
 8001f4e:	e7ee      	b.n	8001f2e <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001f50:	6802      	ldr	r2, [r0, #0]
 8001f52:	68d3      	ldr	r3, [r2, #12]
 8001f54:	f043 0308 	orr.w	r3, r3, #8
 8001f58:	e7e9      	b.n	8001f2e <HAL_TIM_IC_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001f5a:	6802      	ldr	r2, [r0, #0]
 8001f5c:	68d3      	ldr	r3, [r2, #12]
 8001f5e:	f043 0310 	orr.w	r3, r3, #16
 8001f62:	e7e4      	b.n	8001f2e <HAL_TIM_IC_Start_IT+0x22>

08001f64 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  __HAL_LOCK(htim);
 8001f64:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8001f68:	2b01      	cmp	r3, #1
{
 8001f6a:	b510      	push	{r4, lr}
 8001f6c:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8001f70:	d018      	beq.n	8001fa4 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  
  htim->State = HAL_TIM_STATE_BUSY;
 8001f72:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001f76:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001f78:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001f7a:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001f7c:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001f7e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001f82:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |= sMasterConfig->MasterOutputTrigger;
 8001f84:	685a      	ldr	r2, [r3, #4]
 8001f86:	4322      	orrs	r2, r4
 8001f88:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001f8a:	689a      	ldr	r2, [r3, #8]
 8001f8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f90:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	430a      	orrs	r2, r1
 8001f96:	609a      	str	r2, [r3, #8]
  
  htim->State = HAL_TIM_STATE_READY;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  
  __HAL_UNLOCK(htim);
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(htim);
 8001fa4:	4618      	mov	r0, r3
  
  return HAL_OK;
} 
 8001fa6:	bd10      	pop	{r4, pc}

08001fa8 <HAL_TIMEx_CommutationCallback>:
 8001fa8:	4770      	bx	lr

08001faa <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001faa:	4770      	bx	lr

08001fac <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8001fb0:	6806      	ldr	r6, [r0, #0]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001fb2:	68c2      	ldr	r2, [r0, #12]
  tmpreg = huart->Instance->CR2;
 8001fb4:	6933      	ldr	r3, [r6, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fb6:	69c1      	ldr	r1, [r0, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8001fb8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8001fbc:	4313      	orrs	r3, r2
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8001fbe:	6133      	str	r3, [r6, #16]
{
 8001fc0:	4604      	mov	r4, r0
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fc2:	6883      	ldr	r3, [r0, #8]
 8001fc4:	6900      	ldr	r0, [r0, #16]
  tmpreg = huart->Instance->CR1;
 8001fc6:	68f2      	ldr	r2, [r6, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fc8:	4303      	orrs	r3, r0
 8001fca:	6960      	ldr	r0, [r4, #20]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001fcc:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fd0:	4303      	orrs	r3, r0
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8001fd2:	f022 020c 	bic.w	r2, r2, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001fd6:	430b      	orrs	r3, r1
 8001fd8:	4313      	orrs	r3, r2
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8001fda:	60f3      	str	r3, [r6, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8001fdc:	6973      	ldr	r3, [r6, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8001fde:	69a2      	ldr	r2, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8001fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8001fe4:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fe6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8001fea:	6173      	str	r3, [r6, #20]
 8001fec:	4b7a      	ldr	r3, [pc, #488]	; (80021d8 <UART_SetConfig+0x22c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fee:	d17c      	bne.n	80020ea <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ff0:	429e      	cmp	r6, r3
 8001ff2:	d003      	beq.n	8001ffc <UART_SetConfig+0x50>
 8001ff4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ff8:	429e      	cmp	r6, r3
 8001ffa:	d144      	bne.n	8002086 <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8001ffc:	f7ff fa36 	bl	800146c <HAL_RCC_GetPCLK2Freq>
 8002000:	2519      	movs	r5, #25
 8002002:	fb05 f300 	mul.w	r3, r5, r0
 8002006:	6860      	ldr	r0, [r4, #4]
 8002008:	f04f 0964 	mov.w	r9, #100	; 0x64
 800200c:	0040      	lsls	r0, r0, #1
 800200e:	fbb3 f3f0 	udiv	r3, r3, r0
 8002012:	fbb3 f3f9 	udiv	r3, r3, r9
 8002016:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800201a:	f7ff fa27 	bl	800146c <HAL_RCC_GetPCLK2Freq>
 800201e:	6863      	ldr	r3, [r4, #4]
 8002020:	4368      	muls	r0, r5
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	fbb0 f7f3 	udiv	r7, r0, r3
 8002028:	f7ff fa20 	bl	800146c <HAL_RCC_GetPCLK2Freq>
 800202c:	6863      	ldr	r3, [r4, #4]
 800202e:	4368      	muls	r0, r5
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	fbb0 f3f3 	udiv	r3, r0, r3
 8002036:	fbb3 f3f9 	udiv	r3, r3, r9
 800203a:	fb09 7313 	mls	r3, r9, r3, r7
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	3332      	adds	r3, #50	; 0x32
 8002042:	fbb3 f3f9 	udiv	r3, r3, r9
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800204c:	f7ff fa0e 	bl	800146c <HAL_RCC_GetPCLK2Freq>
 8002050:	6862      	ldr	r2, [r4, #4]
 8002052:	4368      	muls	r0, r5
 8002054:	0052      	lsls	r2, r2, #1
 8002056:	fbb0 faf2 	udiv	sl, r0, r2
 800205a:	f7ff fa07 	bl	800146c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800205e:	6863      	ldr	r3, [r4, #4]
 8002060:	4368      	muls	r0, r5
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	fbb0 f3f3 	udiv	r3, r0, r3
 8002068:	fbb3 f3f9 	udiv	r3, r3, r9
 800206c:	fb09 a313 	mls	r3, r9, r3, sl
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	3332      	adds	r3, #50	; 0x32
 8002074:	fbb3 f3f9 	udiv	r3, r3, r9
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800207e:	443b      	add	r3, r7
 8002080:	60b3      	str	r3, [r6, #8]
 8002082:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002086:	f7ff f9e1 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 800208a:	2519      	movs	r5, #25
 800208c:	fb05 f300 	mul.w	r3, r5, r0
 8002090:	6860      	ldr	r0, [r4, #4]
 8002092:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002096:	0040      	lsls	r0, r0, #1
 8002098:	fbb3 f3f0 	udiv	r3, r3, r0
 800209c:	fbb3 f3f9 	udiv	r3, r3, r9
 80020a0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80020a4:	f7ff f9d2 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 80020a8:	6863      	ldr	r3, [r4, #4]
 80020aa:	4368      	muls	r0, r5
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	fbb0 f7f3 	udiv	r7, r0, r3
 80020b2:	f7ff f9cb 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 80020b6:	6863      	ldr	r3, [r4, #4]
 80020b8:	4368      	muls	r0, r5
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80020c0:	fbb3 f3f9 	udiv	r3, r3, r9
 80020c4:	fb09 7313 	mls	r3, r9, r3, r7
 80020c8:	00db      	lsls	r3, r3, #3
 80020ca:	3332      	adds	r3, #50	; 0x32
 80020cc:	fbb3 f3f9 	udiv	r3, r3, r9
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80020d6:	f7ff f9b9 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 80020da:	6862      	ldr	r2, [r4, #4]
 80020dc:	4368      	muls	r0, r5
 80020de:	0052      	lsls	r2, r2, #1
 80020e0:	fbb0 faf2 	udiv	sl, r0, r2
 80020e4:	f7ff f9b2 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 80020e8:	e7b9      	b.n	800205e <UART_SetConfig+0xb2>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80020ea:	429e      	cmp	r6, r3
 80020ec:	d002      	beq.n	80020f4 <UART_SetConfig+0x148>
 80020ee:	4b3b      	ldr	r3, [pc, #236]	; (80021dc <UART_SetConfig+0x230>)
 80020f0:	429e      	cmp	r6, r3
 80020f2:	d140      	bne.n	8002176 <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80020f4:	f7ff f9ba 	bl	800146c <HAL_RCC_GetPCLK2Freq>
 80020f8:	6867      	ldr	r7, [r4, #4]
 80020fa:	2519      	movs	r5, #25
 80020fc:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002100:	fb05 f300 	mul.w	r3, r5, r0
 8002104:	00bf      	lsls	r7, r7, #2
 8002106:	fbb3 f3f7 	udiv	r3, r3, r7
 800210a:	fbb3 f3f9 	udiv	r3, r3, r9
 800210e:	011f      	lsls	r7, r3, #4
 8002110:	f7ff f9ac 	bl	800146c <HAL_RCC_GetPCLK2Freq>
 8002114:	6863      	ldr	r3, [r4, #4]
 8002116:	4368      	muls	r0, r5
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	fbb0 f8f3 	udiv	r8, r0, r3
 800211e:	f7ff f9a5 	bl	800146c <HAL_RCC_GetPCLK2Freq>
 8002122:	6863      	ldr	r3, [r4, #4]
 8002124:	4368      	muls	r0, r5
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	fbb0 f3f3 	udiv	r3, r0, r3
 800212c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002130:	fb09 8313 	mls	r3, r9, r3, r8
 8002134:	011b      	lsls	r3, r3, #4
 8002136:	3332      	adds	r3, #50	; 0x32
 8002138:	fbb3 f3f9 	udiv	r3, r3, r9
 800213c:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8002140:	f7ff f994 	bl	800146c <HAL_RCC_GetPCLK2Freq>
 8002144:	6862      	ldr	r2, [r4, #4]
 8002146:	4368      	muls	r0, r5
 8002148:	0092      	lsls	r2, r2, #2
 800214a:	fbb0 faf2 	udiv	sl, r0, r2
 800214e:	f7ff f98d 	bl	800146c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002152:	6863      	ldr	r3, [r4, #4]
 8002154:	4368      	muls	r0, r5
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	fbb0 f3f3 	udiv	r3, r0, r3
 800215c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002160:	fb09 a313 	mls	r3, r9, r3, sl
 8002164:	011b      	lsls	r3, r3, #4
 8002166:	3332      	adds	r3, #50	; 0x32
 8002168:	fbb3 f3f9 	udiv	r3, r3, r9
 800216c:	f003 030f 	and.w	r3, r3, #15
 8002170:	ea43 0308 	orr.w	r3, r3, r8
 8002174:	e783      	b.n	800207e <UART_SetConfig+0xd2>
 8002176:	f7ff f969 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 800217a:	6867      	ldr	r7, [r4, #4]
 800217c:	2519      	movs	r5, #25
 800217e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002182:	fb05 f300 	mul.w	r3, r5, r0
 8002186:	00bf      	lsls	r7, r7, #2
 8002188:	fbb3 f3f7 	udiv	r3, r3, r7
 800218c:	fbb3 f3f9 	udiv	r3, r3, r9
 8002190:	011f      	lsls	r7, r3, #4
 8002192:	f7ff f95b 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 8002196:	6863      	ldr	r3, [r4, #4]
 8002198:	4368      	muls	r0, r5
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	fbb0 f8f3 	udiv	r8, r0, r3
 80021a0:	f7ff f954 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 80021a4:	6863      	ldr	r3, [r4, #4]
 80021a6:	4368      	muls	r0, r5
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ae:	fbb3 f3f9 	udiv	r3, r3, r9
 80021b2:	fb09 8313 	mls	r3, r9, r3, r8
 80021b6:	011b      	lsls	r3, r3, #4
 80021b8:	3332      	adds	r3, #50	; 0x32
 80021ba:	fbb3 f3f9 	udiv	r3, r3, r9
 80021be:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80021c2:	f7ff f943 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 80021c6:	6862      	ldr	r2, [r4, #4]
 80021c8:	4368      	muls	r0, r5
 80021ca:	0092      	lsls	r2, r2, #2
 80021cc:	fbb0 faf2 	udiv	sl, r0, r2
 80021d0:	f7ff f93c 	bl	800144c <HAL_RCC_GetPCLK1Freq>
 80021d4:	e7bd      	b.n	8002152 <UART_SetConfig+0x1a6>
 80021d6:	bf00      	nop
 80021d8:	40011000 	.word	0x40011000
 80021dc:	40011400 	.word	0x40011400

080021e0 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 80021e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021e2:	4604      	mov	r4, r0
 80021e4:	460e      	mov	r6, r1
 80021e6:	4617      	mov	r7, r2
 80021e8:	461d      	mov	r5, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80021ea:	6821      	ldr	r1, [r4, #0]
 80021ec:	680b      	ldr	r3, [r1, #0]
 80021ee:	ea36 0303 	bics.w	r3, r6, r3
 80021f2:	d101      	bne.n	80021f8 <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 80021f4:	2000      	movs	r0, #0
}
 80021f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(Timeout != HAL_MAX_DELAY)
 80021f8:	1c6b      	adds	r3, r5, #1
 80021fa:	d0f7      	beq.n	80021ec <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80021fc:	b995      	cbnz	r5, 8002224 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80021fe:	6823      	ldr	r3, [r4, #0]
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002206:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002208:	695a      	ldr	r2, [r3, #20]
 800220a:	f022 0201 	bic.w	r2, r2, #1
 800220e:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002210:	2320      	movs	r3, #32
 8002212:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002216:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800221a:	2300      	movs	r3, #0
 800221c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8002220:	2003      	movs	r0, #3
 8002222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8002224:	f7fe fefe 	bl	8001024 <HAL_GetTick>
 8002228:	1bc0      	subs	r0, r0, r7
 800222a:	4285      	cmp	r5, r0
 800222c:	d2dd      	bcs.n	80021ea <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 800222e:	e7e6      	b.n	80021fe <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

08002230 <HAL_UART_Init>:
{
 8002230:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002232:	4604      	mov	r4, r0
 8002234:	b340      	cbz	r0, 8002288 <HAL_UART_Init+0x58>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002236:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800223a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800223e:	b91b      	cbnz	r3, 8002248 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002240:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002244:	f000 fad6 	bl	80027f4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002248:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800224a:	2324      	movs	r3, #36	; 0x24
 800224c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8002250:	68d3      	ldr	r3, [r2, #12]
 8002252:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002256:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002258:	4620      	mov	r0, r4
 800225a:	f7ff fea7 	bl	8001fac <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800225e:	6823      	ldr	r3, [r4, #0]
 8002260:	691a      	ldr	r2, [r3, #16]
 8002262:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002266:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002268:	695a      	ldr	r2, [r3, #20]
 800226a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800226e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002276:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002278:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 800227a:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800227c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800227e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8002282:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 8002286:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002288:	2001      	movs	r0, #1
}
 800228a:	bd10      	pop	{r4, pc}

0800228c <HAL_UART_Transmit>:
{
 800228c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002290:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY) 
 8002292:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002296:	2b20      	cmp	r3, #32
{
 8002298:	4604      	mov	r4, r0
 800229a:	460d      	mov	r5, r1
 800229c:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY) 
 800229e:	d14f      	bne.n	8002340 <HAL_UART_Transmit+0xb4>
    if((pData == NULL ) || (Size == 0)) 
 80022a0:	2900      	cmp	r1, #0
 80022a2:	d04a      	beq.n	800233a <HAL_UART_Transmit+0xae>
 80022a4:	2a00      	cmp	r2, #0
 80022a6:	d048      	beq.n	800233a <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 80022a8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d047      	beq.n	8002340 <HAL_UART_Transmit+0xb4>
 80022b0:	2301      	movs	r3, #1
 80022b2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022b6:	2300      	movs	r3, #0
 80022b8:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022ba:	2321      	movs	r3, #33	; 0x21
 80022bc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 80022c0:	f7fe feb0 	bl	8001024 <HAL_GetTick>
    huart->TxXferSize = Size;
 80022c4:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 80022c8:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80022ca:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80022ce:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	b96b      	cbnz	r3, 80022f0 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80022d4:	463b      	mov	r3, r7
 80022d6:	4632      	mov	r2, r6
 80022d8:	2140      	movs	r1, #64	; 0x40
 80022da:	4620      	mov	r0, r4
 80022dc:	f7ff ff80 	bl	80021e0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80022e0:	b9b0      	cbnz	r0, 8002310 <HAL_UART_Transmit+0x84>
      huart->gState = HAL_UART_STATE_READY;
 80022e2:	2320      	movs	r3, #32
 80022e4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80022e8:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 80022ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 80022f0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80022f2:	3b01      	subs	r3, #1
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	84e3      	strh	r3, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80022f8:	68a3      	ldr	r3, [r4, #8]
 80022fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022fe:	4632      	mov	r2, r6
 8002300:	463b      	mov	r3, r7
 8002302:	f04f 0180 	mov.w	r1, #128	; 0x80
 8002306:	4620      	mov	r0, r4
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002308:	d10e      	bne.n	8002328 <HAL_UART_Transmit+0x9c>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800230a:	f7ff ff69 	bl	80021e0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800230e:	b110      	cbz	r0, 8002316 <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8002310:	2003      	movs	r0, #3
 8002312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002316:	882b      	ldrh	r3, [r5, #0]
 8002318:	6822      	ldr	r2, [r4, #0]
 800231a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800231e:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8002320:	6923      	ldr	r3, [r4, #16]
 8002322:	b943      	cbnz	r3, 8002336 <HAL_UART_Transmit+0xaa>
          pData +=2U;
 8002324:	3502      	adds	r5, #2
 8002326:	e7d2      	b.n	80022ce <HAL_UART_Transmit+0x42>
        if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002328:	f7ff ff5a 	bl	80021e0 <UART_WaitOnFlagUntilTimeout.constprop.3>
 800232c:	2800      	cmp	r0, #0
 800232e:	d1ef      	bne.n	8002310 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002330:	6823      	ldr	r3, [r4, #0]
 8002332:	782a      	ldrb	r2, [r5, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	3501      	adds	r5, #1
 8002338:	e7c9      	b.n	80022ce <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 800233a:	2001      	movs	r0, #1
 800233c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8002340:	2002      	movs	r0, #2
}
 8002342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002348 <__io_putchar>:

#ifdef __cplusplus
 extern "C" {
#endif
void __io_putchar(uint8_t ch)
{
 8002348:	b507      	push	{r0, r1, r2, lr}
 800234a:	a902      	add	r1, sp, #8
	HAL_UART_Transmit(&huart2, &ch, 1, 1);
 800234c:	2301      	movs	r3, #1
{
 800234e:	f801 0d01 	strb.w	r0, [r1, #-1]!
	HAL_UART_Transmit(&huart2, &ch, 1, 1);
 8002352:	461a      	mov	r2, r3
 8002354:	4802      	ldr	r0, [pc, #8]	; (8002360 <__io_putchar+0x18>)
 8002356:	f7ff ff99 	bl	800228c <HAL_UART_Transmit>
}
 800235a:	b003      	add	sp, #12
 800235c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002360:	20000298 	.word	0x20000298
 8002364:	00000000 	.word	0x00000000

08002368 <HAL_TIM_IC_CaptureCallback>:
 uint32_t IC1Value,IC2Value;
  float cycle=0,Width=0,DutyCycle=0,Freqency=0;
#define PI 3.13159265358979
  float velocity;
 void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 {
 8002368:	b538      	push	{r3, r4, r5, lr}
 	if(htim->Instance==TIM3)
 800236a:	6802      	ldr	r2, [r0, #0]
 800236c:	4b28      	ldr	r3, [pc, #160]	; (8002410 <HAL_TIM_IC_CaptureCallback+0xa8>)
 800236e:	429a      	cmp	r2, r3
 {
 8002370:	4604      	mov	r4, r0
 	if(htim->Instance==TIM3)
 8002372:	d148      	bne.n	8002406 <HAL_TIM_IC_CaptureCallback+0x9e>
 	{
 		if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_1)
 8002374:	7e03      	ldrb	r3, [r0, #24]
 8002376:	4d27      	ldr	r5, [pc, #156]	; (8002414 <HAL_TIM_IC_CaptureCallback+0xac>)
 8002378:	2b01      	cmp	r3, #1
 800237a:	d10e      	bne.n	800239a <HAL_TIM_IC_CaptureCallback+0x32>
 		{//if CH1 is rising
 			IC1Value=HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_1);//Read CH1 vale
 800237c:	2100      	movs	r1, #0
 800237e:	f7ff fb96 	bl	8001aae <HAL_TIM_ReadCapturedValue>
 8002382:	4b25      	ldr	r3, [pc, #148]	; (8002418 <HAL_TIM_IC_CaptureCallback+0xb0>)
 			TIM2->CNT=0;//Rest count
 			cycle=(float)IC1Value;//cycle of pwm
 8002384:	ee07 0a90 	vmov	s15, r0
 			IC1Value=HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_1);//Read CH1 vale
 8002388:	6018      	str	r0, [r3, #0]
 			cycle=(float)IC1Value;//cycle of pwm
 800238a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 			TIM2->CNT=0;//Rest count
 800238e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002392:	2200      	movs	r2, #0
 8002394:	625a      	str	r2, [r3, #36]	; 0x24
 			cycle=(float)IC1Value;//cycle of pwm
 8002396:	edc5 7a00 	vstr	s15, [r5]

 		}
 		 if(htim->Channel==HAL_TIM_ACTIVE_CHANNEL_2)
 800239a:	7e23      	ldrb	r3, [r4, #24]
 800239c:	2b02      	cmp	r3, #2
 800239e:	d130      	bne.n	8002402 <HAL_TIM_IC_CaptureCallback+0x9a>
 			{
 				IC2Value=HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_2);//Read CH2 vale
 80023a0:	2104      	movs	r1, #4
 80023a2:	4620      	mov	r0, r4
 80023a4:	f7ff fb83 	bl	8001aae <HAL_TIM_ReadCapturedValue>
 80023a8:	4b1c      	ldr	r3, [pc, #112]	; (800241c <HAL_TIM_IC_CaptureCallback+0xb4>)
 				Width=(float)IC2Value;//Width of pwm
 				DutyCycle=(Width*100)/cycle;//duty
 80023aa:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8002420 <HAL_TIM_IC_CaptureCallback+0xb8>
 				IC2Value=HAL_TIM_ReadCapturedValue(htim,TIM_CHANNEL_2);//Read CH2 vale
 80023ae:	6018      	str	r0, [r3, #0]
 				Width=(float)IC2Value;//Width of pwm
 80023b0:	ee07 0a90 	vmov	s15, r0
 80023b4:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <HAL_TIM_IC_CaptureCallback+0xbc>)
 				DutyCycle=(Width*100)/cycle;//duty
 80023b6:	ed95 7a00 	vldr	s14, [r5]
 				Width=(float)IC2Value;//Width of pwm
 80023ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023be:	edc3 7a00 	vstr	s15, [r3]
 				DutyCycle=(Width*100)/cycle;//duty
 80023c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80023c6:	4b18      	ldr	r3, [pc, #96]	; (8002428 <HAL_TIM_IC_CaptureCallback+0xc0>)
 80023c8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 				Freqency=1000000*cycle;//freqency
 80023cc:	eddf 7a17 	vldr	s15, [pc, #92]	; 800242c <HAL_TIM_IC_CaptureCallback+0xc4>
 				DutyCycle=(Width*100)/cycle;//duty
 80023d0:	edc3 6a00 	vstr	s13, [r3]
 				Freqency=1000000*cycle;//freqency
 80023d4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80023d8:	4b15      	ldr	r3, [pc, #84]	; (8002430 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80023da:	edc3 6a00 	vstr	s13, [r3]
 				velocity=(2*PI/100)/(cycle/1000000);
 80023de:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80023e2:	ee16 0a90 	vmov	r0, s13
 80023e6:	f7fe f8cf 	bl	8000588 <__aeabi_f2d>
 80023ea:	460b      	mov	r3, r1
 80023ec:	4602      	mov	r2, r0
 80023ee:	a106      	add	r1, pc, #24	; (adr r1, 8002408 <HAL_TIM_IC_CaptureCallback+0xa0>)
 80023f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80023f4:	f7fe fa46 	bl	8000884 <__aeabi_ddiv>
 80023f8:	f7fe fbf2 	bl	8000be0 <__aeabi_d2f>
 80023fc:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80023fe:	6018      	str	r0, [r3, #0]
 8002400:	bd38      	pop	{r3, r4, r5, pc}
 			}
 		else{
 				cycle=0;
 8002402:	2300      	movs	r3, #0
 8002404:	602b      	str	r3, [r5, #0]
 8002406:	bd38      	pop	{r3, r4, r5, pc}
 8002408:	20a198f4 	.word	0x20a198f4
 800240c:	3fb008a4 	.word	0x3fb008a4
 8002410:	40000400 	.word	0x40000400
 8002414:	20000204 	.word	0x20000204
 8002418:	20000254 	.word	0x20000254
 800241c:	200002d8 	.word	0x200002d8
 8002420:	42c80000 	.word	0x42c80000
 8002424:	20000200 	.word	0x20000200
 8002428:	200001f8 	.word	0x200001f8
 800242c:	49742400 	.word	0x49742400
 8002430:	200001fc 	.word	0x200001fc
 8002434:	20000258 	.word	0x20000258

08002438 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002438:	b530      	push	{r4, r5, lr}
 800243a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 800243c:	4b28      	ldr	r3, [pc, #160]	; (80024e0 <SystemClock_Config+0xa8>)
 800243e:	2100      	movs	r1, #0
 8002440:	9100      	str	r1, [sp, #0]
 8002442:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002444:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002448:	641a      	str	r2, [r3, #64]	; 0x40
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800244c:	4a25      	ldr	r2, [pc, #148]	; (80024e4 <SystemClock_Config+0xac>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800244e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002456:	9101      	str	r1, [sp, #4]
 8002458:	6813      	ldr	r3, [r2, #0]
 800245a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800245e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002462:	6013      	str	r3, [r2, #0]
 8002464:	6813      	ldr	r3, [r2, #0]
 8002466:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800246a:	9301      	str	r3, [sp, #4]
 800246c:	9b01      	ldr	r3, [sp, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800246e:	2301      	movs	r3, #1
 8002470:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002472:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002476:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002478:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800247c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 4;
 800247e:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002480:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 72;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002482:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002484:	2348      	movs	r3, #72	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002486:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002488:	950f      	str	r5, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 800248a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800248c:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800248e:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002490:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002492:	f7ff f843 	bl	800151c <HAL_RCC_OscConfig>
 8002496:	b100      	cbz	r0, 800249a <SystemClock_Config+0x62>
 8002498:	e7fe      	b.n	8002498 <SystemClock_Config+0x60>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800249a:	230f      	movs	r3, #15
 800249c:	9302      	str	r3, [sp, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLRCLK;
 800249e:	2303      	movs	r3, #3
 80024a0:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024a2:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024a8:	4621      	mov	r1, r4
 80024aa:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80024ac:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80024ae:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80024b0:	f7fe ff2c 	bl	800130c <HAL_RCC_ClockConfig>
 80024b4:	4604      	mov	r4, r0
 80024b6:	b100      	cbz	r0, 80024ba <SystemClock_Config+0x82>
 80024b8:	e7fe      	b.n	80024b8 <SystemClock_Config+0x80>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80024ba:	f7fe ffc1 	bl	8001440 <HAL_RCC_GetHCLKFreq>
 80024be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024c2:	fbb0 f0f3 	udiv	r0, r0, r3
 80024c6:	f7fe fe19 	bl	80010fc <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80024ca:	4628      	mov	r0, r5
 80024cc:	f7fe fe2c 	bl	8001128 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80024d0:	4622      	mov	r2, r4
 80024d2:	4621      	mov	r1, r4
 80024d4:	f04f 30ff 	mov.w	r0, #4294967295
 80024d8:	f7fe fdd0 	bl	800107c <HAL_NVIC_SetPriority>
}
 80024dc:	b015      	add	sp, #84	; 0x54
 80024de:	bd30      	pop	{r4, r5, pc}
 80024e0:	40023800 	.word	0x40023800
 80024e4:	40007000 	.word	0x40007000

080024e8 <main>:
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b096      	sub	sp, #88	; 0x58
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ec:	2400      	movs	r4, #0
  HAL_Init();
 80024ee:	f7fe fd73 	bl	8000fd8 <HAL_Init>
  SystemClock_Config();
 80024f2:	f7ff ffa1 	bl	8002438 <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024f6:	4b76      	ldr	r3, [pc, #472]	; (80026d0 <main+0x1e8>)
 80024f8:	9403      	str	r4, [sp, #12]
 80024fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80024fc:	4875      	ldr	r0, [pc, #468]	; (80026d4 <main+0x1ec>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024fe:	f042 0204 	orr.w	r2, r2, #4
 8002502:	631a      	str	r2, [r3, #48]	; 0x30
 8002504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002506:	f002 0204 	and.w	r2, r2, #4
 800250a:	9203      	str	r2, [sp, #12]
 800250c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800250e:	9404      	str	r4, [sp, #16]
 8002510:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002512:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002516:	631a      	str	r2, [r3, #48]	; 0x30
 8002518:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800251a:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800251e:	9204      	str	r2, [sp, #16]
 8002520:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002522:	9405      	str	r4, [sp, #20]
 8002524:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002526:	f042 0201 	orr.w	r2, r2, #1
 800252a:	631a      	str	r2, [r3, #48]	; 0x30
 800252c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800252e:	f002 0201 	and.w	r2, r2, #1
 8002532:	9205      	str	r2, [sp, #20]
 8002534:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002536:	9406      	str	r4, [sp, #24]
 8002538:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800253a:	f042 0202 	orr.w	r2, r2, #2
 800253e:	631a      	str	r2, [r3, #48]	; 0x30
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002546:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002548:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800254a:	2120      	movs	r1, #32
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800254c:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800254e:	f7fe fed7 	bl	8001300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002552:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002556:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002558:	a911      	add	r1, sp, #68	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800255a:	4b5f      	ldr	r3, [pc, #380]	; (80026d8 <main+0x1f0>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800255c:	485f      	ldr	r0, [pc, #380]	; (80026dc <main+0x1f4>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800255e:	9312      	str	r3, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002560:	9413      	str	r4, [sp, #76]	; 0x4c

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002562:	2501      	movs	r5, #1
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002564:	f7fe fdf2 	bl	800114c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8002568:	2320      	movs	r3, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800256a:	485a      	ldr	r0, [pc, #360]	; (80026d4 <main+0x1ec>)
  GPIO_InitStruct.Pin = LD2_Pin;
 800256c:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800256e:	a911      	add	r1, sp, #68	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002570:	9512      	str	r5, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	9413      	str	r4, [sp, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002574:	9414      	str	r4, [sp, #80]	; 0x50
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002576:	f7fe fde9 	bl	800114c <HAL_GPIO_Init>
  huart2.Instance = USART2;
 800257a:	4859      	ldr	r0, [pc, #356]	; (80026e0 <main+0x1f8>)
  huart2.Init.BaudRate = 115200;
 800257c:	4b59      	ldr	r3, [pc, #356]	; (80026e4 <main+0x1fc>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800257e:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 115200;
 8002580:	f44f 36e1 	mov.w	r6, #115200	; 0x1c200
 8002584:	e880 0048 	stmia.w	r0, {r3, r6}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002588:	230c      	movs	r3, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800258a:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800258c:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800258e:	6143      	str	r3, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002590:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002592:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002594:	f7ff fe4c 	bl	8002230 <HAL_UART_Init>
 8002598:	b100      	cbz	r0, 800259c <main+0xb4>
 800259a:	e7fe      	b.n	800259a <main+0xb2>
  htim2.Instance = TIM2;
 800259c:	4c52      	ldr	r4, [pc, #328]	; (80026e8 <main+0x200>)
  htim2.Init.Prescaler = 89;
 800259e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80025a2:	2359      	movs	r3, #89	; 0x59
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025a4:	60a0      	str	r0, [r4, #8]
  htim2.Init.Period = 29999;
 80025a6:	f247 572f 	movw	r7, #29999	; 0x752f
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025aa:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025ac:	4620      	mov	r0, r4
  htim2.Init.Prescaler = 89;
 80025ae:	e884 000a 	stmia.w	r4, {r1, r3}
  htim2.Init.Period = 29999;
 80025b2:	60e7      	str	r7, [r4, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80025b4:	f7ff fba8 	bl	8001d08 <HAL_TIM_Base_Init>
 80025b8:	b100      	cbz	r0, 80025bc <main+0xd4>
 80025ba:	e7fe      	b.n	80025ba <main+0xd2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025bc:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025c0:	a911      	add	r1, sp, #68	; 0x44
 80025c2:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025c4:	9611      	str	r6, [sp, #68]	; 0x44
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80025c6:	f7ff f999 	bl	80018fc <HAL_TIM_ConfigClockSource>
 80025ca:	b100      	cbz	r0, 80025ce <main+0xe6>
 80025cc:	e7fe      	b.n	80025cc <main+0xe4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ce:	900d      	str	r0, [sp, #52]	; 0x34
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025d0:	900e      	str	r0, [sp, #56]	; 0x38
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025d2:	a90d      	add	r1, sp, #52	; 0x34
 80025d4:	4620      	mov	r0, r4
 80025d6:	f7ff fcc5 	bl	8001f64 <HAL_TIMEx_MasterConfigSynchronization>
 80025da:	b100      	cbz	r0, 80025de <main+0xf6>
 80025dc:	e7fe      	b.n	80025dc <main+0xf4>
  htim3.Instance = TIM3;
 80025de:	4c43      	ldr	r4, [pc, #268]	; (80026ec <main+0x204>)
  htim3.Init.Prescaler = 72-1;
 80025e0:	4a43      	ldr	r2, [pc, #268]	; (80026f0 <main+0x208>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025e2:	60a0      	str	r0, [r4, #8]
  htim3.Init.Prescaler = 72-1;
 80025e4:	2347      	movs	r3, #71	; 0x47
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025e6:	6120      	str	r0, [r4, #16]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025e8:	4620      	mov	r0, r4
  htim3.Init.Prescaler = 72-1;
 80025ea:	e884 000c 	stmia.w	r4, {r2, r3}
  htim3.Init.Period = 29999;
 80025ee:	60e7      	str	r7, [r4, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025f0:	f7ff fb8a 	bl	8001d08 <HAL_TIM_Base_Init>
 80025f4:	b100      	cbz	r0, 80025f8 <main+0x110>
 80025f6:	e7fe      	b.n	80025f6 <main+0x10e>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025f8:	a916      	add	r1, sp, #88	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025fa:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025fc:	f841 6d34 	str.w	r6, [r1, #-52]!
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002600:	f7ff f97c 	bl	80018fc <HAL_TIM_ConfigClockSource>
 8002604:	b100      	cbz	r0, 8002608 <main+0x120>
 8002606:	e7fe      	b.n	8002606 <main+0x11e>
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8002608:	4620      	mov	r0, r4
 800260a:	f7ff fb97 	bl	8001d3c <HAL_TIM_IC_Init>
 800260e:	b100      	cbz	r0, 8002612 <main+0x12a>
 8002610:	e7fe      	b.n	8002610 <main+0x128>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8002612:	2304      	movs	r3, #4
 8002614:	9311      	str	r3, [sp, #68]	; 0x44
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8002616:	9013      	str	r0, [sp, #76]	; 0x4c
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002618:	2350      	movs	r3, #80	; 0x50
  sSlaveConfig.TriggerFilter = 0;
 800261a:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIM_SlaveConfigSynchronization(&htim3, &sSlaveConfig) != HAL_OK)
 800261c:	a911      	add	r1, sp, #68	; 0x44
 800261e:	4620      	mov	r0, r4
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002620:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchronization(&htim3, &sSlaveConfig) != HAL_OK)
 8002622:	f7ff fa24 	bl	8001a6e <HAL_TIM_SlaveConfigSynchronization>
 8002626:	b100      	cbz	r0, 800262a <main+0x142>
 8002628:	e7fe      	b.n	8002628 <main+0x140>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800262a:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800262c:	9008      	str	r0, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800262e:	a907      	add	r1, sp, #28
 8002630:	4620      	mov	r0, r4
 8002632:	f7ff fc97 	bl	8001f64 <HAL_TIMEx_MasterConfigSynchronization>
 8002636:	4602      	mov	r2, r0
 8002638:	b100      	cbz	r0, 800263c <main+0x154>
 800263a:	e7fe      	b.n	800263a <main+0x152>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800263c:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800263e:	900f      	str	r0, [sp, #60]	; 0x3c
  sConfigIC.ICFilter = 15;
 8002640:	230f      	movs	r3, #15
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8002642:	a90d      	add	r1, sp, #52	; 0x34
 8002644:	4620      	mov	r0, r4
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002646:	950e      	str	r5, [sp, #56]	; 0x38
  sConfigIC.ICFilter = 15;
 8002648:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800264a:	f7ff fbcb 	bl	8001de4 <HAL_TIM_IC_ConfigChannel>
 800264e:	b100      	cbz	r0, 8002652 <main+0x16a>
 8002650:	e7fe      	b.n	8002650 <main+0x168>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8002652:	2302      	movs	r3, #2
 8002654:	930d      	str	r3, [sp, #52]	; 0x34
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8002656:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002658:	a90d      	add	r1, sp, #52	; 0x34
  sConfigIC.ICFilter = 0;
 800265a:	2300      	movs	r3, #0
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800265c:	2204      	movs	r2, #4
 800265e:	4823      	ldr	r0, [pc, #140]	; (80026ec <main+0x204>)
  sConfigIC.ICFilter = 0;
 8002660:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8002662:	f7ff fbbf 	bl	8001de4 <HAL_TIM_IC_ConfigChannel>
 8002666:	4601      	mov	r1, r0
 8002668:	b100      	cbz	r0, 800266c <main+0x184>
 800266a:	e7fe      	b.n	800266a <main+0x182>
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 800266c:	481f      	ldr	r0, [pc, #124]	; (80026ec <main+0x204>)
	  printf("Cycle %ld             \n", IC1Value);
 800266e:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002714 <main+0x22c>
 8002672:	4f20      	ldr	r7, [pc, #128]	; (80026f4 <main+0x20c>)
	  	  		printf("Width %ld             \n", IC2Value);
 8002674:	4e20      	ldr	r6, [pc, #128]	; (80026f8 <main+0x210>)
  HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_1);
 8002676:	f7ff fc49 	bl	8001f0c <HAL_TIM_IC_Start_IT>
    	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 800267a:	2104      	movs	r1, #4
 800267c:	481b      	ldr	r0, [pc, #108]	; (80026ec <main+0x204>)
 800267e:	f7ff fc45 	bl	8001f0c <HAL_TIM_IC_Start_IT>
	  printf("Cycle %ld             \n", IC1Value);
 8002682:	f8d8 1000 	ldr.w	r1, [r8]
 8002686:	4638      	mov	r0, r7
 8002688:	f000 fe12 	bl	80032b0 <iprintf>
	  	  		printf("Width %ld             \n", IC2Value);
 800268c:	6831      	ldr	r1, [r6, #0]
 800268e:	481b      	ldr	r0, [pc, #108]	; (80026fc <main+0x214>)
 8002690:	f000 fe0e 	bl	80032b0 <iprintf>
	  	  		printf( "Duty %f             \n", DutyCycle);
 8002694:	4b1a      	ldr	r3, [pc, #104]	; (8002700 <main+0x218>)
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	f7fd ff76 	bl	8000588 <__aeabi_f2d>
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
 80026a0:	4818      	ldr	r0, [pc, #96]	; (8002704 <main+0x21c>)
 80026a2:	f000 fe05 	bl	80032b0 <iprintf>
	  	  		printf( "Freq %f  velocity %f        \r\n", Freqency,velocity);
 80026a6:	4b18      	ldr	r3, [pc, #96]	; (8002708 <main+0x220>)
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	f7fd ff6d 	bl	8000588 <__aeabi_f2d>
 80026ae:	4b17      	ldr	r3, [pc, #92]	; (800270c <main+0x224>)
 80026b0:	4604      	mov	r4, r0
 80026b2:	6818      	ldr	r0, [r3, #0]
 80026b4:	460d      	mov	r5, r1
 80026b6:	f7fd ff67 	bl	8000588 <__aeabi_f2d>
 80026ba:	4622      	mov	r2, r4
 80026bc:	e9cd 0100 	strd	r0, r1, [sp]
 80026c0:	462b      	mov	r3, r5
 80026c2:	4813      	ldr	r0, [pc, #76]	; (8002710 <main+0x228>)
 80026c4:	f000 fdf4 	bl	80032b0 <iprintf>
	  	  		HAL_Delay(100);
 80026c8:	2064      	movs	r0, #100	; 0x64
 80026ca:	f7fe fcb1 	bl	8001030 <HAL_Delay>
 80026ce:	e7d8      	b.n	8002682 <main+0x19a>
 80026d0:	40023800 	.word	0x40023800
 80026d4:	40020000 	.word	0x40020000
 80026d8:	10210000 	.word	0x10210000
 80026dc:	40020800 	.word	0x40020800
 80026e0:	20000298 	.word	0x20000298
 80026e4:	40004400 	.word	0x40004400
 80026e8:	2000025c 	.word	0x2000025c
 80026ec:	20000218 	.word	0x20000218
 80026f0:	40000400 	.word	0x40000400
 80026f4:	08005090 	.word	0x08005090
 80026f8:	200002d8 	.word	0x200002d8
 80026fc:	080050a8 	.word	0x080050a8
 8002700:	200001f8 	.word	0x200001f8
 8002704:	080050c0 	.word	0x080050c0
 8002708:	200001fc 	.word	0x200001fc
 800270c:	20000258 	.word	0x20000258
 8002710:	080050d6 	.word	0x080050d6
 8002714:	20000254 	.word	0x20000254

08002718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002718:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800271a:	2007      	movs	r0, #7
 800271c:	f7fe fc9c 	bl	8001058 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8002720:	2200      	movs	r2, #0
 8002722:	4611      	mov	r1, r2
 8002724:	f06f 000b 	mvn.w	r0, #11
 8002728:	f7fe fca8 	bl	800107c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800272c:	2200      	movs	r2, #0
 800272e:	4611      	mov	r1, r2
 8002730:	f06f 000a 	mvn.w	r0, #10
 8002734:	f7fe fca2 	bl	800107c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002738:	2200      	movs	r2, #0
 800273a:	4611      	mov	r1, r2
 800273c:	f06f 0009 	mvn.w	r0, #9
 8002740:	f7fe fc9c 	bl	800107c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8002744:	2200      	movs	r2, #0
 8002746:	4611      	mov	r1, r2
 8002748:	f06f 0004 	mvn.w	r0, #4
 800274c:	f7fe fc96 	bl	800107c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8002750:	2200      	movs	r2, #0
 8002752:	4611      	mov	r1, r2
 8002754:	f06f 0003 	mvn.w	r0, #3
 8002758:	f7fe fc90 	bl	800107c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800275c:	2200      	movs	r2, #0
 800275e:	4611      	mov	r1, r2
 8002760:	f06f 0001 	mvn.w	r0, #1
 8002764:	f7fe fc8a 	bl	800107c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002768:	2200      	movs	r2, #0
 800276a:	4611      	mov	r1, r2
 800276c:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002770:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002774:	f7fe bc82 	b.w	800107c <HAL_NVIC_SetPriority>

08002778 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002778:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_base->Instance==TIM2)
 800277a:	6803      	ldr	r3, [r0, #0]
 800277c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8002780:	b086      	sub	sp, #24
  if(htim_base->Instance==TIM2)
 8002782:	d10d      	bne.n	80027a0 <HAL_TIM_Base_MspInit+0x28>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002784:	2300      	movs	r3, #0
 8002786:	9301      	str	r3, [sp, #4]
 8002788:	4b17      	ldr	r3, [pc, #92]	; (80027e8 <HAL_TIM_Base_MspInit+0x70>)
 800278a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800278c:	f042 0201 	orr.w	r2, r2, #1
 8002790:	641a      	str	r2, [r3, #64]	; 0x40
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002794:	f003 0301 	and.w	r3, r3, #1
 8002798:	9301      	str	r3, [sp, #4]
 800279a:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800279c:	b006      	add	sp, #24
 800279e:	bd10      	pop	{r4, pc}
  else if(htim_base->Instance==TIM3)
 80027a0:	4a12      	ldr	r2, [pc, #72]	; (80027ec <HAL_TIM_Base_MspInit+0x74>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d1fa      	bne.n	800279c <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027a6:	2400      	movs	r4, #0
 80027a8:	4b0f      	ldr	r3, [pc, #60]	; (80027e8 <HAL_TIM_Base_MspInit+0x70>)
 80027aa:	9400      	str	r4, [sp, #0]
 80027ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ae:	4810      	ldr	r0, [pc, #64]	; (80027f0 <HAL_TIM_Base_MspInit+0x78>)
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027b0:	f042 0202 	orr.w	r2, r2, #2
 80027b4:	641a      	str	r2, [r3, #64]	; 0x40
 80027b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b8:	9404      	str	r4, [sp, #16]
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	9300      	str	r3, [sp, #0]
 80027c0:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80027c2:	2340      	movs	r3, #64	; 0x40
 80027c4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027c6:	2201      	movs	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c8:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ca:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027cc:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027ce:	9203      	str	r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027d0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d2:	f7fe fcbb 	bl	800114c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80027d6:	4622      	mov	r2, r4
 80027d8:	4621      	mov	r1, r4
 80027da:	201d      	movs	r0, #29
 80027dc:	f7fe fc4e 	bl	800107c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80027e0:	201d      	movs	r0, #29
 80027e2:	f7fe fc7f 	bl	80010e4 <HAL_NVIC_EnableIRQ>
}
 80027e6:	e7d9      	b.n	800279c <HAL_TIM_Base_MspInit+0x24>
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40000400 	.word	0x40000400
 80027f0:	40020000 	.word	0x40020000

080027f4 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART2)
 80027f6:	6802      	ldr	r2, [r0, #0]
 80027f8:	4b0f      	ldr	r3, [pc, #60]	; (8002838 <HAL_UART_MspInit+0x44>)
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d119      	bne.n	8002832 <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80027fe:	2300      	movs	r3, #0
 8002800:	9300      	str	r3, [sp, #0]
 8002802:	4b0e      	ldr	r3, [pc, #56]	; (800283c <HAL_UART_MspInit+0x48>)
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002804:	480e      	ldr	r0, [pc, #56]	; (8002840 <HAL_UART_MspInit+0x4c>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8002806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002808:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800280c:	641a      	str	r2, [r3, #64]	; 0x40
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002818:	230c      	movs	r3, #12
 800281a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800281c:	2302      	movs	r3, #2
 800281e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002820:	2301      	movs	r3, #1
 8002822:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002824:	2303      	movs	r3, #3
 8002826:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002828:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800282a:	2307      	movs	r3, #7
 800282c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800282e:	f7fe fc8d 	bl	800114c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002832:	b007      	add	sp, #28
 8002834:	f85d fb04 	ldr.w	pc, [sp], #4
 8002838:	40004400 	.word	0x40004400
 800283c:	40023800 	.word	0x40023800
 8002840:	40020000 	.word	0x40020000

08002844 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002844:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002846:	f7fe fbe1 	bl	800100c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800284a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800284e:	f7fe bc78 	b.w	8001142 <HAL_SYSTICK_IRQHandler>
	...

08002854 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002854:	4801      	ldr	r0, [pc, #4]	; (800285c <TIM3_IRQHandler+0x8>)
 8002856:	f7ff b951 	b.w	8001afc <HAL_TIM_IRQHandler>
 800285a:	bf00      	nop
 800285c:	20000218 	.word	0x20000218

08002860 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

int _read (int file, char *ptr, int len)
{
 8002860:	b570      	push	{r4, r5, r6, lr}
 8002862:	460e      	mov	r6, r1
 8002864:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002866:	460c      	mov	r4, r1
 8002868:	1ba3      	subs	r3, r4, r6
 800286a:	429d      	cmp	r5, r3
 800286c:	dc01      	bgt.n	8002872 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 800286e:	4628      	mov	r0, r5
 8002870:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8002872:	f3af 8000 	nop.w
 8002876:	f804 0b01 	strb.w	r0, [r4], #1
 800287a:	e7f5      	b.n	8002868 <_read+0x8>

0800287c <_write>:

int _write(int file, char *ptr, int len)
{
 800287c:	b570      	push	{r4, r5, r6, lr}
 800287e:	460e      	mov	r6, r1
 8002880:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002882:	460c      	mov	r4, r1
 8002884:	1ba3      	subs	r3, r4, r6
 8002886:	429d      	cmp	r5, r3
 8002888:	dc01      	bgt.n	800288e <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 800288a:	4628      	mov	r0, r5
 800288c:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800288e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8002892:	f7ff fd59 	bl	8002348 <__io_putchar>
 8002896:	e7f5      	b.n	8002884 <_write+0x8>

08002898 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8002898:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800289a:	4b0a      	ldr	r3, [pc, #40]	; (80028c4 <_sbrk+0x2c>)
 800289c:	6819      	ldr	r1, [r3, #0]
{
 800289e:	4602      	mov	r2, r0
	if (heap_end == 0)
 80028a0:	b909      	cbnz	r1, 80028a6 <_sbrk+0xe>
		heap_end = &end;
 80028a2:	4909      	ldr	r1, [pc, #36]	; (80028c8 <_sbrk+0x30>)
 80028a4:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80028a6:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80028a8:	4669      	mov	r1, sp
 80028aa:	4402      	add	r2, r0
 80028ac:	428a      	cmp	r2, r1
 80028ae:	d906      	bls.n	80028be <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80028b0:	f000 f868 	bl	8002984 <__errno>
 80028b4:	230c      	movs	r3, #12
 80028b6:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80028b8:	f04f 30ff 	mov.w	r0, #4294967295
 80028bc:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 80028be:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 80028c0:	bd08      	pop	{r3, pc}
 80028c2:	bf00      	nop
 80028c4:	20000208 	.word	0x20000208
 80028c8:	200002e0 	.word	0x200002e0

080028cc <_close>:

int _close(int file)
{
	return -1;
}
 80028cc:	f04f 30ff 	mov.w	r0, #4294967295
 80028d0:	4770      	bx	lr

080028d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80028d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028d6:	604b      	str	r3, [r1, #4]
	return 0;
}
 80028d8:	2000      	movs	r0, #0
 80028da:	4770      	bx	lr

080028dc <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80028dc:	2001      	movs	r0, #1
 80028de:	4770      	bx	lr

080028e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80028e0:	2000      	movs	r0, #0
 80028e2:	4770      	bx	lr

080028e4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028e4:	490f      	ldr	r1, [pc, #60]	; (8002924 <SystemInit+0x40>)
 80028e6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80028ea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80028f2:	4b0d      	ldr	r3, [pc, #52]	; (8002928 <SystemInit+0x44>)
 80028f4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80028f6:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80028f8:	f042 0201 	orr.w	r2, r2, #1
 80028fc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80028fe:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002906:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800290a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800290c:	4a07      	ldr	r2, [pc, #28]	; (800292c <SystemInit+0x48>)
 800290e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002916:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002918:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800291a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800291e:	608b      	str	r3, [r1, #8]
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	e000ed00 	.word	0xe000ed00
 8002928:	40023800 	.word	0x40023800
 800292c:	24003010 	.word	0x24003010

08002930 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002930:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002968 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002934:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002936:	e003      	b.n	8002940 <LoopCopyDataInit>

08002938 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002938:	4b0c      	ldr	r3, [pc, #48]	; (800296c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800293a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800293c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800293e:	3104      	adds	r1, #4

08002940 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002940:	480b      	ldr	r0, [pc, #44]	; (8002970 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002942:	4b0c      	ldr	r3, [pc, #48]	; (8002974 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002944:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002946:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002948:	d3f6      	bcc.n	8002938 <CopyDataInit>
  ldr  r2, =_sbss
 800294a:	4a0b      	ldr	r2, [pc, #44]	; (8002978 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800294c:	e002      	b.n	8002954 <LoopFillZerobss>

0800294e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800294e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002950:	f842 3b04 	str.w	r3, [r2], #4

08002954 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002954:	4b09      	ldr	r3, [pc, #36]	; (800297c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002956:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002958:	d3f9      	bcc.n	800294e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800295a:	f7ff ffc3 	bl	80028e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800295e:	f000 f817 	bl	8002990 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002962:	f7ff fdc1 	bl	80024e8 <main>
  bx  lr    
 8002966:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002968:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800296c:	080053e0 	.word	0x080053e0
  ldr  r0, =_sdata
 8002970:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002974:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8002978:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 800297c:	200002e0 	.word	0x200002e0

08002980 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002980:	e7fe      	b.n	8002980 <ADC_IRQHandler>
	...

08002984 <__errno>:
 8002984:	4b01      	ldr	r3, [pc, #4]	; (800298c <__errno+0x8>)
 8002986:	6818      	ldr	r0, [r3, #0]
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	2000000c 	.word	0x2000000c

08002990 <__libc_init_array>:
 8002990:	b570      	push	{r4, r5, r6, lr}
 8002992:	4e0d      	ldr	r6, [pc, #52]	; (80029c8 <__libc_init_array+0x38>)
 8002994:	4c0d      	ldr	r4, [pc, #52]	; (80029cc <__libc_init_array+0x3c>)
 8002996:	1ba4      	subs	r4, r4, r6
 8002998:	10a4      	asrs	r4, r4, #2
 800299a:	2500      	movs	r5, #0
 800299c:	42a5      	cmp	r5, r4
 800299e:	d109      	bne.n	80029b4 <__libc_init_array+0x24>
 80029a0:	4e0b      	ldr	r6, [pc, #44]	; (80029d0 <__libc_init_array+0x40>)
 80029a2:	4c0c      	ldr	r4, [pc, #48]	; (80029d4 <__libc_init_array+0x44>)
 80029a4:	f002 fb68 	bl	8005078 <_init>
 80029a8:	1ba4      	subs	r4, r4, r6
 80029aa:	10a4      	asrs	r4, r4, #2
 80029ac:	2500      	movs	r5, #0
 80029ae:	42a5      	cmp	r5, r4
 80029b0:	d105      	bne.n	80029be <__libc_init_array+0x2e>
 80029b2:	bd70      	pop	{r4, r5, r6, pc}
 80029b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029b8:	4798      	blx	r3
 80029ba:	3501      	adds	r5, #1
 80029bc:	e7ee      	b.n	800299c <__libc_init_array+0xc>
 80029be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80029c2:	4798      	blx	r3
 80029c4:	3501      	adds	r5, #1
 80029c6:	e7f2      	b.n	80029ae <__libc_init_array+0x1e>
 80029c8:	080053d8 	.word	0x080053d8
 80029cc:	080053d8 	.word	0x080053d8
 80029d0:	080053d8 	.word	0x080053d8
 80029d4:	080053dc 	.word	0x080053dc

080029d8 <__cvt>:
 80029d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80029dc:	ec55 4b10 	vmov	r4, r5, d0
 80029e0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80029e2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80029e6:	2d00      	cmp	r5, #0
 80029e8:	460e      	mov	r6, r1
 80029ea:	4691      	mov	r9, r2
 80029ec:	4619      	mov	r1, r3
 80029ee:	bfb8      	it	lt
 80029f0:	4622      	movlt	r2, r4
 80029f2:	462b      	mov	r3, r5
 80029f4:	f027 0720 	bic.w	r7, r7, #32
 80029f8:	bfbb      	ittet	lt
 80029fa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80029fe:	461d      	movlt	r5, r3
 8002a00:	2300      	movge	r3, #0
 8002a02:	232d      	movlt	r3, #45	; 0x2d
 8002a04:	bfb8      	it	lt
 8002a06:	4614      	movlt	r4, r2
 8002a08:	2f46      	cmp	r7, #70	; 0x46
 8002a0a:	700b      	strb	r3, [r1, #0]
 8002a0c:	d004      	beq.n	8002a18 <__cvt+0x40>
 8002a0e:	2f45      	cmp	r7, #69	; 0x45
 8002a10:	d100      	bne.n	8002a14 <__cvt+0x3c>
 8002a12:	3601      	adds	r6, #1
 8002a14:	2102      	movs	r1, #2
 8002a16:	e000      	b.n	8002a1a <__cvt+0x42>
 8002a18:	2103      	movs	r1, #3
 8002a1a:	ab03      	add	r3, sp, #12
 8002a1c:	9301      	str	r3, [sp, #4]
 8002a1e:	ab02      	add	r3, sp, #8
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	4632      	mov	r2, r6
 8002a24:	4653      	mov	r3, sl
 8002a26:	ec45 4b10 	vmov	d0, r4, r5
 8002a2a:	f000 fce5 	bl	80033f8 <_dtoa_r>
 8002a2e:	2f47      	cmp	r7, #71	; 0x47
 8002a30:	4680      	mov	r8, r0
 8002a32:	d102      	bne.n	8002a3a <__cvt+0x62>
 8002a34:	f019 0f01 	tst.w	r9, #1
 8002a38:	d026      	beq.n	8002a88 <__cvt+0xb0>
 8002a3a:	2f46      	cmp	r7, #70	; 0x46
 8002a3c:	eb08 0906 	add.w	r9, r8, r6
 8002a40:	d111      	bne.n	8002a66 <__cvt+0x8e>
 8002a42:	f898 3000 	ldrb.w	r3, [r8]
 8002a46:	2b30      	cmp	r3, #48	; 0x30
 8002a48:	d10a      	bne.n	8002a60 <__cvt+0x88>
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	4620      	mov	r0, r4
 8002a50:	4629      	mov	r1, r5
 8002a52:	f7fe f855 	bl	8000b00 <__aeabi_dcmpeq>
 8002a56:	b918      	cbnz	r0, 8002a60 <__cvt+0x88>
 8002a58:	f1c6 0601 	rsb	r6, r6, #1
 8002a5c:	f8ca 6000 	str.w	r6, [sl]
 8002a60:	f8da 3000 	ldr.w	r3, [sl]
 8002a64:	4499      	add	r9, r3
 8002a66:	2200      	movs	r2, #0
 8002a68:	2300      	movs	r3, #0
 8002a6a:	4620      	mov	r0, r4
 8002a6c:	4629      	mov	r1, r5
 8002a6e:	f7fe f847 	bl	8000b00 <__aeabi_dcmpeq>
 8002a72:	b938      	cbnz	r0, 8002a84 <__cvt+0xac>
 8002a74:	2230      	movs	r2, #48	; 0x30
 8002a76:	9b03      	ldr	r3, [sp, #12]
 8002a78:	4599      	cmp	r9, r3
 8002a7a:	d905      	bls.n	8002a88 <__cvt+0xb0>
 8002a7c:	1c59      	adds	r1, r3, #1
 8002a7e:	9103      	str	r1, [sp, #12]
 8002a80:	701a      	strb	r2, [r3, #0]
 8002a82:	e7f8      	b.n	8002a76 <__cvt+0x9e>
 8002a84:	f8cd 900c 	str.w	r9, [sp, #12]
 8002a88:	9b03      	ldr	r3, [sp, #12]
 8002a8a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002a8c:	eba3 0308 	sub.w	r3, r3, r8
 8002a90:	4640      	mov	r0, r8
 8002a92:	6013      	str	r3, [r2, #0]
 8002a94:	b004      	add	sp, #16
 8002a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002a9a <__exponent>:
 8002a9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2900      	cmp	r1, #0
 8002aa0:	bfb8      	it	lt
 8002aa2:	4249      	neglt	r1, r1
 8002aa4:	f803 2b02 	strb.w	r2, [r3], #2
 8002aa8:	bfb4      	ite	lt
 8002aaa:	222d      	movlt	r2, #45	; 0x2d
 8002aac:	222b      	movge	r2, #43	; 0x2b
 8002aae:	2909      	cmp	r1, #9
 8002ab0:	7042      	strb	r2, [r0, #1]
 8002ab2:	dd20      	ble.n	8002af6 <__exponent+0x5c>
 8002ab4:	f10d 0207 	add.w	r2, sp, #7
 8002ab8:	4617      	mov	r7, r2
 8002aba:	260a      	movs	r6, #10
 8002abc:	fb91 f5f6 	sdiv	r5, r1, r6
 8002ac0:	fb06 1115 	mls	r1, r6, r5, r1
 8002ac4:	3130      	adds	r1, #48	; 0x30
 8002ac6:	2d09      	cmp	r5, #9
 8002ac8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002acc:	f102 34ff 	add.w	r4, r2, #4294967295
 8002ad0:	4629      	mov	r1, r5
 8002ad2:	dc09      	bgt.n	8002ae8 <__exponent+0x4e>
 8002ad4:	3130      	adds	r1, #48	; 0x30
 8002ad6:	3a02      	subs	r2, #2
 8002ad8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8002adc:	42ba      	cmp	r2, r7
 8002ade:	461c      	mov	r4, r3
 8002ae0:	d304      	bcc.n	8002aec <__exponent+0x52>
 8002ae2:	1a20      	subs	r0, r4, r0
 8002ae4:	b003      	add	sp, #12
 8002ae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ae8:	4622      	mov	r2, r4
 8002aea:	e7e7      	b.n	8002abc <__exponent+0x22>
 8002aec:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002af0:	f803 1b01 	strb.w	r1, [r3], #1
 8002af4:	e7f2      	b.n	8002adc <__exponent+0x42>
 8002af6:	2230      	movs	r2, #48	; 0x30
 8002af8:	461c      	mov	r4, r3
 8002afa:	4411      	add	r1, r2
 8002afc:	f804 2b02 	strb.w	r2, [r4], #2
 8002b00:	7059      	strb	r1, [r3, #1]
 8002b02:	e7ee      	b.n	8002ae2 <__exponent+0x48>

08002b04 <_printf_float>:
 8002b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b08:	b08d      	sub	sp, #52	; 0x34
 8002b0a:	460c      	mov	r4, r1
 8002b0c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8002b10:	4616      	mov	r6, r2
 8002b12:	461f      	mov	r7, r3
 8002b14:	4605      	mov	r5, r0
 8002b16:	f001 fb07 	bl	8004128 <_localeconv_r>
 8002b1a:	6803      	ldr	r3, [r0, #0]
 8002b1c:	9304      	str	r3, [sp, #16]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fd fb76 	bl	8000210 <strlen>
 8002b24:	2300      	movs	r3, #0
 8002b26:	930a      	str	r3, [sp, #40]	; 0x28
 8002b28:	f8d8 3000 	ldr.w	r3, [r8]
 8002b2c:	9005      	str	r0, [sp, #20]
 8002b2e:	3307      	adds	r3, #7
 8002b30:	f023 0307 	bic.w	r3, r3, #7
 8002b34:	f103 0208 	add.w	r2, r3, #8
 8002b38:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002b3c:	f8d4 b000 	ldr.w	fp, [r4]
 8002b40:	f8c8 2000 	str.w	r2, [r8]
 8002b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b48:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002b4c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002b50:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002b54:	9307      	str	r3, [sp, #28]
 8002b56:	f8cd 8018 	str.w	r8, [sp, #24]
 8002b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b5e:	4ba5      	ldr	r3, [pc, #660]	; (8002df4 <_printf_float+0x2f0>)
 8002b60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002b64:	f7fd fffe 	bl	8000b64 <__aeabi_dcmpun>
 8002b68:	2800      	cmp	r0, #0
 8002b6a:	f040 81fb 	bne.w	8002f64 <_printf_float+0x460>
 8002b6e:	f04f 32ff 	mov.w	r2, #4294967295
 8002b72:	4ba0      	ldr	r3, [pc, #640]	; (8002df4 <_printf_float+0x2f0>)
 8002b74:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002b78:	f7fd ffd6 	bl	8000b28 <__aeabi_dcmple>
 8002b7c:	2800      	cmp	r0, #0
 8002b7e:	f040 81f1 	bne.w	8002f64 <_printf_float+0x460>
 8002b82:	2200      	movs	r2, #0
 8002b84:	2300      	movs	r3, #0
 8002b86:	4640      	mov	r0, r8
 8002b88:	4649      	mov	r1, r9
 8002b8a:	f7fd ffc3 	bl	8000b14 <__aeabi_dcmplt>
 8002b8e:	b110      	cbz	r0, 8002b96 <_printf_float+0x92>
 8002b90:	232d      	movs	r3, #45	; 0x2d
 8002b92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b96:	4b98      	ldr	r3, [pc, #608]	; (8002df8 <_printf_float+0x2f4>)
 8002b98:	4a98      	ldr	r2, [pc, #608]	; (8002dfc <_printf_float+0x2f8>)
 8002b9a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8002b9e:	bf8c      	ite	hi
 8002ba0:	4690      	movhi	r8, r2
 8002ba2:	4698      	movls	r8, r3
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	f02b 0204 	bic.w	r2, fp, #4
 8002baa:	6123      	str	r3, [r4, #16]
 8002bac:	6022      	str	r2, [r4, #0]
 8002bae:	f04f 0900 	mov.w	r9, #0
 8002bb2:	9700      	str	r7, [sp, #0]
 8002bb4:	4633      	mov	r3, r6
 8002bb6:	aa0b      	add	r2, sp, #44	; 0x2c
 8002bb8:	4621      	mov	r1, r4
 8002bba:	4628      	mov	r0, r5
 8002bbc:	f000 f9e2 	bl	8002f84 <_printf_common>
 8002bc0:	3001      	adds	r0, #1
 8002bc2:	f040 8093 	bne.w	8002cec <_printf_float+0x1e8>
 8002bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8002bca:	b00d      	add	sp, #52	; 0x34
 8002bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bd0:	6861      	ldr	r1, [r4, #4]
 8002bd2:	1c4b      	adds	r3, r1, #1
 8002bd4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8002bd8:	d13f      	bne.n	8002c5a <_printf_float+0x156>
 8002bda:	2306      	movs	r3, #6
 8002bdc:	6063      	str	r3, [r4, #4]
 8002bde:	2300      	movs	r3, #0
 8002be0:	9303      	str	r3, [sp, #12]
 8002be2:	ab0a      	add	r3, sp, #40	; 0x28
 8002be4:	9302      	str	r3, [sp, #8]
 8002be6:	ab09      	add	r3, sp, #36	; 0x24
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	ec49 8b10 	vmov	d0, r8, r9
 8002bee:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002bf2:	6022      	str	r2, [r4, #0]
 8002bf4:	f8cd a004 	str.w	sl, [sp, #4]
 8002bf8:	6861      	ldr	r1, [r4, #4]
 8002bfa:	4628      	mov	r0, r5
 8002bfc:	f7ff feec 	bl	80029d8 <__cvt>
 8002c00:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8002c04:	2b47      	cmp	r3, #71	; 0x47
 8002c06:	4680      	mov	r8, r0
 8002c08:	d109      	bne.n	8002c1e <_printf_float+0x11a>
 8002c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c0c:	1cd8      	adds	r0, r3, #3
 8002c0e:	db02      	blt.n	8002c16 <_printf_float+0x112>
 8002c10:	6862      	ldr	r2, [r4, #4]
 8002c12:	4293      	cmp	r3, r2
 8002c14:	dd57      	ble.n	8002cc6 <_printf_float+0x1c2>
 8002c16:	f1aa 0a02 	sub.w	sl, sl, #2
 8002c1a:	fa5f fa8a 	uxtb.w	sl, sl
 8002c1e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8002c22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002c24:	d834      	bhi.n	8002c90 <_printf_float+0x18c>
 8002c26:	3901      	subs	r1, #1
 8002c28:	4652      	mov	r2, sl
 8002c2a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002c2e:	9109      	str	r1, [sp, #36]	; 0x24
 8002c30:	f7ff ff33 	bl	8002a9a <__exponent>
 8002c34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002c36:	1883      	adds	r3, r0, r2
 8002c38:	2a01      	cmp	r2, #1
 8002c3a:	4681      	mov	r9, r0
 8002c3c:	6123      	str	r3, [r4, #16]
 8002c3e:	dc02      	bgt.n	8002c46 <_printf_float+0x142>
 8002c40:	6822      	ldr	r2, [r4, #0]
 8002c42:	07d1      	lsls	r1, r2, #31
 8002c44:	d501      	bpl.n	8002c4a <_printf_float+0x146>
 8002c46:	3301      	adds	r3, #1
 8002c48:	6123      	str	r3, [r4, #16]
 8002c4a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d0af      	beq.n	8002bb2 <_printf_float+0xae>
 8002c52:	232d      	movs	r3, #45	; 0x2d
 8002c54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c58:	e7ab      	b.n	8002bb2 <_printf_float+0xae>
 8002c5a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8002c5e:	d002      	beq.n	8002c66 <_printf_float+0x162>
 8002c60:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8002c64:	d1bb      	bne.n	8002bde <_printf_float+0xda>
 8002c66:	b189      	cbz	r1, 8002c8c <_printf_float+0x188>
 8002c68:	2300      	movs	r3, #0
 8002c6a:	9303      	str	r3, [sp, #12]
 8002c6c:	ab0a      	add	r3, sp, #40	; 0x28
 8002c6e:	9302      	str	r3, [sp, #8]
 8002c70:	ab09      	add	r3, sp, #36	; 0x24
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	ec49 8b10 	vmov	d0, r8, r9
 8002c78:	6022      	str	r2, [r4, #0]
 8002c7a:	f8cd a004 	str.w	sl, [sp, #4]
 8002c7e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002c82:	4628      	mov	r0, r5
 8002c84:	f7ff fea8 	bl	80029d8 <__cvt>
 8002c88:	4680      	mov	r8, r0
 8002c8a:	e7be      	b.n	8002c0a <_printf_float+0x106>
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e7a5      	b.n	8002bdc <_printf_float+0xd8>
 8002c90:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8002c94:	d119      	bne.n	8002cca <_printf_float+0x1c6>
 8002c96:	2900      	cmp	r1, #0
 8002c98:	6863      	ldr	r3, [r4, #4]
 8002c9a:	dd0c      	ble.n	8002cb6 <_printf_float+0x1b2>
 8002c9c:	6121      	str	r1, [r4, #16]
 8002c9e:	b913      	cbnz	r3, 8002ca6 <_printf_float+0x1a2>
 8002ca0:	6822      	ldr	r2, [r4, #0]
 8002ca2:	07d2      	lsls	r2, r2, #31
 8002ca4:	d502      	bpl.n	8002cac <_printf_float+0x1a8>
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	440b      	add	r3, r1
 8002caa:	6123      	str	r3, [r4, #16]
 8002cac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cae:	65a3      	str	r3, [r4, #88]	; 0x58
 8002cb0:	f04f 0900 	mov.w	r9, #0
 8002cb4:	e7c9      	b.n	8002c4a <_printf_float+0x146>
 8002cb6:	b913      	cbnz	r3, 8002cbe <_printf_float+0x1ba>
 8002cb8:	6822      	ldr	r2, [r4, #0]
 8002cba:	07d0      	lsls	r0, r2, #31
 8002cbc:	d501      	bpl.n	8002cc2 <_printf_float+0x1be>
 8002cbe:	3302      	adds	r3, #2
 8002cc0:	e7f3      	b.n	8002caa <_printf_float+0x1a6>
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e7f1      	b.n	8002caa <_printf_float+0x1a6>
 8002cc6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8002cca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ccc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	db05      	blt.n	8002cde <_printf_float+0x1da>
 8002cd2:	6822      	ldr	r2, [r4, #0]
 8002cd4:	6123      	str	r3, [r4, #16]
 8002cd6:	07d1      	lsls	r1, r2, #31
 8002cd8:	d5e8      	bpl.n	8002cac <_printf_float+0x1a8>
 8002cda:	3301      	adds	r3, #1
 8002cdc:	e7e5      	b.n	8002caa <_printf_float+0x1a6>
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	bfd4      	ite	le
 8002ce2:	f1c3 0302 	rsble	r3, r3, #2
 8002ce6:	2301      	movgt	r3, #1
 8002ce8:	4413      	add	r3, r2
 8002cea:	e7de      	b.n	8002caa <_printf_float+0x1a6>
 8002cec:	6823      	ldr	r3, [r4, #0]
 8002cee:	055a      	lsls	r2, r3, #21
 8002cf0:	d407      	bmi.n	8002d02 <_printf_float+0x1fe>
 8002cf2:	6923      	ldr	r3, [r4, #16]
 8002cf4:	4642      	mov	r2, r8
 8002cf6:	4631      	mov	r1, r6
 8002cf8:	4628      	mov	r0, r5
 8002cfa:	47b8      	blx	r7
 8002cfc:	3001      	adds	r0, #1
 8002cfe:	d12b      	bne.n	8002d58 <_printf_float+0x254>
 8002d00:	e761      	b.n	8002bc6 <_printf_float+0xc2>
 8002d02:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8002d06:	f240 80e2 	bls.w	8002ece <_printf_float+0x3ca>
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002d12:	f7fd fef5 	bl	8000b00 <__aeabi_dcmpeq>
 8002d16:	2800      	cmp	r0, #0
 8002d18:	d03c      	beq.n	8002d94 <_printf_float+0x290>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	4a38      	ldr	r2, [pc, #224]	; (8002e00 <_printf_float+0x2fc>)
 8002d1e:	4631      	mov	r1, r6
 8002d20:	4628      	mov	r0, r5
 8002d22:	47b8      	blx	r7
 8002d24:	3001      	adds	r0, #1
 8002d26:	f43f af4e 	beq.w	8002bc6 <_printf_float+0xc2>
 8002d2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	db02      	blt.n	8002d38 <_printf_float+0x234>
 8002d32:	6823      	ldr	r3, [r4, #0]
 8002d34:	07d8      	lsls	r0, r3, #31
 8002d36:	d50f      	bpl.n	8002d58 <_printf_float+0x254>
 8002d38:	9b05      	ldr	r3, [sp, #20]
 8002d3a:	9a04      	ldr	r2, [sp, #16]
 8002d3c:	4631      	mov	r1, r6
 8002d3e:	4628      	mov	r0, r5
 8002d40:	47b8      	blx	r7
 8002d42:	3001      	adds	r0, #1
 8002d44:	f43f af3f 	beq.w	8002bc6 <_printf_float+0xc2>
 8002d48:	f04f 0800 	mov.w	r8, #0
 8002d4c:	f104 091a 	add.w	r9, r4, #26
 8002d50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d52:	3b01      	subs	r3, #1
 8002d54:	4598      	cmp	r8, r3
 8002d56:	db12      	blt.n	8002d7e <_printf_float+0x27a>
 8002d58:	6823      	ldr	r3, [r4, #0]
 8002d5a:	079b      	lsls	r3, r3, #30
 8002d5c:	d509      	bpl.n	8002d72 <_printf_float+0x26e>
 8002d5e:	f04f 0800 	mov.w	r8, #0
 8002d62:	f104 0919 	add.w	r9, r4, #25
 8002d66:	68e3      	ldr	r3, [r4, #12]
 8002d68:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002d6a:	1a9b      	subs	r3, r3, r2
 8002d6c:	4598      	cmp	r8, r3
 8002d6e:	f2c0 80ee 	blt.w	8002f4e <_printf_float+0x44a>
 8002d72:	68e0      	ldr	r0, [r4, #12]
 8002d74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002d76:	4298      	cmp	r0, r3
 8002d78:	bfb8      	it	lt
 8002d7a:	4618      	movlt	r0, r3
 8002d7c:	e725      	b.n	8002bca <_printf_float+0xc6>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	464a      	mov	r2, r9
 8002d82:	4631      	mov	r1, r6
 8002d84:	4628      	mov	r0, r5
 8002d86:	47b8      	blx	r7
 8002d88:	3001      	adds	r0, #1
 8002d8a:	f43f af1c 	beq.w	8002bc6 <_printf_float+0xc2>
 8002d8e:	f108 0801 	add.w	r8, r8, #1
 8002d92:	e7dd      	b.n	8002d50 <_printf_float+0x24c>
 8002d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	dc34      	bgt.n	8002e04 <_printf_float+0x300>
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	4a18      	ldr	r2, [pc, #96]	; (8002e00 <_printf_float+0x2fc>)
 8002d9e:	4631      	mov	r1, r6
 8002da0:	4628      	mov	r0, r5
 8002da2:	47b8      	blx	r7
 8002da4:	3001      	adds	r0, #1
 8002da6:	f43f af0e 	beq.w	8002bc6 <_printf_float+0xc2>
 8002daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dac:	b923      	cbnz	r3, 8002db8 <_printf_float+0x2b4>
 8002dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002db0:	b913      	cbnz	r3, 8002db8 <_printf_float+0x2b4>
 8002db2:	6823      	ldr	r3, [r4, #0]
 8002db4:	07d9      	lsls	r1, r3, #31
 8002db6:	d5cf      	bpl.n	8002d58 <_printf_float+0x254>
 8002db8:	9b05      	ldr	r3, [sp, #20]
 8002dba:	9a04      	ldr	r2, [sp, #16]
 8002dbc:	4631      	mov	r1, r6
 8002dbe:	4628      	mov	r0, r5
 8002dc0:	47b8      	blx	r7
 8002dc2:	3001      	adds	r0, #1
 8002dc4:	f43f aeff 	beq.w	8002bc6 <_printf_float+0xc2>
 8002dc8:	f04f 0900 	mov.w	r9, #0
 8002dcc:	f104 0a1a 	add.w	sl, r4, #26
 8002dd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dd2:	425b      	negs	r3, r3
 8002dd4:	4599      	cmp	r9, r3
 8002dd6:	db01      	blt.n	8002ddc <_printf_float+0x2d8>
 8002dd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002dda:	e78b      	b.n	8002cf4 <_printf_float+0x1f0>
 8002ddc:	2301      	movs	r3, #1
 8002dde:	4652      	mov	r2, sl
 8002de0:	4631      	mov	r1, r6
 8002de2:	4628      	mov	r0, r5
 8002de4:	47b8      	blx	r7
 8002de6:	3001      	adds	r0, #1
 8002de8:	f43f aeed 	beq.w	8002bc6 <_printf_float+0xc2>
 8002dec:	f109 0901 	add.w	r9, r9, #1
 8002df0:	e7ee      	b.n	8002dd0 <_printf_float+0x2cc>
 8002df2:	bf00      	nop
 8002df4:	7fefffff 	.word	0x7fefffff
 8002df8:	08005114 	.word	0x08005114
 8002dfc:	08005118 	.word	0x08005118
 8002e00:	08005124 	.word	0x08005124
 8002e04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002e06:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	bfa8      	it	ge
 8002e0c:	461a      	movge	r2, r3
 8002e0e:	2a00      	cmp	r2, #0
 8002e10:	4691      	mov	r9, r2
 8002e12:	dc38      	bgt.n	8002e86 <_printf_float+0x382>
 8002e14:	f104 031a 	add.w	r3, r4, #26
 8002e18:	f04f 0b00 	mov.w	fp, #0
 8002e1c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002e20:	9306      	str	r3, [sp, #24]
 8002e22:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002e26:	ebaa 0309 	sub.w	r3, sl, r9
 8002e2a:	459b      	cmp	fp, r3
 8002e2c:	db33      	blt.n	8002e96 <_printf_float+0x392>
 8002e2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e32:	429a      	cmp	r2, r3
 8002e34:	db3a      	blt.n	8002eac <_printf_float+0x3a8>
 8002e36:	6823      	ldr	r3, [r4, #0]
 8002e38:	07da      	lsls	r2, r3, #31
 8002e3a:	d437      	bmi.n	8002eac <_printf_float+0x3a8>
 8002e3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e3e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002e40:	eba3 020a 	sub.w	r2, r3, sl
 8002e44:	eba3 0901 	sub.w	r9, r3, r1
 8002e48:	4591      	cmp	r9, r2
 8002e4a:	bfa8      	it	ge
 8002e4c:	4691      	movge	r9, r2
 8002e4e:	f1b9 0f00 	cmp.w	r9, #0
 8002e52:	dc33      	bgt.n	8002ebc <_printf_float+0x3b8>
 8002e54:	f04f 0800 	mov.w	r8, #0
 8002e58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002e5c:	f104 0a1a 	add.w	sl, r4, #26
 8002e60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002e62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e64:	1a9b      	subs	r3, r3, r2
 8002e66:	eba3 0309 	sub.w	r3, r3, r9
 8002e6a:	4598      	cmp	r8, r3
 8002e6c:	f6bf af74 	bge.w	8002d58 <_printf_float+0x254>
 8002e70:	2301      	movs	r3, #1
 8002e72:	4652      	mov	r2, sl
 8002e74:	4631      	mov	r1, r6
 8002e76:	4628      	mov	r0, r5
 8002e78:	47b8      	blx	r7
 8002e7a:	3001      	adds	r0, #1
 8002e7c:	f43f aea3 	beq.w	8002bc6 <_printf_float+0xc2>
 8002e80:	f108 0801 	add.w	r8, r8, #1
 8002e84:	e7ec      	b.n	8002e60 <_printf_float+0x35c>
 8002e86:	4613      	mov	r3, r2
 8002e88:	4631      	mov	r1, r6
 8002e8a:	4642      	mov	r2, r8
 8002e8c:	4628      	mov	r0, r5
 8002e8e:	47b8      	blx	r7
 8002e90:	3001      	adds	r0, #1
 8002e92:	d1bf      	bne.n	8002e14 <_printf_float+0x310>
 8002e94:	e697      	b.n	8002bc6 <_printf_float+0xc2>
 8002e96:	2301      	movs	r3, #1
 8002e98:	9a06      	ldr	r2, [sp, #24]
 8002e9a:	4631      	mov	r1, r6
 8002e9c:	4628      	mov	r0, r5
 8002e9e:	47b8      	blx	r7
 8002ea0:	3001      	adds	r0, #1
 8002ea2:	f43f ae90 	beq.w	8002bc6 <_printf_float+0xc2>
 8002ea6:	f10b 0b01 	add.w	fp, fp, #1
 8002eaa:	e7ba      	b.n	8002e22 <_printf_float+0x31e>
 8002eac:	9b05      	ldr	r3, [sp, #20]
 8002eae:	9a04      	ldr	r2, [sp, #16]
 8002eb0:	4631      	mov	r1, r6
 8002eb2:	4628      	mov	r0, r5
 8002eb4:	47b8      	blx	r7
 8002eb6:	3001      	adds	r0, #1
 8002eb8:	d1c0      	bne.n	8002e3c <_printf_float+0x338>
 8002eba:	e684      	b.n	8002bc6 <_printf_float+0xc2>
 8002ebc:	464b      	mov	r3, r9
 8002ebe:	eb08 020a 	add.w	r2, r8, sl
 8002ec2:	4631      	mov	r1, r6
 8002ec4:	4628      	mov	r0, r5
 8002ec6:	47b8      	blx	r7
 8002ec8:	3001      	adds	r0, #1
 8002eca:	d1c3      	bne.n	8002e54 <_printf_float+0x350>
 8002ecc:	e67b      	b.n	8002bc6 <_printf_float+0xc2>
 8002ece:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002ed0:	2a01      	cmp	r2, #1
 8002ed2:	dc01      	bgt.n	8002ed8 <_printf_float+0x3d4>
 8002ed4:	07db      	lsls	r3, r3, #31
 8002ed6:	d537      	bpl.n	8002f48 <_printf_float+0x444>
 8002ed8:	2301      	movs	r3, #1
 8002eda:	4642      	mov	r2, r8
 8002edc:	4631      	mov	r1, r6
 8002ede:	4628      	mov	r0, r5
 8002ee0:	47b8      	blx	r7
 8002ee2:	3001      	adds	r0, #1
 8002ee4:	f43f ae6f 	beq.w	8002bc6 <_printf_float+0xc2>
 8002ee8:	9b05      	ldr	r3, [sp, #20]
 8002eea:	9a04      	ldr	r2, [sp, #16]
 8002eec:	4631      	mov	r1, r6
 8002eee:	4628      	mov	r0, r5
 8002ef0:	47b8      	blx	r7
 8002ef2:	3001      	adds	r0, #1
 8002ef4:	f43f ae67 	beq.w	8002bc6 <_printf_float+0xc2>
 8002ef8:	2200      	movs	r2, #0
 8002efa:	2300      	movs	r3, #0
 8002efc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002f00:	f7fd fdfe 	bl	8000b00 <__aeabi_dcmpeq>
 8002f04:	b158      	cbz	r0, 8002f1e <_printf_float+0x41a>
 8002f06:	f04f 0800 	mov.w	r8, #0
 8002f0a:	f104 0a1a 	add.w	sl, r4, #26
 8002f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f10:	3b01      	subs	r3, #1
 8002f12:	4598      	cmp	r8, r3
 8002f14:	db0d      	blt.n	8002f32 <_printf_float+0x42e>
 8002f16:	464b      	mov	r3, r9
 8002f18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002f1c:	e6eb      	b.n	8002cf6 <_printf_float+0x1f2>
 8002f1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f20:	f108 0201 	add.w	r2, r8, #1
 8002f24:	3b01      	subs	r3, #1
 8002f26:	4631      	mov	r1, r6
 8002f28:	4628      	mov	r0, r5
 8002f2a:	47b8      	blx	r7
 8002f2c:	3001      	adds	r0, #1
 8002f2e:	d1f2      	bne.n	8002f16 <_printf_float+0x412>
 8002f30:	e649      	b.n	8002bc6 <_printf_float+0xc2>
 8002f32:	2301      	movs	r3, #1
 8002f34:	4652      	mov	r2, sl
 8002f36:	4631      	mov	r1, r6
 8002f38:	4628      	mov	r0, r5
 8002f3a:	47b8      	blx	r7
 8002f3c:	3001      	adds	r0, #1
 8002f3e:	f43f ae42 	beq.w	8002bc6 <_printf_float+0xc2>
 8002f42:	f108 0801 	add.w	r8, r8, #1
 8002f46:	e7e2      	b.n	8002f0e <_printf_float+0x40a>
 8002f48:	2301      	movs	r3, #1
 8002f4a:	4642      	mov	r2, r8
 8002f4c:	e7eb      	b.n	8002f26 <_printf_float+0x422>
 8002f4e:	2301      	movs	r3, #1
 8002f50:	464a      	mov	r2, r9
 8002f52:	4631      	mov	r1, r6
 8002f54:	4628      	mov	r0, r5
 8002f56:	47b8      	blx	r7
 8002f58:	3001      	adds	r0, #1
 8002f5a:	f43f ae34 	beq.w	8002bc6 <_printf_float+0xc2>
 8002f5e:	f108 0801 	add.w	r8, r8, #1
 8002f62:	e700      	b.n	8002d66 <_printf_float+0x262>
 8002f64:	4642      	mov	r2, r8
 8002f66:	464b      	mov	r3, r9
 8002f68:	4640      	mov	r0, r8
 8002f6a:	4649      	mov	r1, r9
 8002f6c:	f7fd fdfa 	bl	8000b64 <__aeabi_dcmpun>
 8002f70:	2800      	cmp	r0, #0
 8002f72:	f43f ae2d 	beq.w	8002bd0 <_printf_float+0xcc>
 8002f76:	4b01      	ldr	r3, [pc, #4]	; (8002f7c <_printf_float+0x478>)
 8002f78:	4a01      	ldr	r2, [pc, #4]	; (8002f80 <_printf_float+0x47c>)
 8002f7a:	e60e      	b.n	8002b9a <_printf_float+0x96>
 8002f7c:	0800511c 	.word	0x0800511c
 8002f80:	08005120 	.word	0x08005120

08002f84 <_printf_common>:
 8002f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f88:	4691      	mov	r9, r2
 8002f8a:	461f      	mov	r7, r3
 8002f8c:	688a      	ldr	r2, [r1, #8]
 8002f8e:	690b      	ldr	r3, [r1, #16]
 8002f90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f94:	4293      	cmp	r3, r2
 8002f96:	bfb8      	it	lt
 8002f98:	4613      	movlt	r3, r2
 8002f9a:	f8c9 3000 	str.w	r3, [r9]
 8002f9e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002fa2:	4606      	mov	r6, r0
 8002fa4:	460c      	mov	r4, r1
 8002fa6:	b112      	cbz	r2, 8002fae <_printf_common+0x2a>
 8002fa8:	3301      	adds	r3, #1
 8002faa:	f8c9 3000 	str.w	r3, [r9]
 8002fae:	6823      	ldr	r3, [r4, #0]
 8002fb0:	0699      	lsls	r1, r3, #26
 8002fb2:	bf42      	ittt	mi
 8002fb4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002fb8:	3302      	addmi	r3, #2
 8002fba:	f8c9 3000 	strmi.w	r3, [r9]
 8002fbe:	6825      	ldr	r5, [r4, #0]
 8002fc0:	f015 0506 	ands.w	r5, r5, #6
 8002fc4:	d107      	bne.n	8002fd6 <_printf_common+0x52>
 8002fc6:	f104 0a19 	add.w	sl, r4, #25
 8002fca:	68e3      	ldr	r3, [r4, #12]
 8002fcc:	f8d9 2000 	ldr.w	r2, [r9]
 8002fd0:	1a9b      	subs	r3, r3, r2
 8002fd2:	429d      	cmp	r5, r3
 8002fd4:	db29      	blt.n	800302a <_printf_common+0xa6>
 8002fd6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002fda:	6822      	ldr	r2, [r4, #0]
 8002fdc:	3300      	adds	r3, #0
 8002fde:	bf18      	it	ne
 8002fe0:	2301      	movne	r3, #1
 8002fe2:	0692      	lsls	r2, r2, #26
 8002fe4:	d42e      	bmi.n	8003044 <_printf_common+0xc0>
 8002fe6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002fea:	4639      	mov	r1, r7
 8002fec:	4630      	mov	r0, r6
 8002fee:	47c0      	blx	r8
 8002ff0:	3001      	adds	r0, #1
 8002ff2:	d021      	beq.n	8003038 <_printf_common+0xb4>
 8002ff4:	6823      	ldr	r3, [r4, #0]
 8002ff6:	68e5      	ldr	r5, [r4, #12]
 8002ff8:	f8d9 2000 	ldr.w	r2, [r9]
 8002ffc:	f003 0306 	and.w	r3, r3, #6
 8003000:	2b04      	cmp	r3, #4
 8003002:	bf08      	it	eq
 8003004:	1aad      	subeq	r5, r5, r2
 8003006:	68a3      	ldr	r3, [r4, #8]
 8003008:	6922      	ldr	r2, [r4, #16]
 800300a:	bf0c      	ite	eq
 800300c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003010:	2500      	movne	r5, #0
 8003012:	4293      	cmp	r3, r2
 8003014:	bfc4      	itt	gt
 8003016:	1a9b      	subgt	r3, r3, r2
 8003018:	18ed      	addgt	r5, r5, r3
 800301a:	f04f 0900 	mov.w	r9, #0
 800301e:	341a      	adds	r4, #26
 8003020:	454d      	cmp	r5, r9
 8003022:	d11b      	bne.n	800305c <_printf_common+0xd8>
 8003024:	2000      	movs	r0, #0
 8003026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800302a:	2301      	movs	r3, #1
 800302c:	4652      	mov	r2, sl
 800302e:	4639      	mov	r1, r7
 8003030:	4630      	mov	r0, r6
 8003032:	47c0      	blx	r8
 8003034:	3001      	adds	r0, #1
 8003036:	d103      	bne.n	8003040 <_printf_common+0xbc>
 8003038:	f04f 30ff 	mov.w	r0, #4294967295
 800303c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003040:	3501      	adds	r5, #1
 8003042:	e7c2      	b.n	8002fca <_printf_common+0x46>
 8003044:	18e1      	adds	r1, r4, r3
 8003046:	1c5a      	adds	r2, r3, #1
 8003048:	2030      	movs	r0, #48	; 0x30
 800304a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800304e:	4422      	add	r2, r4
 8003050:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003054:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003058:	3302      	adds	r3, #2
 800305a:	e7c4      	b.n	8002fe6 <_printf_common+0x62>
 800305c:	2301      	movs	r3, #1
 800305e:	4622      	mov	r2, r4
 8003060:	4639      	mov	r1, r7
 8003062:	4630      	mov	r0, r6
 8003064:	47c0      	blx	r8
 8003066:	3001      	adds	r0, #1
 8003068:	d0e6      	beq.n	8003038 <_printf_common+0xb4>
 800306a:	f109 0901 	add.w	r9, r9, #1
 800306e:	e7d7      	b.n	8003020 <_printf_common+0x9c>

08003070 <_printf_i>:
 8003070:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003074:	4617      	mov	r7, r2
 8003076:	7e0a      	ldrb	r2, [r1, #24]
 8003078:	b085      	sub	sp, #20
 800307a:	2a6e      	cmp	r2, #110	; 0x6e
 800307c:	4698      	mov	r8, r3
 800307e:	4606      	mov	r6, r0
 8003080:	460c      	mov	r4, r1
 8003082:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003084:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8003088:	f000 80bc 	beq.w	8003204 <_printf_i+0x194>
 800308c:	d81a      	bhi.n	80030c4 <_printf_i+0x54>
 800308e:	2a63      	cmp	r2, #99	; 0x63
 8003090:	d02e      	beq.n	80030f0 <_printf_i+0x80>
 8003092:	d80a      	bhi.n	80030aa <_printf_i+0x3a>
 8003094:	2a00      	cmp	r2, #0
 8003096:	f000 80c8 	beq.w	800322a <_printf_i+0x1ba>
 800309a:	2a58      	cmp	r2, #88	; 0x58
 800309c:	f000 808a 	beq.w	80031b4 <_printf_i+0x144>
 80030a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030a4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80030a8:	e02a      	b.n	8003100 <_printf_i+0x90>
 80030aa:	2a64      	cmp	r2, #100	; 0x64
 80030ac:	d001      	beq.n	80030b2 <_printf_i+0x42>
 80030ae:	2a69      	cmp	r2, #105	; 0x69
 80030b0:	d1f6      	bne.n	80030a0 <_printf_i+0x30>
 80030b2:	6821      	ldr	r1, [r4, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80030ba:	d023      	beq.n	8003104 <_printf_i+0x94>
 80030bc:	1d11      	adds	r1, r2, #4
 80030be:	6019      	str	r1, [r3, #0]
 80030c0:	6813      	ldr	r3, [r2, #0]
 80030c2:	e027      	b.n	8003114 <_printf_i+0xa4>
 80030c4:	2a73      	cmp	r2, #115	; 0x73
 80030c6:	f000 80b4 	beq.w	8003232 <_printf_i+0x1c2>
 80030ca:	d808      	bhi.n	80030de <_printf_i+0x6e>
 80030cc:	2a6f      	cmp	r2, #111	; 0x6f
 80030ce:	d02a      	beq.n	8003126 <_printf_i+0xb6>
 80030d0:	2a70      	cmp	r2, #112	; 0x70
 80030d2:	d1e5      	bne.n	80030a0 <_printf_i+0x30>
 80030d4:	680a      	ldr	r2, [r1, #0]
 80030d6:	f042 0220 	orr.w	r2, r2, #32
 80030da:	600a      	str	r2, [r1, #0]
 80030dc:	e003      	b.n	80030e6 <_printf_i+0x76>
 80030de:	2a75      	cmp	r2, #117	; 0x75
 80030e0:	d021      	beq.n	8003126 <_printf_i+0xb6>
 80030e2:	2a78      	cmp	r2, #120	; 0x78
 80030e4:	d1dc      	bne.n	80030a0 <_printf_i+0x30>
 80030e6:	2278      	movs	r2, #120	; 0x78
 80030e8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80030ec:	496e      	ldr	r1, [pc, #440]	; (80032a8 <_printf_i+0x238>)
 80030ee:	e064      	b.n	80031ba <_printf_i+0x14a>
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80030f6:	1d11      	adds	r1, r2, #4
 80030f8:	6019      	str	r1, [r3, #0]
 80030fa:	6813      	ldr	r3, [r2, #0]
 80030fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003100:	2301      	movs	r3, #1
 8003102:	e0a3      	b.n	800324c <_printf_i+0x1dc>
 8003104:	f011 0f40 	tst.w	r1, #64	; 0x40
 8003108:	f102 0104 	add.w	r1, r2, #4
 800310c:	6019      	str	r1, [r3, #0]
 800310e:	d0d7      	beq.n	80030c0 <_printf_i+0x50>
 8003110:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003114:	2b00      	cmp	r3, #0
 8003116:	da03      	bge.n	8003120 <_printf_i+0xb0>
 8003118:	222d      	movs	r2, #45	; 0x2d
 800311a:	425b      	negs	r3, r3
 800311c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003120:	4962      	ldr	r1, [pc, #392]	; (80032ac <_printf_i+0x23c>)
 8003122:	220a      	movs	r2, #10
 8003124:	e017      	b.n	8003156 <_printf_i+0xe6>
 8003126:	6820      	ldr	r0, [r4, #0]
 8003128:	6819      	ldr	r1, [r3, #0]
 800312a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800312e:	d003      	beq.n	8003138 <_printf_i+0xc8>
 8003130:	1d08      	adds	r0, r1, #4
 8003132:	6018      	str	r0, [r3, #0]
 8003134:	680b      	ldr	r3, [r1, #0]
 8003136:	e006      	b.n	8003146 <_printf_i+0xd6>
 8003138:	f010 0f40 	tst.w	r0, #64	; 0x40
 800313c:	f101 0004 	add.w	r0, r1, #4
 8003140:	6018      	str	r0, [r3, #0]
 8003142:	d0f7      	beq.n	8003134 <_printf_i+0xc4>
 8003144:	880b      	ldrh	r3, [r1, #0]
 8003146:	4959      	ldr	r1, [pc, #356]	; (80032ac <_printf_i+0x23c>)
 8003148:	2a6f      	cmp	r2, #111	; 0x6f
 800314a:	bf14      	ite	ne
 800314c:	220a      	movne	r2, #10
 800314e:	2208      	moveq	r2, #8
 8003150:	2000      	movs	r0, #0
 8003152:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8003156:	6865      	ldr	r5, [r4, #4]
 8003158:	60a5      	str	r5, [r4, #8]
 800315a:	2d00      	cmp	r5, #0
 800315c:	f2c0 809c 	blt.w	8003298 <_printf_i+0x228>
 8003160:	6820      	ldr	r0, [r4, #0]
 8003162:	f020 0004 	bic.w	r0, r0, #4
 8003166:	6020      	str	r0, [r4, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d13f      	bne.n	80031ec <_printf_i+0x17c>
 800316c:	2d00      	cmp	r5, #0
 800316e:	f040 8095 	bne.w	800329c <_printf_i+0x22c>
 8003172:	4675      	mov	r5, lr
 8003174:	2a08      	cmp	r2, #8
 8003176:	d10b      	bne.n	8003190 <_printf_i+0x120>
 8003178:	6823      	ldr	r3, [r4, #0]
 800317a:	07da      	lsls	r2, r3, #31
 800317c:	d508      	bpl.n	8003190 <_printf_i+0x120>
 800317e:	6923      	ldr	r3, [r4, #16]
 8003180:	6862      	ldr	r2, [r4, #4]
 8003182:	429a      	cmp	r2, r3
 8003184:	bfde      	ittt	le
 8003186:	2330      	movle	r3, #48	; 0x30
 8003188:	f805 3c01 	strble.w	r3, [r5, #-1]
 800318c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003190:	ebae 0305 	sub.w	r3, lr, r5
 8003194:	6123      	str	r3, [r4, #16]
 8003196:	f8cd 8000 	str.w	r8, [sp]
 800319a:	463b      	mov	r3, r7
 800319c:	aa03      	add	r2, sp, #12
 800319e:	4621      	mov	r1, r4
 80031a0:	4630      	mov	r0, r6
 80031a2:	f7ff feef 	bl	8002f84 <_printf_common>
 80031a6:	3001      	adds	r0, #1
 80031a8:	d155      	bne.n	8003256 <_printf_i+0x1e6>
 80031aa:	f04f 30ff 	mov.w	r0, #4294967295
 80031ae:	b005      	add	sp, #20
 80031b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80031b4:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80031b8:	493c      	ldr	r1, [pc, #240]	; (80032ac <_printf_i+0x23c>)
 80031ba:	6822      	ldr	r2, [r4, #0]
 80031bc:	6818      	ldr	r0, [r3, #0]
 80031be:	f012 0f80 	tst.w	r2, #128	; 0x80
 80031c2:	f100 0504 	add.w	r5, r0, #4
 80031c6:	601d      	str	r5, [r3, #0]
 80031c8:	d001      	beq.n	80031ce <_printf_i+0x15e>
 80031ca:	6803      	ldr	r3, [r0, #0]
 80031cc:	e002      	b.n	80031d4 <_printf_i+0x164>
 80031ce:	0655      	lsls	r5, r2, #25
 80031d0:	d5fb      	bpl.n	80031ca <_printf_i+0x15a>
 80031d2:	8803      	ldrh	r3, [r0, #0]
 80031d4:	07d0      	lsls	r0, r2, #31
 80031d6:	bf44      	itt	mi
 80031d8:	f042 0220 	orrmi.w	r2, r2, #32
 80031dc:	6022      	strmi	r2, [r4, #0]
 80031de:	b91b      	cbnz	r3, 80031e8 <_printf_i+0x178>
 80031e0:	6822      	ldr	r2, [r4, #0]
 80031e2:	f022 0220 	bic.w	r2, r2, #32
 80031e6:	6022      	str	r2, [r4, #0]
 80031e8:	2210      	movs	r2, #16
 80031ea:	e7b1      	b.n	8003150 <_printf_i+0xe0>
 80031ec:	4675      	mov	r5, lr
 80031ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80031f2:	fb02 3310 	mls	r3, r2, r0, r3
 80031f6:	5ccb      	ldrb	r3, [r1, r3]
 80031f8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80031fc:	4603      	mov	r3, r0
 80031fe:	2800      	cmp	r0, #0
 8003200:	d1f5      	bne.n	80031ee <_printf_i+0x17e>
 8003202:	e7b7      	b.n	8003174 <_printf_i+0x104>
 8003204:	6808      	ldr	r0, [r1, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	6949      	ldr	r1, [r1, #20]
 800320a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800320e:	d004      	beq.n	800321a <_printf_i+0x1aa>
 8003210:	1d10      	adds	r0, r2, #4
 8003212:	6018      	str	r0, [r3, #0]
 8003214:	6813      	ldr	r3, [r2, #0]
 8003216:	6019      	str	r1, [r3, #0]
 8003218:	e007      	b.n	800322a <_printf_i+0x1ba>
 800321a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800321e:	f102 0004 	add.w	r0, r2, #4
 8003222:	6018      	str	r0, [r3, #0]
 8003224:	6813      	ldr	r3, [r2, #0]
 8003226:	d0f6      	beq.n	8003216 <_printf_i+0x1a6>
 8003228:	8019      	strh	r1, [r3, #0]
 800322a:	2300      	movs	r3, #0
 800322c:	6123      	str	r3, [r4, #16]
 800322e:	4675      	mov	r5, lr
 8003230:	e7b1      	b.n	8003196 <_printf_i+0x126>
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	1d11      	adds	r1, r2, #4
 8003236:	6019      	str	r1, [r3, #0]
 8003238:	6815      	ldr	r5, [r2, #0]
 800323a:	6862      	ldr	r2, [r4, #4]
 800323c:	2100      	movs	r1, #0
 800323e:	4628      	mov	r0, r5
 8003240:	f7fc ffee 	bl	8000220 <memchr>
 8003244:	b108      	cbz	r0, 800324a <_printf_i+0x1da>
 8003246:	1b40      	subs	r0, r0, r5
 8003248:	6060      	str	r0, [r4, #4]
 800324a:	6863      	ldr	r3, [r4, #4]
 800324c:	6123      	str	r3, [r4, #16]
 800324e:	2300      	movs	r3, #0
 8003250:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003254:	e79f      	b.n	8003196 <_printf_i+0x126>
 8003256:	6923      	ldr	r3, [r4, #16]
 8003258:	462a      	mov	r2, r5
 800325a:	4639      	mov	r1, r7
 800325c:	4630      	mov	r0, r6
 800325e:	47c0      	blx	r8
 8003260:	3001      	adds	r0, #1
 8003262:	d0a2      	beq.n	80031aa <_printf_i+0x13a>
 8003264:	6823      	ldr	r3, [r4, #0]
 8003266:	079b      	lsls	r3, r3, #30
 8003268:	d507      	bpl.n	800327a <_printf_i+0x20a>
 800326a:	2500      	movs	r5, #0
 800326c:	f104 0919 	add.w	r9, r4, #25
 8003270:	68e3      	ldr	r3, [r4, #12]
 8003272:	9a03      	ldr	r2, [sp, #12]
 8003274:	1a9b      	subs	r3, r3, r2
 8003276:	429d      	cmp	r5, r3
 8003278:	db05      	blt.n	8003286 <_printf_i+0x216>
 800327a:	68e0      	ldr	r0, [r4, #12]
 800327c:	9b03      	ldr	r3, [sp, #12]
 800327e:	4298      	cmp	r0, r3
 8003280:	bfb8      	it	lt
 8003282:	4618      	movlt	r0, r3
 8003284:	e793      	b.n	80031ae <_printf_i+0x13e>
 8003286:	2301      	movs	r3, #1
 8003288:	464a      	mov	r2, r9
 800328a:	4639      	mov	r1, r7
 800328c:	4630      	mov	r0, r6
 800328e:	47c0      	blx	r8
 8003290:	3001      	adds	r0, #1
 8003292:	d08a      	beq.n	80031aa <_printf_i+0x13a>
 8003294:	3501      	adds	r5, #1
 8003296:	e7eb      	b.n	8003270 <_printf_i+0x200>
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1a7      	bne.n	80031ec <_printf_i+0x17c>
 800329c:	780b      	ldrb	r3, [r1, #0]
 800329e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80032a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80032a6:	e765      	b.n	8003174 <_printf_i+0x104>
 80032a8:	08005137 	.word	0x08005137
 80032ac:	08005126 	.word	0x08005126

080032b0 <iprintf>:
 80032b0:	b40f      	push	{r0, r1, r2, r3}
 80032b2:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <iprintf+0x2c>)
 80032b4:	b513      	push	{r0, r1, r4, lr}
 80032b6:	681c      	ldr	r4, [r3, #0]
 80032b8:	b124      	cbz	r4, 80032c4 <iprintf+0x14>
 80032ba:	69a3      	ldr	r3, [r4, #24]
 80032bc:	b913      	cbnz	r3, 80032c4 <iprintf+0x14>
 80032be:	4620      	mov	r0, r4
 80032c0:	f000 fea8 	bl	8004014 <__sinit>
 80032c4:	ab05      	add	r3, sp, #20
 80032c6:	9a04      	ldr	r2, [sp, #16]
 80032c8:	68a1      	ldr	r1, [r4, #8]
 80032ca:	9301      	str	r3, [sp, #4]
 80032cc:	4620      	mov	r0, r4
 80032ce:	f001 fb09 	bl	80048e4 <_vfiprintf_r>
 80032d2:	b002      	add	sp, #8
 80032d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032d8:	b004      	add	sp, #16
 80032da:	4770      	bx	lr
 80032dc:	2000000c 	.word	0x2000000c

080032e0 <quorem>:
 80032e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032e4:	6903      	ldr	r3, [r0, #16]
 80032e6:	690c      	ldr	r4, [r1, #16]
 80032e8:	429c      	cmp	r4, r3
 80032ea:	4680      	mov	r8, r0
 80032ec:	f300 8082 	bgt.w	80033f4 <quorem+0x114>
 80032f0:	3c01      	subs	r4, #1
 80032f2:	f101 0714 	add.w	r7, r1, #20
 80032f6:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80032fa:	f100 0614 	add.w	r6, r0, #20
 80032fe:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8003302:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003306:	eb06 030e 	add.w	r3, r6, lr
 800330a:	3501      	adds	r5, #1
 800330c:	eb07 090e 	add.w	r9, r7, lr
 8003310:	9301      	str	r3, [sp, #4]
 8003312:	fbb0 f5f5 	udiv	r5, r0, r5
 8003316:	b395      	cbz	r5, 800337e <quorem+0x9e>
 8003318:	f04f 0a00 	mov.w	sl, #0
 800331c:	4638      	mov	r0, r7
 800331e:	46b4      	mov	ip, r6
 8003320:	46d3      	mov	fp, sl
 8003322:	f850 2b04 	ldr.w	r2, [r0], #4
 8003326:	b293      	uxth	r3, r2
 8003328:	fb05 a303 	mla	r3, r5, r3, sl
 800332c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8003330:	b29b      	uxth	r3, r3
 8003332:	ebab 0303 	sub.w	r3, fp, r3
 8003336:	0c12      	lsrs	r2, r2, #16
 8003338:	f8bc b000 	ldrh.w	fp, [ip]
 800333c:	fb05 a202 	mla	r2, r5, r2, sl
 8003340:	fa13 f38b 	uxtah	r3, r3, fp
 8003344:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8003348:	fa1f fb82 	uxth.w	fp, r2
 800334c:	f8dc 2000 	ldr.w	r2, [ip]
 8003350:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8003354:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003358:	b29b      	uxth	r3, r3
 800335a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800335e:	4581      	cmp	r9, r0
 8003360:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003364:	f84c 3b04 	str.w	r3, [ip], #4
 8003368:	d2db      	bcs.n	8003322 <quorem+0x42>
 800336a:	f856 300e 	ldr.w	r3, [r6, lr]
 800336e:	b933      	cbnz	r3, 800337e <quorem+0x9e>
 8003370:	9b01      	ldr	r3, [sp, #4]
 8003372:	3b04      	subs	r3, #4
 8003374:	429e      	cmp	r6, r3
 8003376:	461a      	mov	r2, r3
 8003378:	d330      	bcc.n	80033dc <quorem+0xfc>
 800337a:	f8c8 4010 	str.w	r4, [r8, #16]
 800337e:	4640      	mov	r0, r8
 8003380:	f001 f905 	bl	800458e <__mcmp>
 8003384:	2800      	cmp	r0, #0
 8003386:	db25      	blt.n	80033d4 <quorem+0xf4>
 8003388:	3501      	adds	r5, #1
 800338a:	4630      	mov	r0, r6
 800338c:	f04f 0e00 	mov.w	lr, #0
 8003390:	f857 2b04 	ldr.w	r2, [r7], #4
 8003394:	f8d0 c000 	ldr.w	ip, [r0]
 8003398:	b293      	uxth	r3, r2
 800339a:	ebae 0303 	sub.w	r3, lr, r3
 800339e:	0c12      	lsrs	r2, r2, #16
 80033a0:	fa13 f38c 	uxtah	r3, r3, ip
 80033a4:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80033a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80033b2:	45b9      	cmp	r9, r7
 80033b4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80033b8:	f840 3b04 	str.w	r3, [r0], #4
 80033bc:	d2e8      	bcs.n	8003390 <quorem+0xb0>
 80033be:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80033c2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80033c6:	b92a      	cbnz	r2, 80033d4 <quorem+0xf4>
 80033c8:	3b04      	subs	r3, #4
 80033ca:	429e      	cmp	r6, r3
 80033cc:	461a      	mov	r2, r3
 80033ce:	d30b      	bcc.n	80033e8 <quorem+0x108>
 80033d0:	f8c8 4010 	str.w	r4, [r8, #16]
 80033d4:	4628      	mov	r0, r5
 80033d6:	b003      	add	sp, #12
 80033d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033dc:	6812      	ldr	r2, [r2, #0]
 80033de:	3b04      	subs	r3, #4
 80033e0:	2a00      	cmp	r2, #0
 80033e2:	d1ca      	bne.n	800337a <quorem+0x9a>
 80033e4:	3c01      	subs	r4, #1
 80033e6:	e7c5      	b.n	8003374 <quorem+0x94>
 80033e8:	6812      	ldr	r2, [r2, #0]
 80033ea:	3b04      	subs	r3, #4
 80033ec:	2a00      	cmp	r2, #0
 80033ee:	d1ef      	bne.n	80033d0 <quorem+0xf0>
 80033f0:	3c01      	subs	r4, #1
 80033f2:	e7ea      	b.n	80033ca <quorem+0xea>
 80033f4:	2000      	movs	r0, #0
 80033f6:	e7ee      	b.n	80033d6 <quorem+0xf6>

080033f8 <_dtoa_r>:
 80033f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033fc:	ec57 6b10 	vmov	r6, r7, d0
 8003400:	b097      	sub	sp, #92	; 0x5c
 8003402:	e9cd 6700 	strd	r6, r7, [sp]
 8003406:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8003408:	9107      	str	r1, [sp, #28]
 800340a:	4604      	mov	r4, r0
 800340c:	920a      	str	r2, [sp, #40]	; 0x28
 800340e:	930f      	str	r3, [sp, #60]	; 0x3c
 8003410:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8003412:	b93e      	cbnz	r6, 8003424 <_dtoa_r+0x2c>
 8003414:	2010      	movs	r0, #16
 8003416:	f000 fe95 	bl	8004144 <malloc>
 800341a:	6260      	str	r0, [r4, #36]	; 0x24
 800341c:	6046      	str	r6, [r0, #4]
 800341e:	6086      	str	r6, [r0, #8]
 8003420:	6006      	str	r6, [r0, #0]
 8003422:	60c6      	str	r6, [r0, #12]
 8003424:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003426:	6819      	ldr	r1, [r3, #0]
 8003428:	b151      	cbz	r1, 8003440 <_dtoa_r+0x48>
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	604a      	str	r2, [r1, #4]
 800342e:	2301      	movs	r3, #1
 8003430:	4093      	lsls	r3, r2
 8003432:	608b      	str	r3, [r1, #8]
 8003434:	4620      	mov	r0, r4
 8003436:	f000 fed4 	bl	80041e2 <_Bfree>
 800343a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	9b01      	ldr	r3, [sp, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	bfbf      	itttt	lt
 8003446:	2301      	movlt	r3, #1
 8003448:	602b      	strlt	r3, [r5, #0]
 800344a:	9b01      	ldrlt	r3, [sp, #4]
 800344c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003450:	bfb2      	itee	lt
 8003452:	9301      	strlt	r3, [sp, #4]
 8003454:	2300      	movge	r3, #0
 8003456:	602b      	strge	r3, [r5, #0]
 8003458:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800345c:	4ba8      	ldr	r3, [pc, #672]	; (8003700 <_dtoa_r+0x308>)
 800345e:	ea33 0308 	bics.w	r3, r3, r8
 8003462:	d11b      	bne.n	800349c <_dtoa_r+0xa4>
 8003464:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003466:	f242 730f 	movw	r3, #9999	; 0x270f
 800346a:	6013      	str	r3, [r2, #0]
 800346c:	9b00      	ldr	r3, [sp, #0]
 800346e:	b923      	cbnz	r3, 800347a <_dtoa_r+0x82>
 8003470:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003474:	2800      	cmp	r0, #0
 8003476:	f000 8578 	beq.w	8003f6a <_dtoa_r+0xb72>
 800347a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800347c:	b953      	cbnz	r3, 8003494 <_dtoa_r+0x9c>
 800347e:	4ba1      	ldr	r3, [pc, #644]	; (8003704 <_dtoa_r+0x30c>)
 8003480:	e021      	b.n	80034c6 <_dtoa_r+0xce>
 8003482:	4ba1      	ldr	r3, [pc, #644]	; (8003708 <_dtoa_r+0x310>)
 8003484:	9302      	str	r3, [sp, #8]
 8003486:	3308      	adds	r3, #8
 8003488:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800348a:	6013      	str	r3, [r2, #0]
 800348c:	9802      	ldr	r0, [sp, #8]
 800348e:	b017      	add	sp, #92	; 0x5c
 8003490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003494:	4b9b      	ldr	r3, [pc, #620]	; (8003704 <_dtoa_r+0x30c>)
 8003496:	9302      	str	r3, [sp, #8]
 8003498:	3303      	adds	r3, #3
 800349a:	e7f5      	b.n	8003488 <_dtoa_r+0x90>
 800349c:	e9dd 6700 	ldrd	r6, r7, [sp]
 80034a0:	2200      	movs	r2, #0
 80034a2:	2300      	movs	r3, #0
 80034a4:	4630      	mov	r0, r6
 80034a6:	4639      	mov	r1, r7
 80034a8:	f7fd fb2a 	bl	8000b00 <__aeabi_dcmpeq>
 80034ac:	4681      	mov	r9, r0
 80034ae:	b160      	cbz	r0, 80034ca <_dtoa_r+0xd2>
 80034b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80034b2:	2301      	movs	r3, #1
 80034b4:	6013      	str	r3, [r2, #0]
 80034b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 8553 	beq.w	8003f64 <_dtoa_r+0xb6c>
 80034be:	4b93      	ldr	r3, [pc, #588]	; (800370c <_dtoa_r+0x314>)
 80034c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80034c2:	6013      	str	r3, [r2, #0]
 80034c4:	3b01      	subs	r3, #1
 80034c6:	9302      	str	r3, [sp, #8]
 80034c8:	e7e0      	b.n	800348c <_dtoa_r+0x94>
 80034ca:	aa14      	add	r2, sp, #80	; 0x50
 80034cc:	a915      	add	r1, sp, #84	; 0x54
 80034ce:	ec47 6b10 	vmov	d0, r6, r7
 80034d2:	4620      	mov	r0, r4
 80034d4:	f001 f8d3 	bl	800467e <__d2b>
 80034d8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80034dc:	4682      	mov	sl, r0
 80034de:	2d00      	cmp	r5, #0
 80034e0:	d07e      	beq.n	80035e0 <_dtoa_r+0x1e8>
 80034e2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80034e6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80034ea:	4630      	mov	r0, r6
 80034ec:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80034f0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80034f4:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 80034f8:	2200      	movs	r2, #0
 80034fa:	4b85      	ldr	r3, [pc, #532]	; (8003710 <_dtoa_r+0x318>)
 80034fc:	f7fc fee4 	bl	80002c8 <__aeabi_dsub>
 8003500:	a379      	add	r3, pc, #484	; (adr r3, 80036e8 <_dtoa_r+0x2f0>)
 8003502:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003506:	f7fd f893 	bl	8000630 <__aeabi_dmul>
 800350a:	a379      	add	r3, pc, #484	; (adr r3, 80036f0 <_dtoa_r+0x2f8>)
 800350c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003510:	f7fc fedc 	bl	80002cc <__adddf3>
 8003514:	4606      	mov	r6, r0
 8003516:	4628      	mov	r0, r5
 8003518:	460f      	mov	r7, r1
 800351a:	f7fd f823 	bl	8000564 <__aeabi_i2d>
 800351e:	a376      	add	r3, pc, #472	; (adr r3, 80036f8 <_dtoa_r+0x300>)
 8003520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003524:	f7fd f884 	bl	8000630 <__aeabi_dmul>
 8003528:	4602      	mov	r2, r0
 800352a:	460b      	mov	r3, r1
 800352c:	4630      	mov	r0, r6
 800352e:	4639      	mov	r1, r7
 8003530:	f7fc fecc 	bl	80002cc <__adddf3>
 8003534:	4606      	mov	r6, r0
 8003536:	460f      	mov	r7, r1
 8003538:	f7fd fb2a 	bl	8000b90 <__aeabi_d2iz>
 800353c:	2200      	movs	r2, #0
 800353e:	4683      	mov	fp, r0
 8003540:	2300      	movs	r3, #0
 8003542:	4630      	mov	r0, r6
 8003544:	4639      	mov	r1, r7
 8003546:	f7fd fae5 	bl	8000b14 <__aeabi_dcmplt>
 800354a:	b158      	cbz	r0, 8003564 <_dtoa_r+0x16c>
 800354c:	4658      	mov	r0, fp
 800354e:	f7fd f809 	bl	8000564 <__aeabi_i2d>
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	4630      	mov	r0, r6
 8003558:	4639      	mov	r1, r7
 800355a:	f7fd fad1 	bl	8000b00 <__aeabi_dcmpeq>
 800355e:	b908      	cbnz	r0, 8003564 <_dtoa_r+0x16c>
 8003560:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003564:	f1bb 0f16 	cmp.w	fp, #22
 8003568:	d859      	bhi.n	800361e <_dtoa_r+0x226>
 800356a:	496a      	ldr	r1, [pc, #424]	; (8003714 <_dtoa_r+0x31c>)
 800356c:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8003570:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003574:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003578:	f7fd faea 	bl	8000b50 <__aeabi_dcmpgt>
 800357c:	2800      	cmp	r0, #0
 800357e:	d050      	beq.n	8003622 <_dtoa_r+0x22a>
 8003580:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003584:	2300      	movs	r3, #0
 8003586:	930e      	str	r3, [sp, #56]	; 0x38
 8003588:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800358a:	1b5d      	subs	r5, r3, r5
 800358c:	1e6b      	subs	r3, r5, #1
 800358e:	9306      	str	r3, [sp, #24]
 8003590:	bf45      	ittet	mi
 8003592:	f1c5 0301 	rsbmi	r3, r5, #1
 8003596:	9305      	strmi	r3, [sp, #20]
 8003598:	2300      	movpl	r3, #0
 800359a:	2300      	movmi	r3, #0
 800359c:	bf4c      	ite	mi
 800359e:	9306      	strmi	r3, [sp, #24]
 80035a0:	9305      	strpl	r3, [sp, #20]
 80035a2:	f1bb 0f00 	cmp.w	fp, #0
 80035a6:	db3e      	blt.n	8003626 <_dtoa_r+0x22e>
 80035a8:	9b06      	ldr	r3, [sp, #24]
 80035aa:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80035ae:	445b      	add	r3, fp
 80035b0:	9306      	str	r3, [sp, #24]
 80035b2:	2300      	movs	r3, #0
 80035b4:	9308      	str	r3, [sp, #32]
 80035b6:	9b07      	ldr	r3, [sp, #28]
 80035b8:	2b09      	cmp	r3, #9
 80035ba:	f200 80af 	bhi.w	800371c <_dtoa_r+0x324>
 80035be:	2b05      	cmp	r3, #5
 80035c0:	bfc4      	itt	gt
 80035c2:	3b04      	subgt	r3, #4
 80035c4:	9307      	strgt	r3, [sp, #28]
 80035c6:	9b07      	ldr	r3, [sp, #28]
 80035c8:	f1a3 0302 	sub.w	r3, r3, #2
 80035cc:	bfcc      	ite	gt
 80035ce:	2600      	movgt	r6, #0
 80035d0:	2601      	movle	r6, #1
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	f200 80ae 	bhi.w	8003734 <_dtoa_r+0x33c>
 80035d8:	e8df f003 	tbb	[pc, r3]
 80035dc:	772f8482 	.word	0x772f8482
 80035e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80035e2:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80035e4:	441d      	add	r5, r3
 80035e6:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80035ea:	2b20      	cmp	r3, #32
 80035ec:	dd11      	ble.n	8003612 <_dtoa_r+0x21a>
 80035ee:	9a00      	ldr	r2, [sp, #0]
 80035f0:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80035f4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80035f8:	fa22 f000 	lsr.w	r0, r2, r0
 80035fc:	fa08 f303 	lsl.w	r3, r8, r3
 8003600:	4318      	orrs	r0, r3
 8003602:	f7fc ff9f 	bl	8000544 <__aeabi_ui2d>
 8003606:	2301      	movs	r3, #1
 8003608:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800360c:	3d01      	subs	r5, #1
 800360e:	9312      	str	r3, [sp, #72]	; 0x48
 8003610:	e772      	b.n	80034f8 <_dtoa_r+0x100>
 8003612:	f1c3 0020 	rsb	r0, r3, #32
 8003616:	9b00      	ldr	r3, [sp, #0]
 8003618:	fa03 f000 	lsl.w	r0, r3, r0
 800361c:	e7f1      	b.n	8003602 <_dtoa_r+0x20a>
 800361e:	2301      	movs	r3, #1
 8003620:	e7b1      	b.n	8003586 <_dtoa_r+0x18e>
 8003622:	900e      	str	r0, [sp, #56]	; 0x38
 8003624:	e7b0      	b.n	8003588 <_dtoa_r+0x190>
 8003626:	9b05      	ldr	r3, [sp, #20]
 8003628:	eba3 030b 	sub.w	r3, r3, fp
 800362c:	9305      	str	r3, [sp, #20]
 800362e:	f1cb 0300 	rsb	r3, fp, #0
 8003632:	9308      	str	r3, [sp, #32]
 8003634:	2300      	movs	r3, #0
 8003636:	930b      	str	r3, [sp, #44]	; 0x2c
 8003638:	e7bd      	b.n	80035b6 <_dtoa_r+0x1be>
 800363a:	2301      	movs	r3, #1
 800363c:	9309      	str	r3, [sp, #36]	; 0x24
 800363e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003640:	2b00      	cmp	r3, #0
 8003642:	dd7a      	ble.n	800373a <_dtoa_r+0x342>
 8003644:	9304      	str	r3, [sp, #16]
 8003646:	9303      	str	r3, [sp, #12]
 8003648:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800364a:	2200      	movs	r2, #0
 800364c:	606a      	str	r2, [r5, #4]
 800364e:	2104      	movs	r1, #4
 8003650:	f101 0214 	add.w	r2, r1, #20
 8003654:	429a      	cmp	r2, r3
 8003656:	d975      	bls.n	8003744 <_dtoa_r+0x34c>
 8003658:	6869      	ldr	r1, [r5, #4]
 800365a:	4620      	mov	r0, r4
 800365c:	f000 fd8d 	bl	800417a <_Balloc>
 8003660:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003662:	6028      	str	r0, [r5, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	9302      	str	r3, [sp, #8]
 8003668:	9b03      	ldr	r3, [sp, #12]
 800366a:	2b0e      	cmp	r3, #14
 800366c:	f200 80e5 	bhi.w	800383a <_dtoa_r+0x442>
 8003670:	2e00      	cmp	r6, #0
 8003672:	f000 80e2 	beq.w	800383a <_dtoa_r+0x442>
 8003676:	ed9d 7b00 	vldr	d7, [sp]
 800367a:	f1bb 0f00 	cmp.w	fp, #0
 800367e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8003682:	dd74      	ble.n	800376e <_dtoa_r+0x376>
 8003684:	4a23      	ldr	r2, [pc, #140]	; (8003714 <_dtoa_r+0x31c>)
 8003686:	f00b 030f 	and.w	r3, fp, #15
 800368a:	ea4f 162b 	mov.w	r6, fp, asr #4
 800368e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003692:	06f0      	lsls	r0, r6, #27
 8003694:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003698:	d559      	bpl.n	800374e <_dtoa_r+0x356>
 800369a:	4b1f      	ldr	r3, [pc, #124]	; (8003718 <_dtoa_r+0x320>)
 800369c:	ec51 0b17 	vmov	r0, r1, d7
 80036a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80036a4:	f7fd f8ee 	bl	8000884 <__aeabi_ddiv>
 80036a8:	e9cd 0100 	strd	r0, r1, [sp]
 80036ac:	f006 060f 	and.w	r6, r6, #15
 80036b0:	2503      	movs	r5, #3
 80036b2:	4f19      	ldr	r7, [pc, #100]	; (8003718 <_dtoa_r+0x320>)
 80036b4:	2e00      	cmp	r6, #0
 80036b6:	d14c      	bne.n	8003752 <_dtoa_r+0x35a>
 80036b8:	4642      	mov	r2, r8
 80036ba:	464b      	mov	r3, r9
 80036bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80036c0:	f7fd f8e0 	bl	8000884 <__aeabi_ddiv>
 80036c4:	e9cd 0100 	strd	r0, r1, [sp]
 80036c8:	e06a      	b.n	80037a0 <_dtoa_r+0x3a8>
 80036ca:	2301      	movs	r3, #1
 80036cc:	9309      	str	r3, [sp, #36]	; 0x24
 80036ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036d0:	445b      	add	r3, fp
 80036d2:	9304      	str	r3, [sp, #16]
 80036d4:	3301      	adds	r3, #1
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	9303      	str	r3, [sp, #12]
 80036da:	bfb8      	it	lt
 80036dc:	2301      	movlt	r3, #1
 80036de:	e7b3      	b.n	8003648 <_dtoa_r+0x250>
 80036e0:	2300      	movs	r3, #0
 80036e2:	e7ab      	b.n	800363c <_dtoa_r+0x244>
 80036e4:	2300      	movs	r3, #0
 80036e6:	e7f1      	b.n	80036cc <_dtoa_r+0x2d4>
 80036e8:	636f4361 	.word	0x636f4361
 80036ec:	3fd287a7 	.word	0x3fd287a7
 80036f0:	8b60c8b3 	.word	0x8b60c8b3
 80036f4:	3fc68a28 	.word	0x3fc68a28
 80036f8:	509f79fb 	.word	0x509f79fb
 80036fc:	3fd34413 	.word	0x3fd34413
 8003700:	7ff00000 	.word	0x7ff00000
 8003704:	08005151 	.word	0x08005151
 8003708:	08005148 	.word	0x08005148
 800370c:	08005125 	.word	0x08005125
 8003710:	3ff80000 	.word	0x3ff80000
 8003714:	080051e0 	.word	0x080051e0
 8003718:	080051b8 	.word	0x080051b8
 800371c:	2601      	movs	r6, #1
 800371e:	2300      	movs	r3, #0
 8003720:	9307      	str	r3, [sp, #28]
 8003722:	9609      	str	r6, [sp, #36]	; 0x24
 8003724:	f04f 33ff 	mov.w	r3, #4294967295
 8003728:	9304      	str	r3, [sp, #16]
 800372a:	9303      	str	r3, [sp, #12]
 800372c:	2200      	movs	r2, #0
 800372e:	2312      	movs	r3, #18
 8003730:	920a      	str	r2, [sp, #40]	; 0x28
 8003732:	e789      	b.n	8003648 <_dtoa_r+0x250>
 8003734:	2301      	movs	r3, #1
 8003736:	9309      	str	r3, [sp, #36]	; 0x24
 8003738:	e7f4      	b.n	8003724 <_dtoa_r+0x32c>
 800373a:	2301      	movs	r3, #1
 800373c:	9304      	str	r3, [sp, #16]
 800373e:	9303      	str	r3, [sp, #12]
 8003740:	461a      	mov	r2, r3
 8003742:	e7f5      	b.n	8003730 <_dtoa_r+0x338>
 8003744:	686a      	ldr	r2, [r5, #4]
 8003746:	3201      	adds	r2, #1
 8003748:	606a      	str	r2, [r5, #4]
 800374a:	0049      	lsls	r1, r1, #1
 800374c:	e780      	b.n	8003650 <_dtoa_r+0x258>
 800374e:	2502      	movs	r5, #2
 8003750:	e7af      	b.n	80036b2 <_dtoa_r+0x2ba>
 8003752:	07f1      	lsls	r1, r6, #31
 8003754:	d508      	bpl.n	8003768 <_dtoa_r+0x370>
 8003756:	4640      	mov	r0, r8
 8003758:	4649      	mov	r1, r9
 800375a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800375e:	f7fc ff67 	bl	8000630 <__aeabi_dmul>
 8003762:	3501      	adds	r5, #1
 8003764:	4680      	mov	r8, r0
 8003766:	4689      	mov	r9, r1
 8003768:	1076      	asrs	r6, r6, #1
 800376a:	3708      	adds	r7, #8
 800376c:	e7a2      	b.n	80036b4 <_dtoa_r+0x2bc>
 800376e:	f000 809d 	beq.w	80038ac <_dtoa_r+0x4b4>
 8003772:	f1cb 0600 	rsb	r6, fp, #0
 8003776:	4b9f      	ldr	r3, [pc, #636]	; (80039f4 <_dtoa_r+0x5fc>)
 8003778:	4f9f      	ldr	r7, [pc, #636]	; (80039f8 <_dtoa_r+0x600>)
 800377a:	f006 020f 	and.w	r2, r6, #15
 800377e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003786:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800378a:	f7fc ff51 	bl	8000630 <__aeabi_dmul>
 800378e:	e9cd 0100 	strd	r0, r1, [sp]
 8003792:	1136      	asrs	r6, r6, #4
 8003794:	2300      	movs	r3, #0
 8003796:	2502      	movs	r5, #2
 8003798:	2e00      	cmp	r6, #0
 800379a:	d17c      	bne.n	8003896 <_dtoa_r+0x49e>
 800379c:	2b00      	cmp	r3, #0
 800379e:	d191      	bne.n	80036c4 <_dtoa_r+0x2cc>
 80037a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f000 8084 	beq.w	80038b0 <_dtoa_r+0x4b8>
 80037a8:	e9dd 8900 	ldrd	r8, r9, [sp]
 80037ac:	2200      	movs	r2, #0
 80037ae:	4b93      	ldr	r3, [pc, #588]	; (80039fc <_dtoa_r+0x604>)
 80037b0:	4640      	mov	r0, r8
 80037b2:	4649      	mov	r1, r9
 80037b4:	f7fd f9ae 	bl	8000b14 <__aeabi_dcmplt>
 80037b8:	2800      	cmp	r0, #0
 80037ba:	d079      	beq.n	80038b0 <_dtoa_r+0x4b8>
 80037bc:	9b03      	ldr	r3, [sp, #12]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d076      	beq.n	80038b0 <_dtoa_r+0x4b8>
 80037c2:	9b04      	ldr	r3, [sp, #16]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	dd34      	ble.n	8003832 <_dtoa_r+0x43a>
 80037c8:	2200      	movs	r2, #0
 80037ca:	4b8d      	ldr	r3, [pc, #564]	; (8003a00 <_dtoa_r+0x608>)
 80037cc:	4640      	mov	r0, r8
 80037ce:	4649      	mov	r1, r9
 80037d0:	f7fc ff2e 	bl	8000630 <__aeabi_dmul>
 80037d4:	e9cd 0100 	strd	r0, r1, [sp]
 80037d8:	9e04      	ldr	r6, [sp, #16]
 80037da:	f10b 37ff 	add.w	r7, fp, #4294967295
 80037de:	3501      	adds	r5, #1
 80037e0:	4628      	mov	r0, r5
 80037e2:	f7fc febf 	bl	8000564 <__aeabi_i2d>
 80037e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80037ea:	f7fc ff21 	bl	8000630 <__aeabi_dmul>
 80037ee:	2200      	movs	r2, #0
 80037f0:	4b84      	ldr	r3, [pc, #528]	; (8003a04 <_dtoa_r+0x60c>)
 80037f2:	f7fc fd6b 	bl	80002cc <__adddf3>
 80037f6:	4680      	mov	r8, r0
 80037f8:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 80037fc:	2e00      	cmp	r6, #0
 80037fe:	d15a      	bne.n	80038b6 <_dtoa_r+0x4be>
 8003800:	2200      	movs	r2, #0
 8003802:	4b81      	ldr	r3, [pc, #516]	; (8003a08 <_dtoa_r+0x610>)
 8003804:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003808:	f7fc fd5e 	bl	80002c8 <__aeabi_dsub>
 800380c:	4642      	mov	r2, r8
 800380e:	464b      	mov	r3, r9
 8003810:	e9cd 0100 	strd	r0, r1, [sp]
 8003814:	f7fd f99c 	bl	8000b50 <__aeabi_dcmpgt>
 8003818:	2800      	cmp	r0, #0
 800381a:	f040 829b 	bne.w	8003d54 <_dtoa_r+0x95c>
 800381e:	4642      	mov	r2, r8
 8003820:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003824:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003828:	f7fd f974 	bl	8000b14 <__aeabi_dcmplt>
 800382c:	2800      	cmp	r0, #0
 800382e:	f040 828f 	bne.w	8003d50 <_dtoa_r+0x958>
 8003832:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003836:	e9cd 2300 	strd	r2, r3, [sp]
 800383a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800383c:	2b00      	cmp	r3, #0
 800383e:	f2c0 8150 	blt.w	8003ae2 <_dtoa_r+0x6ea>
 8003842:	f1bb 0f0e 	cmp.w	fp, #14
 8003846:	f300 814c 	bgt.w	8003ae2 <_dtoa_r+0x6ea>
 800384a:	4b6a      	ldr	r3, [pc, #424]	; (80039f4 <_dtoa_r+0x5fc>)
 800384c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8003850:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003856:	2b00      	cmp	r3, #0
 8003858:	f280 80da 	bge.w	8003a10 <_dtoa_r+0x618>
 800385c:	9b03      	ldr	r3, [sp, #12]
 800385e:	2b00      	cmp	r3, #0
 8003860:	f300 80d6 	bgt.w	8003a10 <_dtoa_r+0x618>
 8003864:	f040 8273 	bne.w	8003d4e <_dtoa_r+0x956>
 8003868:	2200      	movs	r2, #0
 800386a:	4b67      	ldr	r3, [pc, #412]	; (8003a08 <_dtoa_r+0x610>)
 800386c:	4640      	mov	r0, r8
 800386e:	4649      	mov	r1, r9
 8003870:	f7fc fede 	bl	8000630 <__aeabi_dmul>
 8003874:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003878:	f7fd f960 	bl	8000b3c <__aeabi_dcmpge>
 800387c:	9e03      	ldr	r6, [sp, #12]
 800387e:	4637      	mov	r7, r6
 8003880:	2800      	cmp	r0, #0
 8003882:	f040 824a 	bne.w	8003d1a <_dtoa_r+0x922>
 8003886:	9b02      	ldr	r3, [sp, #8]
 8003888:	9a02      	ldr	r2, [sp, #8]
 800388a:	1c5d      	adds	r5, r3, #1
 800388c:	2331      	movs	r3, #49	; 0x31
 800388e:	7013      	strb	r3, [r2, #0]
 8003890:	f10b 0b01 	add.w	fp, fp, #1
 8003894:	e245      	b.n	8003d22 <_dtoa_r+0x92a>
 8003896:	07f2      	lsls	r2, r6, #31
 8003898:	d505      	bpl.n	80038a6 <_dtoa_r+0x4ae>
 800389a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800389e:	f7fc fec7 	bl	8000630 <__aeabi_dmul>
 80038a2:	3501      	adds	r5, #1
 80038a4:	2301      	movs	r3, #1
 80038a6:	1076      	asrs	r6, r6, #1
 80038a8:	3708      	adds	r7, #8
 80038aa:	e775      	b.n	8003798 <_dtoa_r+0x3a0>
 80038ac:	2502      	movs	r5, #2
 80038ae:	e777      	b.n	80037a0 <_dtoa_r+0x3a8>
 80038b0:	465f      	mov	r7, fp
 80038b2:	9e03      	ldr	r6, [sp, #12]
 80038b4:	e794      	b.n	80037e0 <_dtoa_r+0x3e8>
 80038b6:	9a02      	ldr	r2, [sp, #8]
 80038b8:	4b4e      	ldr	r3, [pc, #312]	; (80039f4 <_dtoa_r+0x5fc>)
 80038ba:	4432      	add	r2, r6
 80038bc:	9213      	str	r2, [sp, #76]	; 0x4c
 80038be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038c0:	1e71      	subs	r1, r6, #1
 80038c2:	2a00      	cmp	r2, #0
 80038c4:	d048      	beq.n	8003958 <_dtoa_r+0x560>
 80038c6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80038ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ce:	2000      	movs	r0, #0
 80038d0:	494e      	ldr	r1, [pc, #312]	; (8003a0c <_dtoa_r+0x614>)
 80038d2:	f7fc ffd7 	bl	8000884 <__aeabi_ddiv>
 80038d6:	4642      	mov	r2, r8
 80038d8:	464b      	mov	r3, r9
 80038da:	f7fc fcf5 	bl	80002c8 <__aeabi_dsub>
 80038de:	9d02      	ldr	r5, [sp, #8]
 80038e0:	4680      	mov	r8, r0
 80038e2:	4689      	mov	r9, r1
 80038e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80038e8:	f7fd f952 	bl	8000b90 <__aeabi_d2iz>
 80038ec:	4606      	mov	r6, r0
 80038ee:	f7fc fe39 	bl	8000564 <__aeabi_i2d>
 80038f2:	4602      	mov	r2, r0
 80038f4:	460b      	mov	r3, r1
 80038f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80038fa:	f7fc fce5 	bl	80002c8 <__aeabi_dsub>
 80038fe:	3630      	adds	r6, #48	; 0x30
 8003900:	f805 6b01 	strb.w	r6, [r5], #1
 8003904:	4642      	mov	r2, r8
 8003906:	464b      	mov	r3, r9
 8003908:	e9cd 0100 	strd	r0, r1, [sp]
 800390c:	f7fd f902 	bl	8000b14 <__aeabi_dcmplt>
 8003910:	2800      	cmp	r0, #0
 8003912:	d165      	bne.n	80039e0 <_dtoa_r+0x5e8>
 8003914:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003918:	2000      	movs	r0, #0
 800391a:	4938      	ldr	r1, [pc, #224]	; (80039fc <_dtoa_r+0x604>)
 800391c:	f7fc fcd4 	bl	80002c8 <__aeabi_dsub>
 8003920:	4642      	mov	r2, r8
 8003922:	464b      	mov	r3, r9
 8003924:	f7fd f8f6 	bl	8000b14 <__aeabi_dcmplt>
 8003928:	2800      	cmp	r0, #0
 800392a:	f040 80ba 	bne.w	8003aa2 <_dtoa_r+0x6aa>
 800392e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003930:	429d      	cmp	r5, r3
 8003932:	f43f af7e 	beq.w	8003832 <_dtoa_r+0x43a>
 8003936:	2200      	movs	r2, #0
 8003938:	4b31      	ldr	r3, [pc, #196]	; (8003a00 <_dtoa_r+0x608>)
 800393a:	4640      	mov	r0, r8
 800393c:	4649      	mov	r1, r9
 800393e:	f7fc fe77 	bl	8000630 <__aeabi_dmul>
 8003942:	2200      	movs	r2, #0
 8003944:	4680      	mov	r8, r0
 8003946:	4689      	mov	r9, r1
 8003948:	4b2d      	ldr	r3, [pc, #180]	; (8003a00 <_dtoa_r+0x608>)
 800394a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800394e:	f7fc fe6f 	bl	8000630 <__aeabi_dmul>
 8003952:	e9cd 0100 	strd	r0, r1, [sp]
 8003956:	e7c5      	b.n	80038e4 <_dtoa_r+0x4ec>
 8003958:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800395c:	4642      	mov	r2, r8
 800395e:	464b      	mov	r3, r9
 8003960:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003964:	f7fc fe64 	bl	8000630 <__aeabi_dmul>
 8003968:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800396c:	9d02      	ldr	r5, [sp, #8]
 800396e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003972:	f7fd f90d 	bl	8000b90 <__aeabi_d2iz>
 8003976:	4606      	mov	r6, r0
 8003978:	f7fc fdf4 	bl	8000564 <__aeabi_i2d>
 800397c:	3630      	adds	r6, #48	; 0x30
 800397e:	4602      	mov	r2, r0
 8003980:	460b      	mov	r3, r1
 8003982:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003986:	f7fc fc9f 	bl	80002c8 <__aeabi_dsub>
 800398a:	f805 6b01 	strb.w	r6, [r5], #1
 800398e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003990:	42ab      	cmp	r3, r5
 8003992:	4680      	mov	r8, r0
 8003994:	4689      	mov	r9, r1
 8003996:	f04f 0200 	mov.w	r2, #0
 800399a:	d125      	bne.n	80039e8 <_dtoa_r+0x5f0>
 800399c:	4b1b      	ldr	r3, [pc, #108]	; (8003a0c <_dtoa_r+0x614>)
 800399e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80039a2:	f7fc fc93 	bl	80002cc <__adddf3>
 80039a6:	4602      	mov	r2, r0
 80039a8:	460b      	mov	r3, r1
 80039aa:	4640      	mov	r0, r8
 80039ac:	4649      	mov	r1, r9
 80039ae:	f7fd f8cf 	bl	8000b50 <__aeabi_dcmpgt>
 80039b2:	2800      	cmp	r0, #0
 80039b4:	d175      	bne.n	8003aa2 <_dtoa_r+0x6aa>
 80039b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80039ba:	2000      	movs	r0, #0
 80039bc:	4913      	ldr	r1, [pc, #76]	; (8003a0c <_dtoa_r+0x614>)
 80039be:	f7fc fc83 	bl	80002c8 <__aeabi_dsub>
 80039c2:	4602      	mov	r2, r0
 80039c4:	460b      	mov	r3, r1
 80039c6:	4640      	mov	r0, r8
 80039c8:	4649      	mov	r1, r9
 80039ca:	f7fd f8a3 	bl	8000b14 <__aeabi_dcmplt>
 80039ce:	2800      	cmp	r0, #0
 80039d0:	f43f af2f 	beq.w	8003832 <_dtoa_r+0x43a>
 80039d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80039d8:	2b30      	cmp	r3, #48	; 0x30
 80039da:	f105 32ff 	add.w	r2, r5, #4294967295
 80039de:	d001      	beq.n	80039e4 <_dtoa_r+0x5ec>
 80039e0:	46bb      	mov	fp, r7
 80039e2:	e04d      	b.n	8003a80 <_dtoa_r+0x688>
 80039e4:	4615      	mov	r5, r2
 80039e6:	e7f5      	b.n	80039d4 <_dtoa_r+0x5dc>
 80039e8:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <_dtoa_r+0x608>)
 80039ea:	f7fc fe21 	bl	8000630 <__aeabi_dmul>
 80039ee:	e9cd 0100 	strd	r0, r1, [sp]
 80039f2:	e7bc      	b.n	800396e <_dtoa_r+0x576>
 80039f4:	080051e0 	.word	0x080051e0
 80039f8:	080051b8 	.word	0x080051b8
 80039fc:	3ff00000 	.word	0x3ff00000
 8003a00:	40240000 	.word	0x40240000
 8003a04:	401c0000 	.word	0x401c0000
 8003a08:	40140000 	.word	0x40140000
 8003a0c:	3fe00000 	.word	0x3fe00000
 8003a10:	e9dd 6700 	ldrd	r6, r7, [sp]
 8003a14:	9d02      	ldr	r5, [sp, #8]
 8003a16:	4642      	mov	r2, r8
 8003a18:	464b      	mov	r3, r9
 8003a1a:	4630      	mov	r0, r6
 8003a1c:	4639      	mov	r1, r7
 8003a1e:	f7fc ff31 	bl	8000884 <__aeabi_ddiv>
 8003a22:	f7fd f8b5 	bl	8000b90 <__aeabi_d2iz>
 8003a26:	9000      	str	r0, [sp, #0]
 8003a28:	f7fc fd9c 	bl	8000564 <__aeabi_i2d>
 8003a2c:	4642      	mov	r2, r8
 8003a2e:	464b      	mov	r3, r9
 8003a30:	f7fc fdfe 	bl	8000630 <__aeabi_dmul>
 8003a34:	4602      	mov	r2, r0
 8003a36:	460b      	mov	r3, r1
 8003a38:	4630      	mov	r0, r6
 8003a3a:	4639      	mov	r1, r7
 8003a3c:	f7fc fc44 	bl	80002c8 <__aeabi_dsub>
 8003a40:	9e00      	ldr	r6, [sp, #0]
 8003a42:	9f03      	ldr	r7, [sp, #12]
 8003a44:	3630      	adds	r6, #48	; 0x30
 8003a46:	f805 6b01 	strb.w	r6, [r5], #1
 8003a4a:	9e02      	ldr	r6, [sp, #8]
 8003a4c:	1bae      	subs	r6, r5, r6
 8003a4e:	42b7      	cmp	r7, r6
 8003a50:	4602      	mov	r2, r0
 8003a52:	460b      	mov	r3, r1
 8003a54:	d138      	bne.n	8003ac8 <_dtoa_r+0x6d0>
 8003a56:	f7fc fc39 	bl	80002cc <__adddf3>
 8003a5a:	4606      	mov	r6, r0
 8003a5c:	460f      	mov	r7, r1
 8003a5e:	4602      	mov	r2, r0
 8003a60:	460b      	mov	r3, r1
 8003a62:	4640      	mov	r0, r8
 8003a64:	4649      	mov	r1, r9
 8003a66:	f7fd f855 	bl	8000b14 <__aeabi_dcmplt>
 8003a6a:	b9c8      	cbnz	r0, 8003aa0 <_dtoa_r+0x6a8>
 8003a6c:	4632      	mov	r2, r6
 8003a6e:	463b      	mov	r3, r7
 8003a70:	4640      	mov	r0, r8
 8003a72:	4649      	mov	r1, r9
 8003a74:	f7fd f844 	bl	8000b00 <__aeabi_dcmpeq>
 8003a78:	b110      	cbz	r0, 8003a80 <_dtoa_r+0x688>
 8003a7a:	9b00      	ldr	r3, [sp, #0]
 8003a7c:	07db      	lsls	r3, r3, #31
 8003a7e:	d40f      	bmi.n	8003aa0 <_dtoa_r+0x6a8>
 8003a80:	4651      	mov	r1, sl
 8003a82:	4620      	mov	r0, r4
 8003a84:	f000 fbad 	bl	80041e2 <_Bfree>
 8003a88:	2300      	movs	r3, #0
 8003a8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003a8c:	702b      	strb	r3, [r5, #0]
 8003a8e:	f10b 0301 	add.w	r3, fp, #1
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f43f acf8 	beq.w	800348c <_dtoa_r+0x94>
 8003a9c:	601d      	str	r5, [r3, #0]
 8003a9e:	e4f5      	b.n	800348c <_dtoa_r+0x94>
 8003aa0:	465f      	mov	r7, fp
 8003aa2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003aa6:	2a39      	cmp	r2, #57	; 0x39
 8003aa8:	f105 33ff 	add.w	r3, r5, #4294967295
 8003aac:	d106      	bne.n	8003abc <_dtoa_r+0x6c4>
 8003aae:	9a02      	ldr	r2, [sp, #8]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d107      	bne.n	8003ac4 <_dtoa_r+0x6cc>
 8003ab4:	2330      	movs	r3, #48	; 0x30
 8003ab6:	7013      	strb	r3, [r2, #0]
 8003ab8:	3701      	adds	r7, #1
 8003aba:	4613      	mov	r3, r2
 8003abc:	781a      	ldrb	r2, [r3, #0]
 8003abe:	3201      	adds	r2, #1
 8003ac0:	701a      	strb	r2, [r3, #0]
 8003ac2:	e78d      	b.n	80039e0 <_dtoa_r+0x5e8>
 8003ac4:	461d      	mov	r5, r3
 8003ac6:	e7ec      	b.n	8003aa2 <_dtoa_r+0x6aa>
 8003ac8:	2200      	movs	r2, #0
 8003aca:	4ba4      	ldr	r3, [pc, #656]	; (8003d5c <_dtoa_r+0x964>)
 8003acc:	f7fc fdb0 	bl	8000630 <__aeabi_dmul>
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	4606      	mov	r6, r0
 8003ad6:	460f      	mov	r7, r1
 8003ad8:	f7fd f812 	bl	8000b00 <__aeabi_dcmpeq>
 8003adc:	2800      	cmp	r0, #0
 8003ade:	d09a      	beq.n	8003a16 <_dtoa_r+0x61e>
 8003ae0:	e7ce      	b.n	8003a80 <_dtoa_r+0x688>
 8003ae2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ae4:	2a00      	cmp	r2, #0
 8003ae6:	f000 80cd 	beq.w	8003c84 <_dtoa_r+0x88c>
 8003aea:	9a07      	ldr	r2, [sp, #28]
 8003aec:	2a01      	cmp	r2, #1
 8003aee:	f300 80af 	bgt.w	8003c50 <_dtoa_r+0x858>
 8003af2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003af4:	2a00      	cmp	r2, #0
 8003af6:	f000 80a7 	beq.w	8003c48 <_dtoa_r+0x850>
 8003afa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003afe:	9e08      	ldr	r6, [sp, #32]
 8003b00:	9d05      	ldr	r5, [sp, #20]
 8003b02:	9a05      	ldr	r2, [sp, #20]
 8003b04:	441a      	add	r2, r3
 8003b06:	9205      	str	r2, [sp, #20]
 8003b08:	9a06      	ldr	r2, [sp, #24]
 8003b0a:	2101      	movs	r1, #1
 8003b0c:	441a      	add	r2, r3
 8003b0e:	4620      	mov	r0, r4
 8003b10:	9206      	str	r2, [sp, #24]
 8003b12:	f000 fc06 	bl	8004322 <__i2b>
 8003b16:	4607      	mov	r7, r0
 8003b18:	2d00      	cmp	r5, #0
 8003b1a:	dd0c      	ble.n	8003b36 <_dtoa_r+0x73e>
 8003b1c:	9b06      	ldr	r3, [sp, #24]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	dd09      	ble.n	8003b36 <_dtoa_r+0x73e>
 8003b22:	42ab      	cmp	r3, r5
 8003b24:	9a05      	ldr	r2, [sp, #20]
 8003b26:	bfa8      	it	ge
 8003b28:	462b      	movge	r3, r5
 8003b2a:	1ad2      	subs	r2, r2, r3
 8003b2c:	9205      	str	r2, [sp, #20]
 8003b2e:	9a06      	ldr	r2, [sp, #24]
 8003b30:	1aed      	subs	r5, r5, r3
 8003b32:	1ad3      	subs	r3, r2, r3
 8003b34:	9306      	str	r3, [sp, #24]
 8003b36:	9b08      	ldr	r3, [sp, #32]
 8003b38:	b1f3      	cbz	r3, 8003b78 <_dtoa_r+0x780>
 8003b3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 80a5 	beq.w	8003c8c <_dtoa_r+0x894>
 8003b42:	2e00      	cmp	r6, #0
 8003b44:	dd10      	ble.n	8003b68 <_dtoa_r+0x770>
 8003b46:	4639      	mov	r1, r7
 8003b48:	4632      	mov	r2, r6
 8003b4a:	4620      	mov	r0, r4
 8003b4c:	f000 fc80 	bl	8004450 <__pow5mult>
 8003b50:	4652      	mov	r2, sl
 8003b52:	4601      	mov	r1, r0
 8003b54:	4607      	mov	r7, r0
 8003b56:	4620      	mov	r0, r4
 8003b58:	f000 fbec 	bl	8004334 <__multiply>
 8003b5c:	4651      	mov	r1, sl
 8003b5e:	4680      	mov	r8, r0
 8003b60:	4620      	mov	r0, r4
 8003b62:	f000 fb3e 	bl	80041e2 <_Bfree>
 8003b66:	46c2      	mov	sl, r8
 8003b68:	9b08      	ldr	r3, [sp, #32]
 8003b6a:	1b9a      	subs	r2, r3, r6
 8003b6c:	d004      	beq.n	8003b78 <_dtoa_r+0x780>
 8003b6e:	4651      	mov	r1, sl
 8003b70:	4620      	mov	r0, r4
 8003b72:	f000 fc6d 	bl	8004450 <__pow5mult>
 8003b76:	4682      	mov	sl, r0
 8003b78:	2101      	movs	r1, #1
 8003b7a:	4620      	mov	r0, r4
 8003b7c:	f000 fbd1 	bl	8004322 <__i2b>
 8003b80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	4606      	mov	r6, r0
 8003b86:	f340 8083 	ble.w	8003c90 <_dtoa_r+0x898>
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	4601      	mov	r1, r0
 8003b8e:	4620      	mov	r0, r4
 8003b90:	f000 fc5e 	bl	8004450 <__pow5mult>
 8003b94:	9b07      	ldr	r3, [sp, #28]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	4606      	mov	r6, r0
 8003b9a:	dd7c      	ble.n	8003c96 <_dtoa_r+0x89e>
 8003b9c:	f04f 0800 	mov.w	r8, #0
 8003ba0:	6933      	ldr	r3, [r6, #16]
 8003ba2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003ba6:	6918      	ldr	r0, [r3, #16]
 8003ba8:	f000 fb6d 	bl	8004286 <__hi0bits>
 8003bac:	f1c0 0020 	rsb	r0, r0, #32
 8003bb0:	9b06      	ldr	r3, [sp, #24]
 8003bb2:	4418      	add	r0, r3
 8003bb4:	f010 001f 	ands.w	r0, r0, #31
 8003bb8:	f000 8096 	beq.w	8003ce8 <_dtoa_r+0x8f0>
 8003bbc:	f1c0 0320 	rsb	r3, r0, #32
 8003bc0:	2b04      	cmp	r3, #4
 8003bc2:	f340 8087 	ble.w	8003cd4 <_dtoa_r+0x8dc>
 8003bc6:	9b05      	ldr	r3, [sp, #20]
 8003bc8:	f1c0 001c 	rsb	r0, r0, #28
 8003bcc:	4403      	add	r3, r0
 8003bce:	9305      	str	r3, [sp, #20]
 8003bd0:	9b06      	ldr	r3, [sp, #24]
 8003bd2:	4405      	add	r5, r0
 8003bd4:	4403      	add	r3, r0
 8003bd6:	9306      	str	r3, [sp, #24]
 8003bd8:	9b05      	ldr	r3, [sp, #20]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	dd05      	ble.n	8003bea <_dtoa_r+0x7f2>
 8003bde:	4651      	mov	r1, sl
 8003be0:	461a      	mov	r2, r3
 8003be2:	4620      	mov	r0, r4
 8003be4:	f000 fc82 	bl	80044ec <__lshift>
 8003be8:	4682      	mov	sl, r0
 8003bea:	9b06      	ldr	r3, [sp, #24]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	dd05      	ble.n	8003bfc <_dtoa_r+0x804>
 8003bf0:	4631      	mov	r1, r6
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	f000 fc79 	bl	80044ec <__lshift>
 8003bfa:	4606      	mov	r6, r0
 8003bfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d074      	beq.n	8003cec <_dtoa_r+0x8f4>
 8003c02:	4631      	mov	r1, r6
 8003c04:	4650      	mov	r0, sl
 8003c06:	f000 fcc2 	bl	800458e <__mcmp>
 8003c0a:	2800      	cmp	r0, #0
 8003c0c:	da6e      	bge.n	8003cec <_dtoa_r+0x8f4>
 8003c0e:	2300      	movs	r3, #0
 8003c10:	4651      	mov	r1, sl
 8003c12:	220a      	movs	r2, #10
 8003c14:	4620      	mov	r0, r4
 8003c16:	f000 fafb 	bl	8004210 <__multadd>
 8003c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c1c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8003c20:	4682      	mov	sl, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 81a8 	beq.w	8003f78 <_dtoa_r+0xb80>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	4639      	mov	r1, r7
 8003c2c:	220a      	movs	r2, #10
 8003c2e:	4620      	mov	r0, r4
 8003c30:	f000 faee 	bl	8004210 <__multadd>
 8003c34:	9b04      	ldr	r3, [sp, #16]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	4607      	mov	r7, r0
 8003c3a:	f300 80c8 	bgt.w	8003dce <_dtoa_r+0x9d6>
 8003c3e:	9b07      	ldr	r3, [sp, #28]
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	f340 80c4 	ble.w	8003dce <_dtoa_r+0x9d6>
 8003c46:	e059      	b.n	8003cfc <_dtoa_r+0x904>
 8003c48:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003c4a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003c4e:	e756      	b.n	8003afe <_dtoa_r+0x706>
 8003c50:	9b03      	ldr	r3, [sp, #12]
 8003c52:	1e5e      	subs	r6, r3, #1
 8003c54:	9b08      	ldr	r3, [sp, #32]
 8003c56:	42b3      	cmp	r3, r6
 8003c58:	bfbf      	itttt	lt
 8003c5a:	9b08      	ldrlt	r3, [sp, #32]
 8003c5c:	9608      	strlt	r6, [sp, #32]
 8003c5e:	1af2      	sublt	r2, r6, r3
 8003c60:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8003c62:	bfb6      	itet	lt
 8003c64:	189b      	addlt	r3, r3, r2
 8003c66:	1b9e      	subge	r6, r3, r6
 8003c68:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8003c6a:	9b03      	ldr	r3, [sp, #12]
 8003c6c:	bfb8      	it	lt
 8003c6e:	2600      	movlt	r6, #0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	bfb9      	ittee	lt
 8003c74:	9b05      	ldrlt	r3, [sp, #20]
 8003c76:	9a03      	ldrlt	r2, [sp, #12]
 8003c78:	9d05      	ldrge	r5, [sp, #20]
 8003c7a:	9b03      	ldrge	r3, [sp, #12]
 8003c7c:	bfbc      	itt	lt
 8003c7e:	1a9d      	sublt	r5, r3, r2
 8003c80:	2300      	movlt	r3, #0
 8003c82:	e73e      	b.n	8003b02 <_dtoa_r+0x70a>
 8003c84:	9e08      	ldr	r6, [sp, #32]
 8003c86:	9d05      	ldr	r5, [sp, #20]
 8003c88:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8003c8a:	e745      	b.n	8003b18 <_dtoa_r+0x720>
 8003c8c:	9a08      	ldr	r2, [sp, #32]
 8003c8e:	e76e      	b.n	8003b6e <_dtoa_r+0x776>
 8003c90:	9b07      	ldr	r3, [sp, #28]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	dc19      	bgt.n	8003cca <_dtoa_r+0x8d2>
 8003c96:	9b00      	ldr	r3, [sp, #0]
 8003c98:	b9bb      	cbnz	r3, 8003cca <_dtoa_r+0x8d2>
 8003c9a:	9b01      	ldr	r3, [sp, #4]
 8003c9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ca0:	b99b      	cbnz	r3, 8003cca <_dtoa_r+0x8d2>
 8003ca2:	9b01      	ldr	r3, [sp, #4]
 8003ca4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ca8:	0d1b      	lsrs	r3, r3, #20
 8003caa:	051b      	lsls	r3, r3, #20
 8003cac:	b183      	cbz	r3, 8003cd0 <_dtoa_r+0x8d8>
 8003cae:	9b05      	ldr	r3, [sp, #20]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	9305      	str	r3, [sp, #20]
 8003cb4:	9b06      	ldr	r3, [sp, #24]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	9306      	str	r3, [sp, #24]
 8003cba:	f04f 0801 	mov.w	r8, #1
 8003cbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f47f af6d 	bne.w	8003ba0 <_dtoa_r+0x7a8>
 8003cc6:	2001      	movs	r0, #1
 8003cc8:	e772      	b.n	8003bb0 <_dtoa_r+0x7b8>
 8003cca:	f04f 0800 	mov.w	r8, #0
 8003cce:	e7f6      	b.n	8003cbe <_dtoa_r+0x8c6>
 8003cd0:	4698      	mov	r8, r3
 8003cd2:	e7f4      	b.n	8003cbe <_dtoa_r+0x8c6>
 8003cd4:	d080      	beq.n	8003bd8 <_dtoa_r+0x7e0>
 8003cd6:	9a05      	ldr	r2, [sp, #20]
 8003cd8:	331c      	adds	r3, #28
 8003cda:	441a      	add	r2, r3
 8003cdc:	9205      	str	r2, [sp, #20]
 8003cde:	9a06      	ldr	r2, [sp, #24]
 8003ce0:	441a      	add	r2, r3
 8003ce2:	441d      	add	r5, r3
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	e776      	b.n	8003bd6 <_dtoa_r+0x7de>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	e7f4      	b.n	8003cd6 <_dtoa_r+0x8de>
 8003cec:	9b03      	ldr	r3, [sp, #12]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	dc36      	bgt.n	8003d60 <_dtoa_r+0x968>
 8003cf2:	9b07      	ldr	r3, [sp, #28]
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	dd33      	ble.n	8003d60 <_dtoa_r+0x968>
 8003cf8:	9b03      	ldr	r3, [sp, #12]
 8003cfa:	9304      	str	r3, [sp, #16]
 8003cfc:	9b04      	ldr	r3, [sp, #16]
 8003cfe:	b963      	cbnz	r3, 8003d1a <_dtoa_r+0x922>
 8003d00:	4631      	mov	r1, r6
 8003d02:	2205      	movs	r2, #5
 8003d04:	4620      	mov	r0, r4
 8003d06:	f000 fa83 	bl	8004210 <__multadd>
 8003d0a:	4601      	mov	r1, r0
 8003d0c:	4606      	mov	r6, r0
 8003d0e:	4650      	mov	r0, sl
 8003d10:	f000 fc3d 	bl	800458e <__mcmp>
 8003d14:	2800      	cmp	r0, #0
 8003d16:	f73f adb6 	bgt.w	8003886 <_dtoa_r+0x48e>
 8003d1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d1c:	9d02      	ldr	r5, [sp, #8]
 8003d1e:	ea6f 0b03 	mvn.w	fp, r3
 8003d22:	2300      	movs	r3, #0
 8003d24:	9303      	str	r3, [sp, #12]
 8003d26:	4631      	mov	r1, r6
 8003d28:	4620      	mov	r0, r4
 8003d2a:	f000 fa5a 	bl	80041e2 <_Bfree>
 8003d2e:	2f00      	cmp	r7, #0
 8003d30:	f43f aea6 	beq.w	8003a80 <_dtoa_r+0x688>
 8003d34:	9b03      	ldr	r3, [sp, #12]
 8003d36:	b12b      	cbz	r3, 8003d44 <_dtoa_r+0x94c>
 8003d38:	42bb      	cmp	r3, r7
 8003d3a:	d003      	beq.n	8003d44 <_dtoa_r+0x94c>
 8003d3c:	4619      	mov	r1, r3
 8003d3e:	4620      	mov	r0, r4
 8003d40:	f000 fa4f 	bl	80041e2 <_Bfree>
 8003d44:	4639      	mov	r1, r7
 8003d46:	4620      	mov	r0, r4
 8003d48:	f000 fa4b 	bl	80041e2 <_Bfree>
 8003d4c:	e698      	b.n	8003a80 <_dtoa_r+0x688>
 8003d4e:	2600      	movs	r6, #0
 8003d50:	4637      	mov	r7, r6
 8003d52:	e7e2      	b.n	8003d1a <_dtoa_r+0x922>
 8003d54:	46bb      	mov	fp, r7
 8003d56:	4637      	mov	r7, r6
 8003d58:	e595      	b.n	8003886 <_dtoa_r+0x48e>
 8003d5a:	bf00      	nop
 8003d5c:	40240000 	.word	0x40240000
 8003d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d62:	bb93      	cbnz	r3, 8003dca <_dtoa_r+0x9d2>
 8003d64:	9b03      	ldr	r3, [sp, #12]
 8003d66:	9304      	str	r3, [sp, #16]
 8003d68:	9d02      	ldr	r5, [sp, #8]
 8003d6a:	4631      	mov	r1, r6
 8003d6c:	4650      	mov	r0, sl
 8003d6e:	f7ff fab7 	bl	80032e0 <quorem>
 8003d72:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003d76:	f805 9b01 	strb.w	r9, [r5], #1
 8003d7a:	9b02      	ldr	r3, [sp, #8]
 8003d7c:	9a04      	ldr	r2, [sp, #16]
 8003d7e:	1aeb      	subs	r3, r5, r3
 8003d80:	429a      	cmp	r2, r3
 8003d82:	f300 80dc 	bgt.w	8003f3e <_dtoa_r+0xb46>
 8003d86:	9b02      	ldr	r3, [sp, #8]
 8003d88:	2a01      	cmp	r2, #1
 8003d8a:	bfac      	ite	ge
 8003d8c:	189b      	addge	r3, r3, r2
 8003d8e:	3301      	addlt	r3, #1
 8003d90:	4698      	mov	r8, r3
 8003d92:	2300      	movs	r3, #0
 8003d94:	9303      	str	r3, [sp, #12]
 8003d96:	4651      	mov	r1, sl
 8003d98:	2201      	movs	r2, #1
 8003d9a:	4620      	mov	r0, r4
 8003d9c:	f000 fba6 	bl	80044ec <__lshift>
 8003da0:	4631      	mov	r1, r6
 8003da2:	4682      	mov	sl, r0
 8003da4:	f000 fbf3 	bl	800458e <__mcmp>
 8003da8:	2800      	cmp	r0, #0
 8003daa:	f300 808d 	bgt.w	8003ec8 <_dtoa_r+0xad0>
 8003dae:	d103      	bne.n	8003db8 <_dtoa_r+0x9c0>
 8003db0:	f019 0f01 	tst.w	r9, #1
 8003db4:	f040 8088 	bne.w	8003ec8 <_dtoa_r+0xad0>
 8003db8:	4645      	mov	r5, r8
 8003dba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003dbe:	2b30      	cmp	r3, #48	; 0x30
 8003dc0:	f105 32ff 	add.w	r2, r5, #4294967295
 8003dc4:	d1af      	bne.n	8003d26 <_dtoa_r+0x92e>
 8003dc6:	4615      	mov	r5, r2
 8003dc8:	e7f7      	b.n	8003dba <_dtoa_r+0x9c2>
 8003dca:	9b03      	ldr	r3, [sp, #12]
 8003dcc:	9304      	str	r3, [sp, #16]
 8003dce:	2d00      	cmp	r5, #0
 8003dd0:	dd05      	ble.n	8003dde <_dtoa_r+0x9e6>
 8003dd2:	4639      	mov	r1, r7
 8003dd4:	462a      	mov	r2, r5
 8003dd6:	4620      	mov	r0, r4
 8003dd8:	f000 fb88 	bl	80044ec <__lshift>
 8003ddc:	4607      	mov	r7, r0
 8003dde:	f1b8 0f00 	cmp.w	r8, #0
 8003de2:	d04c      	beq.n	8003e7e <_dtoa_r+0xa86>
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	4620      	mov	r0, r4
 8003de8:	f000 f9c7 	bl	800417a <_Balloc>
 8003dec:	693a      	ldr	r2, [r7, #16]
 8003dee:	3202      	adds	r2, #2
 8003df0:	4605      	mov	r5, r0
 8003df2:	0092      	lsls	r2, r2, #2
 8003df4:	f107 010c 	add.w	r1, r7, #12
 8003df8:	300c      	adds	r0, #12
 8003dfa:	f000 f9ab 	bl	8004154 <memcpy>
 8003dfe:	2201      	movs	r2, #1
 8003e00:	4629      	mov	r1, r5
 8003e02:	4620      	mov	r0, r4
 8003e04:	f000 fb72 	bl	80044ec <__lshift>
 8003e08:	9b00      	ldr	r3, [sp, #0]
 8003e0a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8003e0e:	9703      	str	r7, [sp, #12]
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	4607      	mov	r7, r0
 8003e16:	9305      	str	r3, [sp, #20]
 8003e18:	4631      	mov	r1, r6
 8003e1a:	4650      	mov	r0, sl
 8003e1c:	f7ff fa60 	bl	80032e0 <quorem>
 8003e20:	9903      	ldr	r1, [sp, #12]
 8003e22:	4605      	mov	r5, r0
 8003e24:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003e28:	4650      	mov	r0, sl
 8003e2a:	f000 fbb0 	bl	800458e <__mcmp>
 8003e2e:	463a      	mov	r2, r7
 8003e30:	9000      	str	r0, [sp, #0]
 8003e32:	4631      	mov	r1, r6
 8003e34:	4620      	mov	r0, r4
 8003e36:	f000 fbc4 	bl	80045c2 <__mdiff>
 8003e3a:	68c3      	ldr	r3, [r0, #12]
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	bb03      	cbnz	r3, 8003e82 <_dtoa_r+0xa8a>
 8003e40:	4601      	mov	r1, r0
 8003e42:	9006      	str	r0, [sp, #24]
 8003e44:	4650      	mov	r0, sl
 8003e46:	f000 fba2 	bl	800458e <__mcmp>
 8003e4a:	9a06      	ldr	r2, [sp, #24]
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	4611      	mov	r1, r2
 8003e50:	4620      	mov	r0, r4
 8003e52:	9306      	str	r3, [sp, #24]
 8003e54:	f000 f9c5 	bl	80041e2 <_Bfree>
 8003e58:	9b06      	ldr	r3, [sp, #24]
 8003e5a:	b9a3      	cbnz	r3, 8003e86 <_dtoa_r+0xa8e>
 8003e5c:	9a07      	ldr	r2, [sp, #28]
 8003e5e:	b992      	cbnz	r2, 8003e86 <_dtoa_r+0xa8e>
 8003e60:	9a05      	ldr	r2, [sp, #20]
 8003e62:	b982      	cbnz	r2, 8003e86 <_dtoa_r+0xa8e>
 8003e64:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003e68:	d029      	beq.n	8003ebe <_dtoa_r+0xac6>
 8003e6a:	9b00      	ldr	r3, [sp, #0]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	dd01      	ble.n	8003e74 <_dtoa_r+0xa7c>
 8003e70:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8003e74:	f108 0501 	add.w	r5, r8, #1
 8003e78:	f888 9000 	strb.w	r9, [r8]
 8003e7c:	e753      	b.n	8003d26 <_dtoa_r+0x92e>
 8003e7e:	4638      	mov	r0, r7
 8003e80:	e7c2      	b.n	8003e08 <_dtoa_r+0xa10>
 8003e82:	2301      	movs	r3, #1
 8003e84:	e7e3      	b.n	8003e4e <_dtoa_r+0xa56>
 8003e86:	9a00      	ldr	r2, [sp, #0]
 8003e88:	2a00      	cmp	r2, #0
 8003e8a:	db04      	blt.n	8003e96 <_dtoa_r+0xa9e>
 8003e8c:	d125      	bne.n	8003eda <_dtoa_r+0xae2>
 8003e8e:	9a07      	ldr	r2, [sp, #28]
 8003e90:	bb1a      	cbnz	r2, 8003eda <_dtoa_r+0xae2>
 8003e92:	9a05      	ldr	r2, [sp, #20]
 8003e94:	bb0a      	cbnz	r2, 8003eda <_dtoa_r+0xae2>
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	ddec      	ble.n	8003e74 <_dtoa_r+0xa7c>
 8003e9a:	4651      	mov	r1, sl
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	f000 fb24 	bl	80044ec <__lshift>
 8003ea4:	4631      	mov	r1, r6
 8003ea6:	4682      	mov	sl, r0
 8003ea8:	f000 fb71 	bl	800458e <__mcmp>
 8003eac:	2800      	cmp	r0, #0
 8003eae:	dc03      	bgt.n	8003eb8 <_dtoa_r+0xac0>
 8003eb0:	d1e0      	bne.n	8003e74 <_dtoa_r+0xa7c>
 8003eb2:	f019 0f01 	tst.w	r9, #1
 8003eb6:	d0dd      	beq.n	8003e74 <_dtoa_r+0xa7c>
 8003eb8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003ebc:	d1d8      	bne.n	8003e70 <_dtoa_r+0xa78>
 8003ebe:	2339      	movs	r3, #57	; 0x39
 8003ec0:	f888 3000 	strb.w	r3, [r8]
 8003ec4:	f108 0801 	add.w	r8, r8, #1
 8003ec8:	4645      	mov	r5, r8
 8003eca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003ece:	2b39      	cmp	r3, #57	; 0x39
 8003ed0:	f105 32ff 	add.w	r2, r5, #4294967295
 8003ed4:	d03b      	beq.n	8003f4e <_dtoa_r+0xb56>
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	e040      	b.n	8003f5c <_dtoa_r+0xb64>
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f108 0501 	add.w	r5, r8, #1
 8003ee0:	dd05      	ble.n	8003eee <_dtoa_r+0xaf6>
 8003ee2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003ee6:	d0ea      	beq.n	8003ebe <_dtoa_r+0xac6>
 8003ee8:	f109 0901 	add.w	r9, r9, #1
 8003eec:	e7c4      	b.n	8003e78 <_dtoa_r+0xa80>
 8003eee:	9b02      	ldr	r3, [sp, #8]
 8003ef0:	9a04      	ldr	r2, [sp, #16]
 8003ef2:	f805 9c01 	strb.w	r9, [r5, #-1]
 8003ef6:	1aeb      	subs	r3, r5, r3
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	46a8      	mov	r8, r5
 8003efc:	f43f af4b 	beq.w	8003d96 <_dtoa_r+0x99e>
 8003f00:	4651      	mov	r1, sl
 8003f02:	2300      	movs	r3, #0
 8003f04:	220a      	movs	r2, #10
 8003f06:	4620      	mov	r0, r4
 8003f08:	f000 f982 	bl	8004210 <__multadd>
 8003f0c:	9b03      	ldr	r3, [sp, #12]
 8003f0e:	9903      	ldr	r1, [sp, #12]
 8003f10:	42bb      	cmp	r3, r7
 8003f12:	4682      	mov	sl, r0
 8003f14:	f04f 0300 	mov.w	r3, #0
 8003f18:	f04f 020a 	mov.w	r2, #10
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	d104      	bne.n	8003f2a <_dtoa_r+0xb32>
 8003f20:	f000 f976 	bl	8004210 <__multadd>
 8003f24:	9003      	str	r0, [sp, #12]
 8003f26:	4607      	mov	r7, r0
 8003f28:	e776      	b.n	8003e18 <_dtoa_r+0xa20>
 8003f2a:	f000 f971 	bl	8004210 <__multadd>
 8003f2e:	2300      	movs	r3, #0
 8003f30:	9003      	str	r0, [sp, #12]
 8003f32:	220a      	movs	r2, #10
 8003f34:	4639      	mov	r1, r7
 8003f36:	4620      	mov	r0, r4
 8003f38:	f000 f96a 	bl	8004210 <__multadd>
 8003f3c:	e7f3      	b.n	8003f26 <_dtoa_r+0xb2e>
 8003f3e:	4651      	mov	r1, sl
 8003f40:	2300      	movs	r3, #0
 8003f42:	220a      	movs	r2, #10
 8003f44:	4620      	mov	r0, r4
 8003f46:	f000 f963 	bl	8004210 <__multadd>
 8003f4a:	4682      	mov	sl, r0
 8003f4c:	e70d      	b.n	8003d6a <_dtoa_r+0x972>
 8003f4e:	9b02      	ldr	r3, [sp, #8]
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d105      	bne.n	8003f60 <_dtoa_r+0xb68>
 8003f54:	9a02      	ldr	r2, [sp, #8]
 8003f56:	f10b 0b01 	add.w	fp, fp, #1
 8003f5a:	2331      	movs	r3, #49	; 0x31
 8003f5c:	7013      	strb	r3, [r2, #0]
 8003f5e:	e6e2      	b.n	8003d26 <_dtoa_r+0x92e>
 8003f60:	4615      	mov	r5, r2
 8003f62:	e7b2      	b.n	8003eca <_dtoa_r+0xad2>
 8003f64:	4b09      	ldr	r3, [pc, #36]	; (8003f8c <_dtoa_r+0xb94>)
 8003f66:	f7ff baae 	b.w	80034c6 <_dtoa_r+0xce>
 8003f6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f47f aa88 	bne.w	8003482 <_dtoa_r+0x8a>
 8003f72:	4b07      	ldr	r3, [pc, #28]	; (8003f90 <_dtoa_r+0xb98>)
 8003f74:	f7ff baa7 	b.w	80034c6 <_dtoa_r+0xce>
 8003f78:	9b04      	ldr	r3, [sp, #16]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f73f aef4 	bgt.w	8003d68 <_dtoa_r+0x970>
 8003f80:	9b07      	ldr	r3, [sp, #28]
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	f77f aef0 	ble.w	8003d68 <_dtoa_r+0x970>
 8003f88:	e6b8      	b.n	8003cfc <_dtoa_r+0x904>
 8003f8a:	bf00      	nop
 8003f8c:	08005124 	.word	0x08005124
 8003f90:	08005148 	.word	0x08005148

08003f94 <_cleanup_r>:
 8003f94:	4901      	ldr	r1, [pc, #4]	; (8003f9c <_cleanup_r+0x8>)
 8003f96:	f000 b8a9 	b.w	80040ec <_fwalk_reent>
 8003f9a:	bf00      	nop
 8003f9c:	08004e8d 	.word	0x08004e8d

08003fa0 <std.isra.0>:
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	b510      	push	{r4, lr}
 8003fa4:	4604      	mov	r4, r0
 8003fa6:	6003      	str	r3, [r0, #0]
 8003fa8:	6043      	str	r3, [r0, #4]
 8003faa:	6083      	str	r3, [r0, #8]
 8003fac:	8181      	strh	r1, [r0, #12]
 8003fae:	6643      	str	r3, [r0, #100]	; 0x64
 8003fb0:	81c2      	strh	r2, [r0, #14]
 8003fb2:	6103      	str	r3, [r0, #16]
 8003fb4:	6143      	str	r3, [r0, #20]
 8003fb6:	6183      	str	r3, [r0, #24]
 8003fb8:	4619      	mov	r1, r3
 8003fba:	2208      	movs	r2, #8
 8003fbc:	305c      	adds	r0, #92	; 0x5c
 8003fbe:	f000 f8d4 	bl	800416a <memset>
 8003fc2:	4b05      	ldr	r3, [pc, #20]	; (8003fd8 <std.isra.0+0x38>)
 8003fc4:	6263      	str	r3, [r4, #36]	; 0x24
 8003fc6:	4b05      	ldr	r3, [pc, #20]	; (8003fdc <std.isra.0+0x3c>)
 8003fc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8003fca:	4b05      	ldr	r3, [pc, #20]	; (8003fe0 <std.isra.0+0x40>)
 8003fcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003fce:	4b05      	ldr	r3, [pc, #20]	; (8003fe4 <std.isra.0+0x44>)
 8003fd0:	6224      	str	r4, [r4, #32]
 8003fd2:	6323      	str	r3, [r4, #48]	; 0x30
 8003fd4:	bd10      	pop	{r4, pc}
 8003fd6:	bf00      	nop
 8003fd8:	08004b31 	.word	0x08004b31
 8003fdc:	08004b53 	.word	0x08004b53
 8003fe0:	08004b8b 	.word	0x08004b8b
 8003fe4:	08004baf 	.word	0x08004baf

08003fe8 <__sfmoreglue>:
 8003fe8:	b570      	push	{r4, r5, r6, lr}
 8003fea:	1e4a      	subs	r2, r1, #1
 8003fec:	2568      	movs	r5, #104	; 0x68
 8003fee:	4355      	muls	r5, r2
 8003ff0:	460e      	mov	r6, r1
 8003ff2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003ff6:	f000 fbed 	bl	80047d4 <_malloc_r>
 8003ffa:	4604      	mov	r4, r0
 8003ffc:	b140      	cbz	r0, 8004010 <__sfmoreglue+0x28>
 8003ffe:	2100      	movs	r1, #0
 8004000:	e880 0042 	stmia.w	r0, {r1, r6}
 8004004:	300c      	adds	r0, #12
 8004006:	60a0      	str	r0, [r4, #8]
 8004008:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800400c:	f000 f8ad 	bl	800416a <memset>
 8004010:	4620      	mov	r0, r4
 8004012:	bd70      	pop	{r4, r5, r6, pc}

08004014 <__sinit>:
 8004014:	6983      	ldr	r3, [r0, #24]
 8004016:	b510      	push	{r4, lr}
 8004018:	4604      	mov	r4, r0
 800401a:	bb33      	cbnz	r3, 800406a <__sinit+0x56>
 800401c:	6483      	str	r3, [r0, #72]	; 0x48
 800401e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8004020:	6503      	str	r3, [r0, #80]	; 0x50
 8004022:	4b12      	ldr	r3, [pc, #72]	; (800406c <__sinit+0x58>)
 8004024:	4a12      	ldr	r2, [pc, #72]	; (8004070 <__sinit+0x5c>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6282      	str	r2, [r0, #40]	; 0x28
 800402a:	4298      	cmp	r0, r3
 800402c:	bf04      	itt	eq
 800402e:	2301      	moveq	r3, #1
 8004030:	6183      	streq	r3, [r0, #24]
 8004032:	f000 f81f 	bl	8004074 <__sfp>
 8004036:	6060      	str	r0, [r4, #4]
 8004038:	4620      	mov	r0, r4
 800403a:	f000 f81b 	bl	8004074 <__sfp>
 800403e:	60a0      	str	r0, [r4, #8]
 8004040:	4620      	mov	r0, r4
 8004042:	f000 f817 	bl	8004074 <__sfp>
 8004046:	2200      	movs	r2, #0
 8004048:	60e0      	str	r0, [r4, #12]
 800404a:	2104      	movs	r1, #4
 800404c:	6860      	ldr	r0, [r4, #4]
 800404e:	f7ff ffa7 	bl	8003fa0 <std.isra.0>
 8004052:	2201      	movs	r2, #1
 8004054:	2109      	movs	r1, #9
 8004056:	68a0      	ldr	r0, [r4, #8]
 8004058:	f7ff ffa2 	bl	8003fa0 <std.isra.0>
 800405c:	2202      	movs	r2, #2
 800405e:	2112      	movs	r1, #18
 8004060:	68e0      	ldr	r0, [r4, #12]
 8004062:	f7ff ff9d 	bl	8003fa0 <std.isra.0>
 8004066:	2301      	movs	r3, #1
 8004068:	61a3      	str	r3, [r4, #24]
 800406a:	bd10      	pop	{r4, pc}
 800406c:	08005110 	.word	0x08005110
 8004070:	08003f95 	.word	0x08003f95

08004074 <__sfp>:
 8004074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004076:	4b1c      	ldr	r3, [pc, #112]	; (80040e8 <__sfp+0x74>)
 8004078:	681e      	ldr	r6, [r3, #0]
 800407a:	69b3      	ldr	r3, [r6, #24]
 800407c:	4607      	mov	r7, r0
 800407e:	b913      	cbnz	r3, 8004086 <__sfp+0x12>
 8004080:	4630      	mov	r0, r6
 8004082:	f7ff ffc7 	bl	8004014 <__sinit>
 8004086:	3648      	adds	r6, #72	; 0x48
 8004088:	68b4      	ldr	r4, [r6, #8]
 800408a:	6873      	ldr	r3, [r6, #4]
 800408c:	3b01      	subs	r3, #1
 800408e:	d503      	bpl.n	8004098 <__sfp+0x24>
 8004090:	6833      	ldr	r3, [r6, #0]
 8004092:	b133      	cbz	r3, 80040a2 <__sfp+0x2e>
 8004094:	6836      	ldr	r6, [r6, #0]
 8004096:	e7f7      	b.n	8004088 <__sfp+0x14>
 8004098:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800409c:	b16d      	cbz	r5, 80040ba <__sfp+0x46>
 800409e:	3468      	adds	r4, #104	; 0x68
 80040a0:	e7f4      	b.n	800408c <__sfp+0x18>
 80040a2:	2104      	movs	r1, #4
 80040a4:	4638      	mov	r0, r7
 80040a6:	f7ff ff9f 	bl	8003fe8 <__sfmoreglue>
 80040aa:	6030      	str	r0, [r6, #0]
 80040ac:	2800      	cmp	r0, #0
 80040ae:	d1f1      	bne.n	8004094 <__sfp+0x20>
 80040b0:	230c      	movs	r3, #12
 80040b2:	603b      	str	r3, [r7, #0]
 80040b4:	4604      	mov	r4, r0
 80040b6:	4620      	mov	r0, r4
 80040b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040be:	81e3      	strh	r3, [r4, #14]
 80040c0:	2301      	movs	r3, #1
 80040c2:	81a3      	strh	r3, [r4, #12]
 80040c4:	6665      	str	r5, [r4, #100]	; 0x64
 80040c6:	6025      	str	r5, [r4, #0]
 80040c8:	60a5      	str	r5, [r4, #8]
 80040ca:	6065      	str	r5, [r4, #4]
 80040cc:	6125      	str	r5, [r4, #16]
 80040ce:	6165      	str	r5, [r4, #20]
 80040d0:	61a5      	str	r5, [r4, #24]
 80040d2:	2208      	movs	r2, #8
 80040d4:	4629      	mov	r1, r5
 80040d6:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80040da:	f000 f846 	bl	800416a <memset>
 80040de:	6365      	str	r5, [r4, #52]	; 0x34
 80040e0:	63a5      	str	r5, [r4, #56]	; 0x38
 80040e2:	64a5      	str	r5, [r4, #72]	; 0x48
 80040e4:	64e5      	str	r5, [r4, #76]	; 0x4c
 80040e6:	e7e6      	b.n	80040b6 <__sfp+0x42>
 80040e8:	08005110 	.word	0x08005110

080040ec <_fwalk_reent>:
 80040ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040f0:	4680      	mov	r8, r0
 80040f2:	4689      	mov	r9, r1
 80040f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80040f8:	2600      	movs	r6, #0
 80040fa:	b914      	cbnz	r4, 8004102 <_fwalk_reent+0x16>
 80040fc:	4630      	mov	r0, r6
 80040fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004102:	68a5      	ldr	r5, [r4, #8]
 8004104:	6867      	ldr	r7, [r4, #4]
 8004106:	3f01      	subs	r7, #1
 8004108:	d501      	bpl.n	800410e <_fwalk_reent+0x22>
 800410a:	6824      	ldr	r4, [r4, #0]
 800410c:	e7f5      	b.n	80040fa <_fwalk_reent+0xe>
 800410e:	89ab      	ldrh	r3, [r5, #12]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d907      	bls.n	8004124 <_fwalk_reent+0x38>
 8004114:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004118:	3301      	adds	r3, #1
 800411a:	d003      	beq.n	8004124 <_fwalk_reent+0x38>
 800411c:	4629      	mov	r1, r5
 800411e:	4640      	mov	r0, r8
 8004120:	47c8      	blx	r9
 8004122:	4306      	orrs	r6, r0
 8004124:	3568      	adds	r5, #104	; 0x68
 8004126:	e7ee      	b.n	8004106 <_fwalk_reent+0x1a>

08004128 <_localeconv_r>:
 8004128:	4b04      	ldr	r3, [pc, #16]	; (800413c <_localeconv_r+0x14>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6a18      	ldr	r0, [r3, #32]
 800412e:	4b04      	ldr	r3, [pc, #16]	; (8004140 <_localeconv_r+0x18>)
 8004130:	2800      	cmp	r0, #0
 8004132:	bf08      	it	eq
 8004134:	4618      	moveq	r0, r3
 8004136:	30f0      	adds	r0, #240	; 0xf0
 8004138:	4770      	bx	lr
 800413a:	bf00      	nop
 800413c:	2000000c 	.word	0x2000000c
 8004140:	20000070 	.word	0x20000070

08004144 <malloc>:
 8004144:	4b02      	ldr	r3, [pc, #8]	; (8004150 <malloc+0xc>)
 8004146:	4601      	mov	r1, r0
 8004148:	6818      	ldr	r0, [r3, #0]
 800414a:	f000 bb43 	b.w	80047d4 <_malloc_r>
 800414e:	bf00      	nop
 8004150:	2000000c 	.word	0x2000000c

08004154 <memcpy>:
 8004154:	b510      	push	{r4, lr}
 8004156:	1e43      	subs	r3, r0, #1
 8004158:	440a      	add	r2, r1
 800415a:	4291      	cmp	r1, r2
 800415c:	d100      	bne.n	8004160 <memcpy+0xc>
 800415e:	bd10      	pop	{r4, pc}
 8004160:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004164:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004168:	e7f7      	b.n	800415a <memcpy+0x6>

0800416a <memset>:
 800416a:	4402      	add	r2, r0
 800416c:	4603      	mov	r3, r0
 800416e:	4293      	cmp	r3, r2
 8004170:	d100      	bne.n	8004174 <memset+0xa>
 8004172:	4770      	bx	lr
 8004174:	f803 1b01 	strb.w	r1, [r3], #1
 8004178:	e7f9      	b.n	800416e <memset+0x4>

0800417a <_Balloc>:
 800417a:	b570      	push	{r4, r5, r6, lr}
 800417c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800417e:	4604      	mov	r4, r0
 8004180:	460e      	mov	r6, r1
 8004182:	b93d      	cbnz	r5, 8004194 <_Balloc+0x1a>
 8004184:	2010      	movs	r0, #16
 8004186:	f7ff ffdd 	bl	8004144 <malloc>
 800418a:	6260      	str	r0, [r4, #36]	; 0x24
 800418c:	6045      	str	r5, [r0, #4]
 800418e:	6085      	str	r5, [r0, #8]
 8004190:	6005      	str	r5, [r0, #0]
 8004192:	60c5      	str	r5, [r0, #12]
 8004194:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004196:	68eb      	ldr	r3, [r5, #12]
 8004198:	b183      	cbz	r3, 80041bc <_Balloc+0x42>
 800419a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80041a2:	b9b8      	cbnz	r0, 80041d4 <_Balloc+0x5a>
 80041a4:	2101      	movs	r1, #1
 80041a6:	fa01 f506 	lsl.w	r5, r1, r6
 80041aa:	1d6a      	adds	r2, r5, #5
 80041ac:	0092      	lsls	r2, r2, #2
 80041ae:	4620      	mov	r0, r4
 80041b0:	f000 fab4 	bl	800471c <_calloc_r>
 80041b4:	b160      	cbz	r0, 80041d0 <_Balloc+0x56>
 80041b6:	6046      	str	r6, [r0, #4]
 80041b8:	6085      	str	r5, [r0, #8]
 80041ba:	e00e      	b.n	80041da <_Balloc+0x60>
 80041bc:	2221      	movs	r2, #33	; 0x21
 80041be:	2104      	movs	r1, #4
 80041c0:	4620      	mov	r0, r4
 80041c2:	f000 faab 	bl	800471c <_calloc_r>
 80041c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041c8:	60e8      	str	r0, [r5, #12]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1e4      	bne.n	800419a <_Balloc+0x20>
 80041d0:	2000      	movs	r0, #0
 80041d2:	bd70      	pop	{r4, r5, r6, pc}
 80041d4:	6802      	ldr	r2, [r0, #0]
 80041d6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80041da:	2300      	movs	r3, #0
 80041dc:	6103      	str	r3, [r0, #16]
 80041de:	60c3      	str	r3, [r0, #12]
 80041e0:	bd70      	pop	{r4, r5, r6, pc}

080041e2 <_Bfree>:
 80041e2:	b570      	push	{r4, r5, r6, lr}
 80041e4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80041e6:	4606      	mov	r6, r0
 80041e8:	460d      	mov	r5, r1
 80041ea:	b93c      	cbnz	r4, 80041fc <_Bfree+0x1a>
 80041ec:	2010      	movs	r0, #16
 80041ee:	f7ff ffa9 	bl	8004144 <malloc>
 80041f2:	6270      	str	r0, [r6, #36]	; 0x24
 80041f4:	6044      	str	r4, [r0, #4]
 80041f6:	6084      	str	r4, [r0, #8]
 80041f8:	6004      	str	r4, [r0, #0]
 80041fa:	60c4      	str	r4, [r0, #12]
 80041fc:	b13d      	cbz	r5, 800420e <_Bfree+0x2c>
 80041fe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004200:	686a      	ldr	r2, [r5, #4]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004208:	6029      	str	r1, [r5, #0]
 800420a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800420e:	bd70      	pop	{r4, r5, r6, pc}

08004210 <__multadd>:
 8004210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004214:	690d      	ldr	r5, [r1, #16]
 8004216:	461f      	mov	r7, r3
 8004218:	4606      	mov	r6, r0
 800421a:	460c      	mov	r4, r1
 800421c:	f101 0e14 	add.w	lr, r1, #20
 8004220:	2300      	movs	r3, #0
 8004222:	f8de 0000 	ldr.w	r0, [lr]
 8004226:	b281      	uxth	r1, r0
 8004228:	fb02 7101 	mla	r1, r2, r1, r7
 800422c:	0c0f      	lsrs	r7, r1, #16
 800422e:	0c00      	lsrs	r0, r0, #16
 8004230:	fb02 7000 	mla	r0, r2, r0, r7
 8004234:	b289      	uxth	r1, r1
 8004236:	3301      	adds	r3, #1
 8004238:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800423c:	429d      	cmp	r5, r3
 800423e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004242:	f84e 1b04 	str.w	r1, [lr], #4
 8004246:	dcec      	bgt.n	8004222 <__multadd+0x12>
 8004248:	b1d7      	cbz	r7, 8004280 <__multadd+0x70>
 800424a:	68a3      	ldr	r3, [r4, #8]
 800424c:	429d      	cmp	r5, r3
 800424e:	db12      	blt.n	8004276 <__multadd+0x66>
 8004250:	6861      	ldr	r1, [r4, #4]
 8004252:	4630      	mov	r0, r6
 8004254:	3101      	adds	r1, #1
 8004256:	f7ff ff90 	bl	800417a <_Balloc>
 800425a:	6922      	ldr	r2, [r4, #16]
 800425c:	3202      	adds	r2, #2
 800425e:	f104 010c 	add.w	r1, r4, #12
 8004262:	4680      	mov	r8, r0
 8004264:	0092      	lsls	r2, r2, #2
 8004266:	300c      	adds	r0, #12
 8004268:	f7ff ff74 	bl	8004154 <memcpy>
 800426c:	4621      	mov	r1, r4
 800426e:	4630      	mov	r0, r6
 8004270:	f7ff ffb7 	bl	80041e2 <_Bfree>
 8004274:	4644      	mov	r4, r8
 8004276:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800427a:	3501      	adds	r5, #1
 800427c:	615f      	str	r7, [r3, #20]
 800427e:	6125      	str	r5, [r4, #16]
 8004280:	4620      	mov	r0, r4
 8004282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004286 <__hi0bits>:
 8004286:	0c02      	lsrs	r2, r0, #16
 8004288:	0412      	lsls	r2, r2, #16
 800428a:	4603      	mov	r3, r0
 800428c:	b9b2      	cbnz	r2, 80042bc <__hi0bits+0x36>
 800428e:	0403      	lsls	r3, r0, #16
 8004290:	2010      	movs	r0, #16
 8004292:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004296:	bf04      	itt	eq
 8004298:	021b      	lsleq	r3, r3, #8
 800429a:	3008      	addeq	r0, #8
 800429c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80042a0:	bf04      	itt	eq
 80042a2:	011b      	lsleq	r3, r3, #4
 80042a4:	3004      	addeq	r0, #4
 80042a6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80042aa:	bf04      	itt	eq
 80042ac:	009b      	lsleq	r3, r3, #2
 80042ae:	3002      	addeq	r0, #2
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	db06      	blt.n	80042c2 <__hi0bits+0x3c>
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	d503      	bpl.n	80042c0 <__hi0bits+0x3a>
 80042b8:	3001      	adds	r0, #1
 80042ba:	4770      	bx	lr
 80042bc:	2000      	movs	r0, #0
 80042be:	e7e8      	b.n	8004292 <__hi0bits+0xc>
 80042c0:	2020      	movs	r0, #32
 80042c2:	4770      	bx	lr

080042c4 <__lo0bits>:
 80042c4:	6803      	ldr	r3, [r0, #0]
 80042c6:	f013 0207 	ands.w	r2, r3, #7
 80042ca:	4601      	mov	r1, r0
 80042cc:	d00b      	beq.n	80042e6 <__lo0bits+0x22>
 80042ce:	07da      	lsls	r2, r3, #31
 80042d0:	d423      	bmi.n	800431a <__lo0bits+0x56>
 80042d2:	0798      	lsls	r0, r3, #30
 80042d4:	bf49      	itett	mi
 80042d6:	085b      	lsrmi	r3, r3, #1
 80042d8:	089b      	lsrpl	r3, r3, #2
 80042da:	2001      	movmi	r0, #1
 80042dc:	600b      	strmi	r3, [r1, #0]
 80042de:	bf5c      	itt	pl
 80042e0:	600b      	strpl	r3, [r1, #0]
 80042e2:	2002      	movpl	r0, #2
 80042e4:	4770      	bx	lr
 80042e6:	b298      	uxth	r0, r3
 80042e8:	b9a8      	cbnz	r0, 8004316 <__lo0bits+0x52>
 80042ea:	0c1b      	lsrs	r3, r3, #16
 80042ec:	2010      	movs	r0, #16
 80042ee:	f013 0fff 	tst.w	r3, #255	; 0xff
 80042f2:	bf04      	itt	eq
 80042f4:	0a1b      	lsreq	r3, r3, #8
 80042f6:	3008      	addeq	r0, #8
 80042f8:	071a      	lsls	r2, r3, #28
 80042fa:	bf04      	itt	eq
 80042fc:	091b      	lsreq	r3, r3, #4
 80042fe:	3004      	addeq	r0, #4
 8004300:	079a      	lsls	r2, r3, #30
 8004302:	bf04      	itt	eq
 8004304:	089b      	lsreq	r3, r3, #2
 8004306:	3002      	addeq	r0, #2
 8004308:	07da      	lsls	r2, r3, #31
 800430a:	d402      	bmi.n	8004312 <__lo0bits+0x4e>
 800430c:	085b      	lsrs	r3, r3, #1
 800430e:	d006      	beq.n	800431e <__lo0bits+0x5a>
 8004310:	3001      	adds	r0, #1
 8004312:	600b      	str	r3, [r1, #0]
 8004314:	4770      	bx	lr
 8004316:	4610      	mov	r0, r2
 8004318:	e7e9      	b.n	80042ee <__lo0bits+0x2a>
 800431a:	2000      	movs	r0, #0
 800431c:	4770      	bx	lr
 800431e:	2020      	movs	r0, #32
 8004320:	4770      	bx	lr

08004322 <__i2b>:
 8004322:	b510      	push	{r4, lr}
 8004324:	460c      	mov	r4, r1
 8004326:	2101      	movs	r1, #1
 8004328:	f7ff ff27 	bl	800417a <_Balloc>
 800432c:	2201      	movs	r2, #1
 800432e:	6144      	str	r4, [r0, #20]
 8004330:	6102      	str	r2, [r0, #16]
 8004332:	bd10      	pop	{r4, pc}

08004334 <__multiply>:
 8004334:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004338:	4614      	mov	r4, r2
 800433a:	690a      	ldr	r2, [r1, #16]
 800433c:	6923      	ldr	r3, [r4, #16]
 800433e:	429a      	cmp	r2, r3
 8004340:	bfb8      	it	lt
 8004342:	460b      	movlt	r3, r1
 8004344:	4689      	mov	r9, r1
 8004346:	bfbc      	itt	lt
 8004348:	46a1      	movlt	r9, r4
 800434a:	461c      	movlt	r4, r3
 800434c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004350:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004354:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004358:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800435c:	eb07 060a 	add.w	r6, r7, sl
 8004360:	429e      	cmp	r6, r3
 8004362:	bfc8      	it	gt
 8004364:	3101      	addgt	r1, #1
 8004366:	f7ff ff08 	bl	800417a <_Balloc>
 800436a:	f100 0514 	add.w	r5, r0, #20
 800436e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004372:	462b      	mov	r3, r5
 8004374:	2200      	movs	r2, #0
 8004376:	4543      	cmp	r3, r8
 8004378:	d316      	bcc.n	80043a8 <__multiply+0x74>
 800437a:	f104 0214 	add.w	r2, r4, #20
 800437e:	f109 0114 	add.w	r1, r9, #20
 8004382:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8004386:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800438a:	9301      	str	r3, [sp, #4]
 800438c:	9c01      	ldr	r4, [sp, #4]
 800438e:	4294      	cmp	r4, r2
 8004390:	4613      	mov	r3, r2
 8004392:	d80c      	bhi.n	80043ae <__multiply+0x7a>
 8004394:	2e00      	cmp	r6, #0
 8004396:	dd03      	ble.n	80043a0 <__multiply+0x6c>
 8004398:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800439c:	2b00      	cmp	r3, #0
 800439e:	d054      	beq.n	800444a <__multiply+0x116>
 80043a0:	6106      	str	r6, [r0, #16]
 80043a2:	b003      	add	sp, #12
 80043a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043a8:	f843 2b04 	str.w	r2, [r3], #4
 80043ac:	e7e3      	b.n	8004376 <__multiply+0x42>
 80043ae:	f8b3 a000 	ldrh.w	sl, [r3]
 80043b2:	3204      	adds	r2, #4
 80043b4:	f1ba 0f00 	cmp.w	sl, #0
 80043b8:	d020      	beq.n	80043fc <__multiply+0xc8>
 80043ba:	46ae      	mov	lr, r5
 80043bc:	4689      	mov	r9, r1
 80043be:	f04f 0c00 	mov.w	ip, #0
 80043c2:	f859 4b04 	ldr.w	r4, [r9], #4
 80043c6:	f8be b000 	ldrh.w	fp, [lr]
 80043ca:	b2a3      	uxth	r3, r4
 80043cc:	fb0a b303 	mla	r3, sl, r3, fp
 80043d0:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 80043d4:	f8de 4000 	ldr.w	r4, [lr]
 80043d8:	4463      	add	r3, ip
 80043da:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80043de:	fb0a c40b 	mla	r4, sl, fp, ip
 80043e2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80043e6:	b29b      	uxth	r3, r3
 80043e8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80043ec:	454f      	cmp	r7, r9
 80043ee:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80043f2:	f84e 3b04 	str.w	r3, [lr], #4
 80043f6:	d8e4      	bhi.n	80043c2 <__multiply+0x8e>
 80043f8:	f8ce c000 	str.w	ip, [lr]
 80043fc:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8004400:	f1b9 0f00 	cmp.w	r9, #0
 8004404:	d01f      	beq.n	8004446 <__multiply+0x112>
 8004406:	682b      	ldr	r3, [r5, #0]
 8004408:	46ae      	mov	lr, r5
 800440a:	468c      	mov	ip, r1
 800440c:	f04f 0a00 	mov.w	sl, #0
 8004410:	f8bc 4000 	ldrh.w	r4, [ip]
 8004414:	f8be b002 	ldrh.w	fp, [lr, #2]
 8004418:	fb09 b404 	mla	r4, r9, r4, fp
 800441c:	44a2      	add	sl, r4
 800441e:	b29b      	uxth	r3, r3
 8004420:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8004424:	f84e 3b04 	str.w	r3, [lr], #4
 8004428:	f85c 3b04 	ldr.w	r3, [ip], #4
 800442c:	f8be 4000 	ldrh.w	r4, [lr]
 8004430:	0c1b      	lsrs	r3, r3, #16
 8004432:	fb09 4303 	mla	r3, r9, r3, r4
 8004436:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 800443a:	4567      	cmp	r7, ip
 800443c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004440:	d8e6      	bhi.n	8004410 <__multiply+0xdc>
 8004442:	f8ce 3000 	str.w	r3, [lr]
 8004446:	3504      	adds	r5, #4
 8004448:	e7a0      	b.n	800438c <__multiply+0x58>
 800444a:	3e01      	subs	r6, #1
 800444c:	e7a2      	b.n	8004394 <__multiply+0x60>
	...

08004450 <__pow5mult>:
 8004450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004454:	4615      	mov	r5, r2
 8004456:	f012 0203 	ands.w	r2, r2, #3
 800445a:	4606      	mov	r6, r0
 800445c:	460f      	mov	r7, r1
 800445e:	d007      	beq.n	8004470 <__pow5mult+0x20>
 8004460:	3a01      	subs	r2, #1
 8004462:	4c21      	ldr	r4, [pc, #132]	; (80044e8 <__pow5mult+0x98>)
 8004464:	2300      	movs	r3, #0
 8004466:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800446a:	f7ff fed1 	bl	8004210 <__multadd>
 800446e:	4607      	mov	r7, r0
 8004470:	10ad      	asrs	r5, r5, #2
 8004472:	d035      	beq.n	80044e0 <__pow5mult+0x90>
 8004474:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004476:	b93c      	cbnz	r4, 8004488 <__pow5mult+0x38>
 8004478:	2010      	movs	r0, #16
 800447a:	f7ff fe63 	bl	8004144 <malloc>
 800447e:	6270      	str	r0, [r6, #36]	; 0x24
 8004480:	6044      	str	r4, [r0, #4]
 8004482:	6084      	str	r4, [r0, #8]
 8004484:	6004      	str	r4, [r0, #0]
 8004486:	60c4      	str	r4, [r0, #12]
 8004488:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800448c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004490:	b94c      	cbnz	r4, 80044a6 <__pow5mult+0x56>
 8004492:	f240 2171 	movw	r1, #625	; 0x271
 8004496:	4630      	mov	r0, r6
 8004498:	f7ff ff43 	bl	8004322 <__i2b>
 800449c:	2300      	movs	r3, #0
 800449e:	f8c8 0008 	str.w	r0, [r8, #8]
 80044a2:	4604      	mov	r4, r0
 80044a4:	6003      	str	r3, [r0, #0]
 80044a6:	f04f 0800 	mov.w	r8, #0
 80044aa:	07eb      	lsls	r3, r5, #31
 80044ac:	d50a      	bpl.n	80044c4 <__pow5mult+0x74>
 80044ae:	4639      	mov	r1, r7
 80044b0:	4622      	mov	r2, r4
 80044b2:	4630      	mov	r0, r6
 80044b4:	f7ff ff3e 	bl	8004334 <__multiply>
 80044b8:	4639      	mov	r1, r7
 80044ba:	4681      	mov	r9, r0
 80044bc:	4630      	mov	r0, r6
 80044be:	f7ff fe90 	bl	80041e2 <_Bfree>
 80044c2:	464f      	mov	r7, r9
 80044c4:	106d      	asrs	r5, r5, #1
 80044c6:	d00b      	beq.n	80044e0 <__pow5mult+0x90>
 80044c8:	6820      	ldr	r0, [r4, #0]
 80044ca:	b938      	cbnz	r0, 80044dc <__pow5mult+0x8c>
 80044cc:	4622      	mov	r2, r4
 80044ce:	4621      	mov	r1, r4
 80044d0:	4630      	mov	r0, r6
 80044d2:	f7ff ff2f 	bl	8004334 <__multiply>
 80044d6:	6020      	str	r0, [r4, #0]
 80044d8:	f8c0 8000 	str.w	r8, [r0]
 80044dc:	4604      	mov	r4, r0
 80044de:	e7e4      	b.n	80044aa <__pow5mult+0x5a>
 80044e0:	4638      	mov	r0, r7
 80044e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044e6:	bf00      	nop
 80044e8:	080052a8 	.word	0x080052a8

080044ec <__lshift>:
 80044ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044f0:	460c      	mov	r4, r1
 80044f2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80044f6:	6923      	ldr	r3, [r4, #16]
 80044f8:	6849      	ldr	r1, [r1, #4]
 80044fa:	eb0a 0903 	add.w	r9, sl, r3
 80044fe:	68a3      	ldr	r3, [r4, #8]
 8004500:	4607      	mov	r7, r0
 8004502:	4616      	mov	r6, r2
 8004504:	f109 0501 	add.w	r5, r9, #1
 8004508:	42ab      	cmp	r3, r5
 800450a:	db31      	blt.n	8004570 <__lshift+0x84>
 800450c:	4638      	mov	r0, r7
 800450e:	f7ff fe34 	bl	800417a <_Balloc>
 8004512:	2200      	movs	r2, #0
 8004514:	4680      	mov	r8, r0
 8004516:	f100 0314 	add.w	r3, r0, #20
 800451a:	4611      	mov	r1, r2
 800451c:	4552      	cmp	r2, sl
 800451e:	db2a      	blt.n	8004576 <__lshift+0x8a>
 8004520:	6920      	ldr	r0, [r4, #16]
 8004522:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004526:	f104 0114 	add.w	r1, r4, #20
 800452a:	f016 021f 	ands.w	r2, r6, #31
 800452e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8004532:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8004536:	d022      	beq.n	800457e <__lshift+0x92>
 8004538:	f1c2 0c20 	rsb	ip, r2, #32
 800453c:	2000      	movs	r0, #0
 800453e:	680e      	ldr	r6, [r1, #0]
 8004540:	4096      	lsls	r6, r2
 8004542:	4330      	orrs	r0, r6
 8004544:	f843 0b04 	str.w	r0, [r3], #4
 8004548:	f851 0b04 	ldr.w	r0, [r1], #4
 800454c:	458e      	cmp	lr, r1
 800454e:	fa20 f00c 	lsr.w	r0, r0, ip
 8004552:	d8f4      	bhi.n	800453e <__lshift+0x52>
 8004554:	6018      	str	r0, [r3, #0]
 8004556:	b108      	cbz	r0, 800455c <__lshift+0x70>
 8004558:	f109 0502 	add.w	r5, r9, #2
 800455c:	3d01      	subs	r5, #1
 800455e:	4638      	mov	r0, r7
 8004560:	f8c8 5010 	str.w	r5, [r8, #16]
 8004564:	4621      	mov	r1, r4
 8004566:	f7ff fe3c 	bl	80041e2 <_Bfree>
 800456a:	4640      	mov	r0, r8
 800456c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004570:	3101      	adds	r1, #1
 8004572:	005b      	lsls	r3, r3, #1
 8004574:	e7c8      	b.n	8004508 <__lshift+0x1c>
 8004576:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800457a:	3201      	adds	r2, #1
 800457c:	e7ce      	b.n	800451c <__lshift+0x30>
 800457e:	3b04      	subs	r3, #4
 8004580:	f851 2b04 	ldr.w	r2, [r1], #4
 8004584:	f843 2f04 	str.w	r2, [r3, #4]!
 8004588:	458e      	cmp	lr, r1
 800458a:	d8f9      	bhi.n	8004580 <__lshift+0x94>
 800458c:	e7e6      	b.n	800455c <__lshift+0x70>

0800458e <__mcmp>:
 800458e:	6903      	ldr	r3, [r0, #16]
 8004590:	690a      	ldr	r2, [r1, #16]
 8004592:	1a9b      	subs	r3, r3, r2
 8004594:	b530      	push	{r4, r5, lr}
 8004596:	d10c      	bne.n	80045b2 <__mcmp+0x24>
 8004598:	0092      	lsls	r2, r2, #2
 800459a:	3014      	adds	r0, #20
 800459c:	3114      	adds	r1, #20
 800459e:	1884      	adds	r4, r0, r2
 80045a0:	4411      	add	r1, r2
 80045a2:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80045a6:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80045aa:	4295      	cmp	r5, r2
 80045ac:	d003      	beq.n	80045b6 <__mcmp+0x28>
 80045ae:	d305      	bcc.n	80045bc <__mcmp+0x2e>
 80045b0:	2301      	movs	r3, #1
 80045b2:	4618      	mov	r0, r3
 80045b4:	bd30      	pop	{r4, r5, pc}
 80045b6:	42a0      	cmp	r0, r4
 80045b8:	d3f3      	bcc.n	80045a2 <__mcmp+0x14>
 80045ba:	e7fa      	b.n	80045b2 <__mcmp+0x24>
 80045bc:	f04f 33ff 	mov.w	r3, #4294967295
 80045c0:	e7f7      	b.n	80045b2 <__mcmp+0x24>

080045c2 <__mdiff>:
 80045c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045c6:	460d      	mov	r5, r1
 80045c8:	4607      	mov	r7, r0
 80045ca:	4611      	mov	r1, r2
 80045cc:	4628      	mov	r0, r5
 80045ce:	4614      	mov	r4, r2
 80045d0:	f7ff ffdd 	bl	800458e <__mcmp>
 80045d4:	1e06      	subs	r6, r0, #0
 80045d6:	d108      	bne.n	80045ea <__mdiff+0x28>
 80045d8:	4631      	mov	r1, r6
 80045da:	4638      	mov	r0, r7
 80045dc:	f7ff fdcd 	bl	800417a <_Balloc>
 80045e0:	2301      	movs	r3, #1
 80045e2:	6103      	str	r3, [r0, #16]
 80045e4:	6146      	str	r6, [r0, #20]
 80045e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045ea:	bfa4      	itt	ge
 80045ec:	4623      	movge	r3, r4
 80045ee:	462c      	movge	r4, r5
 80045f0:	4638      	mov	r0, r7
 80045f2:	6861      	ldr	r1, [r4, #4]
 80045f4:	bfa6      	itte	ge
 80045f6:	461d      	movge	r5, r3
 80045f8:	2600      	movge	r6, #0
 80045fa:	2601      	movlt	r6, #1
 80045fc:	f7ff fdbd 	bl	800417a <_Balloc>
 8004600:	692b      	ldr	r3, [r5, #16]
 8004602:	60c6      	str	r6, [r0, #12]
 8004604:	6926      	ldr	r6, [r4, #16]
 8004606:	f105 0914 	add.w	r9, r5, #20
 800460a:	f104 0214 	add.w	r2, r4, #20
 800460e:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004612:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004616:	f100 0514 	add.w	r5, r0, #20
 800461a:	f04f 0c00 	mov.w	ip, #0
 800461e:	f852 ab04 	ldr.w	sl, [r2], #4
 8004622:	f859 4b04 	ldr.w	r4, [r9], #4
 8004626:	fa1c f18a 	uxtah	r1, ip, sl
 800462a:	b2a3      	uxth	r3, r4
 800462c:	1ac9      	subs	r1, r1, r3
 800462e:	0c23      	lsrs	r3, r4, #16
 8004630:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8004634:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8004638:	b289      	uxth	r1, r1
 800463a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800463e:	45c8      	cmp	r8, r9
 8004640:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8004644:	4696      	mov	lr, r2
 8004646:	f845 3b04 	str.w	r3, [r5], #4
 800464a:	d8e8      	bhi.n	800461e <__mdiff+0x5c>
 800464c:	45be      	cmp	lr, r7
 800464e:	d305      	bcc.n	800465c <__mdiff+0x9a>
 8004650:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8004654:	b18b      	cbz	r3, 800467a <__mdiff+0xb8>
 8004656:	6106      	str	r6, [r0, #16]
 8004658:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800465c:	f85e 1b04 	ldr.w	r1, [lr], #4
 8004660:	fa1c f381 	uxtah	r3, ip, r1
 8004664:	141a      	asrs	r2, r3, #16
 8004666:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800466a:	b29b      	uxth	r3, r3
 800466c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004670:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004674:	f845 3b04 	str.w	r3, [r5], #4
 8004678:	e7e8      	b.n	800464c <__mdiff+0x8a>
 800467a:	3e01      	subs	r6, #1
 800467c:	e7e8      	b.n	8004650 <__mdiff+0x8e>

0800467e <__d2b>:
 800467e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004682:	460e      	mov	r6, r1
 8004684:	2101      	movs	r1, #1
 8004686:	ec59 8b10 	vmov	r8, r9, d0
 800468a:	4615      	mov	r5, r2
 800468c:	f7ff fd75 	bl	800417a <_Balloc>
 8004690:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004694:	4607      	mov	r7, r0
 8004696:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800469a:	bb34      	cbnz	r4, 80046ea <__d2b+0x6c>
 800469c:	9301      	str	r3, [sp, #4]
 800469e:	f1b8 0f00 	cmp.w	r8, #0
 80046a2:	d027      	beq.n	80046f4 <__d2b+0x76>
 80046a4:	a802      	add	r0, sp, #8
 80046a6:	f840 8d08 	str.w	r8, [r0, #-8]!
 80046aa:	f7ff fe0b 	bl	80042c4 <__lo0bits>
 80046ae:	9900      	ldr	r1, [sp, #0]
 80046b0:	b1f0      	cbz	r0, 80046f0 <__d2b+0x72>
 80046b2:	9a01      	ldr	r2, [sp, #4]
 80046b4:	f1c0 0320 	rsb	r3, r0, #32
 80046b8:	fa02 f303 	lsl.w	r3, r2, r3
 80046bc:	430b      	orrs	r3, r1
 80046be:	40c2      	lsrs	r2, r0
 80046c0:	617b      	str	r3, [r7, #20]
 80046c2:	9201      	str	r2, [sp, #4]
 80046c4:	9b01      	ldr	r3, [sp, #4]
 80046c6:	61bb      	str	r3, [r7, #24]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	bf14      	ite	ne
 80046cc:	2102      	movne	r1, #2
 80046ce:	2101      	moveq	r1, #1
 80046d0:	6139      	str	r1, [r7, #16]
 80046d2:	b1c4      	cbz	r4, 8004706 <__d2b+0x88>
 80046d4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80046d8:	4404      	add	r4, r0
 80046da:	6034      	str	r4, [r6, #0]
 80046dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80046e0:	6028      	str	r0, [r5, #0]
 80046e2:	4638      	mov	r0, r7
 80046e4:	b003      	add	sp, #12
 80046e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80046ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046ee:	e7d5      	b.n	800469c <__d2b+0x1e>
 80046f0:	6179      	str	r1, [r7, #20]
 80046f2:	e7e7      	b.n	80046c4 <__d2b+0x46>
 80046f4:	a801      	add	r0, sp, #4
 80046f6:	f7ff fde5 	bl	80042c4 <__lo0bits>
 80046fa:	9b01      	ldr	r3, [sp, #4]
 80046fc:	617b      	str	r3, [r7, #20]
 80046fe:	2101      	movs	r1, #1
 8004700:	6139      	str	r1, [r7, #16]
 8004702:	3020      	adds	r0, #32
 8004704:	e7e5      	b.n	80046d2 <__d2b+0x54>
 8004706:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800470a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800470e:	6030      	str	r0, [r6, #0]
 8004710:	6918      	ldr	r0, [r3, #16]
 8004712:	f7ff fdb8 	bl	8004286 <__hi0bits>
 8004716:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800471a:	e7e1      	b.n	80046e0 <__d2b+0x62>

0800471c <_calloc_r>:
 800471c:	b538      	push	{r3, r4, r5, lr}
 800471e:	fb02 f401 	mul.w	r4, r2, r1
 8004722:	4621      	mov	r1, r4
 8004724:	f000 f856 	bl	80047d4 <_malloc_r>
 8004728:	4605      	mov	r5, r0
 800472a:	b118      	cbz	r0, 8004734 <_calloc_r+0x18>
 800472c:	4622      	mov	r2, r4
 800472e:	2100      	movs	r1, #0
 8004730:	f7ff fd1b 	bl	800416a <memset>
 8004734:	4628      	mov	r0, r5
 8004736:	bd38      	pop	{r3, r4, r5, pc}

08004738 <_free_r>:
 8004738:	b538      	push	{r3, r4, r5, lr}
 800473a:	4605      	mov	r5, r0
 800473c:	2900      	cmp	r1, #0
 800473e:	d045      	beq.n	80047cc <_free_r+0x94>
 8004740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004744:	1f0c      	subs	r4, r1, #4
 8004746:	2b00      	cmp	r3, #0
 8004748:	bfb8      	it	lt
 800474a:	18e4      	addlt	r4, r4, r3
 800474c:	f000 fc50 	bl	8004ff0 <__malloc_lock>
 8004750:	4a1f      	ldr	r2, [pc, #124]	; (80047d0 <_free_r+0x98>)
 8004752:	6813      	ldr	r3, [r2, #0]
 8004754:	4610      	mov	r0, r2
 8004756:	b933      	cbnz	r3, 8004766 <_free_r+0x2e>
 8004758:	6063      	str	r3, [r4, #4]
 800475a:	6014      	str	r4, [r2, #0]
 800475c:	4628      	mov	r0, r5
 800475e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004762:	f000 bc46 	b.w	8004ff2 <__malloc_unlock>
 8004766:	42a3      	cmp	r3, r4
 8004768:	d90c      	bls.n	8004784 <_free_r+0x4c>
 800476a:	6821      	ldr	r1, [r4, #0]
 800476c:	1862      	adds	r2, r4, r1
 800476e:	4293      	cmp	r3, r2
 8004770:	bf04      	itt	eq
 8004772:	681a      	ldreq	r2, [r3, #0]
 8004774:	685b      	ldreq	r3, [r3, #4]
 8004776:	6063      	str	r3, [r4, #4]
 8004778:	bf04      	itt	eq
 800477a:	1852      	addeq	r2, r2, r1
 800477c:	6022      	streq	r2, [r4, #0]
 800477e:	6004      	str	r4, [r0, #0]
 8004780:	e7ec      	b.n	800475c <_free_r+0x24>
 8004782:	4613      	mov	r3, r2
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	b10a      	cbz	r2, 800478c <_free_r+0x54>
 8004788:	42a2      	cmp	r2, r4
 800478a:	d9fa      	bls.n	8004782 <_free_r+0x4a>
 800478c:	6819      	ldr	r1, [r3, #0]
 800478e:	1858      	adds	r0, r3, r1
 8004790:	42a0      	cmp	r0, r4
 8004792:	d10b      	bne.n	80047ac <_free_r+0x74>
 8004794:	6820      	ldr	r0, [r4, #0]
 8004796:	4401      	add	r1, r0
 8004798:	1858      	adds	r0, r3, r1
 800479a:	4282      	cmp	r2, r0
 800479c:	6019      	str	r1, [r3, #0]
 800479e:	d1dd      	bne.n	800475c <_free_r+0x24>
 80047a0:	6810      	ldr	r0, [r2, #0]
 80047a2:	6852      	ldr	r2, [r2, #4]
 80047a4:	605a      	str	r2, [r3, #4]
 80047a6:	4401      	add	r1, r0
 80047a8:	6019      	str	r1, [r3, #0]
 80047aa:	e7d7      	b.n	800475c <_free_r+0x24>
 80047ac:	d902      	bls.n	80047b4 <_free_r+0x7c>
 80047ae:	230c      	movs	r3, #12
 80047b0:	602b      	str	r3, [r5, #0]
 80047b2:	e7d3      	b.n	800475c <_free_r+0x24>
 80047b4:	6820      	ldr	r0, [r4, #0]
 80047b6:	1821      	adds	r1, r4, r0
 80047b8:	428a      	cmp	r2, r1
 80047ba:	bf04      	itt	eq
 80047bc:	6811      	ldreq	r1, [r2, #0]
 80047be:	6852      	ldreq	r2, [r2, #4]
 80047c0:	6062      	str	r2, [r4, #4]
 80047c2:	bf04      	itt	eq
 80047c4:	1809      	addeq	r1, r1, r0
 80047c6:	6021      	streq	r1, [r4, #0]
 80047c8:	605c      	str	r4, [r3, #4]
 80047ca:	e7c7      	b.n	800475c <_free_r+0x24>
 80047cc:	bd38      	pop	{r3, r4, r5, pc}
 80047ce:	bf00      	nop
 80047d0:	2000020c 	.word	0x2000020c

080047d4 <_malloc_r>:
 80047d4:	b570      	push	{r4, r5, r6, lr}
 80047d6:	1ccd      	adds	r5, r1, #3
 80047d8:	f025 0503 	bic.w	r5, r5, #3
 80047dc:	3508      	adds	r5, #8
 80047de:	2d0c      	cmp	r5, #12
 80047e0:	bf38      	it	cc
 80047e2:	250c      	movcc	r5, #12
 80047e4:	2d00      	cmp	r5, #0
 80047e6:	4606      	mov	r6, r0
 80047e8:	db01      	blt.n	80047ee <_malloc_r+0x1a>
 80047ea:	42a9      	cmp	r1, r5
 80047ec:	d903      	bls.n	80047f6 <_malloc_r+0x22>
 80047ee:	230c      	movs	r3, #12
 80047f0:	6033      	str	r3, [r6, #0]
 80047f2:	2000      	movs	r0, #0
 80047f4:	bd70      	pop	{r4, r5, r6, pc}
 80047f6:	f000 fbfb 	bl	8004ff0 <__malloc_lock>
 80047fa:	4a23      	ldr	r2, [pc, #140]	; (8004888 <_malloc_r+0xb4>)
 80047fc:	6814      	ldr	r4, [r2, #0]
 80047fe:	4621      	mov	r1, r4
 8004800:	b991      	cbnz	r1, 8004828 <_malloc_r+0x54>
 8004802:	4c22      	ldr	r4, [pc, #136]	; (800488c <_malloc_r+0xb8>)
 8004804:	6823      	ldr	r3, [r4, #0]
 8004806:	b91b      	cbnz	r3, 8004810 <_malloc_r+0x3c>
 8004808:	4630      	mov	r0, r6
 800480a:	f000 f981 	bl	8004b10 <_sbrk_r>
 800480e:	6020      	str	r0, [r4, #0]
 8004810:	4629      	mov	r1, r5
 8004812:	4630      	mov	r0, r6
 8004814:	f000 f97c 	bl	8004b10 <_sbrk_r>
 8004818:	1c43      	adds	r3, r0, #1
 800481a:	d126      	bne.n	800486a <_malloc_r+0x96>
 800481c:	230c      	movs	r3, #12
 800481e:	6033      	str	r3, [r6, #0]
 8004820:	4630      	mov	r0, r6
 8004822:	f000 fbe6 	bl	8004ff2 <__malloc_unlock>
 8004826:	e7e4      	b.n	80047f2 <_malloc_r+0x1e>
 8004828:	680b      	ldr	r3, [r1, #0]
 800482a:	1b5b      	subs	r3, r3, r5
 800482c:	d41a      	bmi.n	8004864 <_malloc_r+0x90>
 800482e:	2b0b      	cmp	r3, #11
 8004830:	d90f      	bls.n	8004852 <_malloc_r+0x7e>
 8004832:	600b      	str	r3, [r1, #0]
 8004834:	50cd      	str	r5, [r1, r3]
 8004836:	18cc      	adds	r4, r1, r3
 8004838:	4630      	mov	r0, r6
 800483a:	f000 fbda 	bl	8004ff2 <__malloc_unlock>
 800483e:	f104 000b 	add.w	r0, r4, #11
 8004842:	1d23      	adds	r3, r4, #4
 8004844:	f020 0007 	bic.w	r0, r0, #7
 8004848:	1ac3      	subs	r3, r0, r3
 800484a:	d01b      	beq.n	8004884 <_malloc_r+0xb0>
 800484c:	425a      	negs	r2, r3
 800484e:	50e2      	str	r2, [r4, r3]
 8004850:	bd70      	pop	{r4, r5, r6, pc}
 8004852:	428c      	cmp	r4, r1
 8004854:	bf0d      	iteet	eq
 8004856:	6863      	ldreq	r3, [r4, #4]
 8004858:	684b      	ldrne	r3, [r1, #4]
 800485a:	6063      	strne	r3, [r4, #4]
 800485c:	6013      	streq	r3, [r2, #0]
 800485e:	bf18      	it	ne
 8004860:	460c      	movne	r4, r1
 8004862:	e7e9      	b.n	8004838 <_malloc_r+0x64>
 8004864:	460c      	mov	r4, r1
 8004866:	6849      	ldr	r1, [r1, #4]
 8004868:	e7ca      	b.n	8004800 <_malloc_r+0x2c>
 800486a:	1cc4      	adds	r4, r0, #3
 800486c:	f024 0403 	bic.w	r4, r4, #3
 8004870:	42a0      	cmp	r0, r4
 8004872:	d005      	beq.n	8004880 <_malloc_r+0xac>
 8004874:	1a21      	subs	r1, r4, r0
 8004876:	4630      	mov	r0, r6
 8004878:	f000 f94a 	bl	8004b10 <_sbrk_r>
 800487c:	3001      	adds	r0, #1
 800487e:	d0cd      	beq.n	800481c <_malloc_r+0x48>
 8004880:	6025      	str	r5, [r4, #0]
 8004882:	e7d9      	b.n	8004838 <_malloc_r+0x64>
 8004884:	bd70      	pop	{r4, r5, r6, pc}
 8004886:	bf00      	nop
 8004888:	2000020c 	.word	0x2000020c
 800488c:	20000210 	.word	0x20000210

08004890 <__sfputc_r>:
 8004890:	6893      	ldr	r3, [r2, #8]
 8004892:	3b01      	subs	r3, #1
 8004894:	2b00      	cmp	r3, #0
 8004896:	b410      	push	{r4}
 8004898:	6093      	str	r3, [r2, #8]
 800489a:	da09      	bge.n	80048b0 <__sfputc_r+0x20>
 800489c:	6994      	ldr	r4, [r2, #24]
 800489e:	42a3      	cmp	r3, r4
 80048a0:	db02      	blt.n	80048a8 <__sfputc_r+0x18>
 80048a2:	b2cb      	uxtb	r3, r1
 80048a4:	2b0a      	cmp	r3, #10
 80048a6:	d103      	bne.n	80048b0 <__sfputc_r+0x20>
 80048a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048ac:	f000 b984 	b.w	8004bb8 <__swbuf_r>
 80048b0:	6813      	ldr	r3, [r2, #0]
 80048b2:	1c58      	adds	r0, r3, #1
 80048b4:	6010      	str	r0, [r2, #0]
 80048b6:	7019      	strb	r1, [r3, #0]
 80048b8:	b2c8      	uxtb	r0, r1
 80048ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <__sfputs_r>:
 80048c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048c2:	4606      	mov	r6, r0
 80048c4:	460f      	mov	r7, r1
 80048c6:	4614      	mov	r4, r2
 80048c8:	18d5      	adds	r5, r2, r3
 80048ca:	42ac      	cmp	r4, r5
 80048cc:	d101      	bne.n	80048d2 <__sfputs_r+0x12>
 80048ce:	2000      	movs	r0, #0
 80048d0:	e007      	b.n	80048e2 <__sfputs_r+0x22>
 80048d2:	463a      	mov	r2, r7
 80048d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048d8:	4630      	mov	r0, r6
 80048da:	f7ff ffd9 	bl	8004890 <__sfputc_r>
 80048de:	1c43      	adds	r3, r0, #1
 80048e0:	d1f3      	bne.n	80048ca <__sfputs_r+0xa>
 80048e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080048e4 <_vfiprintf_r>:
 80048e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048e8:	b09d      	sub	sp, #116	; 0x74
 80048ea:	460c      	mov	r4, r1
 80048ec:	4617      	mov	r7, r2
 80048ee:	9303      	str	r3, [sp, #12]
 80048f0:	4606      	mov	r6, r0
 80048f2:	b118      	cbz	r0, 80048fc <_vfiprintf_r+0x18>
 80048f4:	6983      	ldr	r3, [r0, #24]
 80048f6:	b90b      	cbnz	r3, 80048fc <_vfiprintf_r+0x18>
 80048f8:	f7ff fb8c 	bl	8004014 <__sinit>
 80048fc:	4b7c      	ldr	r3, [pc, #496]	; (8004af0 <_vfiprintf_r+0x20c>)
 80048fe:	429c      	cmp	r4, r3
 8004900:	d157      	bne.n	80049b2 <_vfiprintf_r+0xce>
 8004902:	6874      	ldr	r4, [r6, #4]
 8004904:	89a3      	ldrh	r3, [r4, #12]
 8004906:	0718      	lsls	r0, r3, #28
 8004908:	d55d      	bpl.n	80049c6 <_vfiprintf_r+0xe2>
 800490a:	6923      	ldr	r3, [r4, #16]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d05a      	beq.n	80049c6 <_vfiprintf_r+0xe2>
 8004910:	2300      	movs	r3, #0
 8004912:	9309      	str	r3, [sp, #36]	; 0x24
 8004914:	2320      	movs	r3, #32
 8004916:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800491a:	2330      	movs	r3, #48	; 0x30
 800491c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004920:	f04f 0b01 	mov.w	fp, #1
 8004924:	46b8      	mov	r8, r7
 8004926:	4645      	mov	r5, r8
 8004928:	f815 3b01 	ldrb.w	r3, [r5], #1
 800492c:	2b00      	cmp	r3, #0
 800492e:	d155      	bne.n	80049dc <_vfiprintf_r+0xf8>
 8004930:	ebb8 0a07 	subs.w	sl, r8, r7
 8004934:	d00b      	beq.n	800494e <_vfiprintf_r+0x6a>
 8004936:	4653      	mov	r3, sl
 8004938:	463a      	mov	r2, r7
 800493a:	4621      	mov	r1, r4
 800493c:	4630      	mov	r0, r6
 800493e:	f7ff ffbf 	bl	80048c0 <__sfputs_r>
 8004942:	3001      	adds	r0, #1
 8004944:	f000 80c4 	beq.w	8004ad0 <_vfiprintf_r+0x1ec>
 8004948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800494a:	4453      	add	r3, sl
 800494c:	9309      	str	r3, [sp, #36]	; 0x24
 800494e:	f898 3000 	ldrb.w	r3, [r8]
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 80bc 	beq.w	8004ad0 <_vfiprintf_r+0x1ec>
 8004958:	2300      	movs	r3, #0
 800495a:	f04f 32ff 	mov.w	r2, #4294967295
 800495e:	9304      	str	r3, [sp, #16]
 8004960:	9307      	str	r3, [sp, #28]
 8004962:	9205      	str	r2, [sp, #20]
 8004964:	9306      	str	r3, [sp, #24]
 8004966:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800496a:	931a      	str	r3, [sp, #104]	; 0x68
 800496c:	2205      	movs	r2, #5
 800496e:	7829      	ldrb	r1, [r5, #0]
 8004970:	4860      	ldr	r0, [pc, #384]	; (8004af4 <_vfiprintf_r+0x210>)
 8004972:	f7fb fc55 	bl	8000220 <memchr>
 8004976:	f105 0801 	add.w	r8, r5, #1
 800497a:	9b04      	ldr	r3, [sp, #16]
 800497c:	2800      	cmp	r0, #0
 800497e:	d131      	bne.n	80049e4 <_vfiprintf_r+0x100>
 8004980:	06d9      	lsls	r1, r3, #27
 8004982:	bf44      	itt	mi
 8004984:	2220      	movmi	r2, #32
 8004986:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800498a:	071a      	lsls	r2, r3, #28
 800498c:	bf44      	itt	mi
 800498e:	222b      	movmi	r2, #43	; 0x2b
 8004990:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004994:	782a      	ldrb	r2, [r5, #0]
 8004996:	2a2a      	cmp	r2, #42	; 0x2a
 8004998:	d02c      	beq.n	80049f4 <_vfiprintf_r+0x110>
 800499a:	9a07      	ldr	r2, [sp, #28]
 800499c:	2100      	movs	r1, #0
 800499e:	200a      	movs	r0, #10
 80049a0:	46a8      	mov	r8, r5
 80049a2:	3501      	adds	r5, #1
 80049a4:	f898 3000 	ldrb.w	r3, [r8]
 80049a8:	3b30      	subs	r3, #48	; 0x30
 80049aa:	2b09      	cmp	r3, #9
 80049ac:	d96d      	bls.n	8004a8a <_vfiprintf_r+0x1a6>
 80049ae:	b371      	cbz	r1, 8004a0e <_vfiprintf_r+0x12a>
 80049b0:	e026      	b.n	8004a00 <_vfiprintf_r+0x11c>
 80049b2:	4b51      	ldr	r3, [pc, #324]	; (8004af8 <_vfiprintf_r+0x214>)
 80049b4:	429c      	cmp	r4, r3
 80049b6:	d101      	bne.n	80049bc <_vfiprintf_r+0xd8>
 80049b8:	68b4      	ldr	r4, [r6, #8]
 80049ba:	e7a3      	b.n	8004904 <_vfiprintf_r+0x20>
 80049bc:	4b4f      	ldr	r3, [pc, #316]	; (8004afc <_vfiprintf_r+0x218>)
 80049be:	429c      	cmp	r4, r3
 80049c0:	bf08      	it	eq
 80049c2:	68f4      	ldreq	r4, [r6, #12]
 80049c4:	e79e      	b.n	8004904 <_vfiprintf_r+0x20>
 80049c6:	4621      	mov	r1, r4
 80049c8:	4630      	mov	r0, r6
 80049ca:	f000 f959 	bl	8004c80 <__swsetup_r>
 80049ce:	2800      	cmp	r0, #0
 80049d0:	d09e      	beq.n	8004910 <_vfiprintf_r+0x2c>
 80049d2:	f04f 30ff 	mov.w	r0, #4294967295
 80049d6:	b01d      	add	sp, #116	; 0x74
 80049d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049dc:	2b25      	cmp	r3, #37	; 0x25
 80049de:	d0a7      	beq.n	8004930 <_vfiprintf_r+0x4c>
 80049e0:	46a8      	mov	r8, r5
 80049e2:	e7a0      	b.n	8004926 <_vfiprintf_r+0x42>
 80049e4:	4a43      	ldr	r2, [pc, #268]	; (8004af4 <_vfiprintf_r+0x210>)
 80049e6:	1a80      	subs	r0, r0, r2
 80049e8:	fa0b f000 	lsl.w	r0, fp, r0
 80049ec:	4318      	orrs	r0, r3
 80049ee:	9004      	str	r0, [sp, #16]
 80049f0:	4645      	mov	r5, r8
 80049f2:	e7bb      	b.n	800496c <_vfiprintf_r+0x88>
 80049f4:	9a03      	ldr	r2, [sp, #12]
 80049f6:	1d11      	adds	r1, r2, #4
 80049f8:	6812      	ldr	r2, [r2, #0]
 80049fa:	9103      	str	r1, [sp, #12]
 80049fc:	2a00      	cmp	r2, #0
 80049fe:	db01      	blt.n	8004a04 <_vfiprintf_r+0x120>
 8004a00:	9207      	str	r2, [sp, #28]
 8004a02:	e004      	b.n	8004a0e <_vfiprintf_r+0x12a>
 8004a04:	4252      	negs	r2, r2
 8004a06:	f043 0302 	orr.w	r3, r3, #2
 8004a0a:	9207      	str	r2, [sp, #28]
 8004a0c:	9304      	str	r3, [sp, #16]
 8004a0e:	f898 3000 	ldrb.w	r3, [r8]
 8004a12:	2b2e      	cmp	r3, #46	; 0x2e
 8004a14:	d110      	bne.n	8004a38 <_vfiprintf_r+0x154>
 8004a16:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004a1a:	2b2a      	cmp	r3, #42	; 0x2a
 8004a1c:	f108 0101 	add.w	r1, r8, #1
 8004a20:	d137      	bne.n	8004a92 <_vfiprintf_r+0x1ae>
 8004a22:	9b03      	ldr	r3, [sp, #12]
 8004a24:	1d1a      	adds	r2, r3, #4
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	9203      	str	r2, [sp, #12]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	bfb8      	it	lt
 8004a2e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004a32:	f108 0802 	add.w	r8, r8, #2
 8004a36:	9305      	str	r3, [sp, #20]
 8004a38:	4d31      	ldr	r5, [pc, #196]	; (8004b00 <_vfiprintf_r+0x21c>)
 8004a3a:	f898 1000 	ldrb.w	r1, [r8]
 8004a3e:	2203      	movs	r2, #3
 8004a40:	4628      	mov	r0, r5
 8004a42:	f7fb fbed 	bl	8000220 <memchr>
 8004a46:	b140      	cbz	r0, 8004a5a <_vfiprintf_r+0x176>
 8004a48:	2340      	movs	r3, #64	; 0x40
 8004a4a:	1b40      	subs	r0, r0, r5
 8004a4c:	fa03 f000 	lsl.w	r0, r3, r0
 8004a50:	9b04      	ldr	r3, [sp, #16]
 8004a52:	4303      	orrs	r3, r0
 8004a54:	9304      	str	r3, [sp, #16]
 8004a56:	f108 0801 	add.w	r8, r8, #1
 8004a5a:	f898 1000 	ldrb.w	r1, [r8]
 8004a5e:	4829      	ldr	r0, [pc, #164]	; (8004b04 <_vfiprintf_r+0x220>)
 8004a60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a64:	2206      	movs	r2, #6
 8004a66:	f108 0701 	add.w	r7, r8, #1
 8004a6a:	f7fb fbd9 	bl	8000220 <memchr>
 8004a6e:	2800      	cmp	r0, #0
 8004a70:	d034      	beq.n	8004adc <_vfiprintf_r+0x1f8>
 8004a72:	4b25      	ldr	r3, [pc, #148]	; (8004b08 <_vfiprintf_r+0x224>)
 8004a74:	bb03      	cbnz	r3, 8004ab8 <_vfiprintf_r+0x1d4>
 8004a76:	9b03      	ldr	r3, [sp, #12]
 8004a78:	3307      	adds	r3, #7
 8004a7a:	f023 0307 	bic.w	r3, r3, #7
 8004a7e:	3308      	adds	r3, #8
 8004a80:	9303      	str	r3, [sp, #12]
 8004a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a84:	444b      	add	r3, r9
 8004a86:	9309      	str	r3, [sp, #36]	; 0x24
 8004a88:	e74c      	b.n	8004924 <_vfiprintf_r+0x40>
 8004a8a:	fb00 3202 	mla	r2, r0, r2, r3
 8004a8e:	2101      	movs	r1, #1
 8004a90:	e786      	b.n	80049a0 <_vfiprintf_r+0xbc>
 8004a92:	2300      	movs	r3, #0
 8004a94:	9305      	str	r3, [sp, #20]
 8004a96:	4618      	mov	r0, r3
 8004a98:	250a      	movs	r5, #10
 8004a9a:	4688      	mov	r8, r1
 8004a9c:	3101      	adds	r1, #1
 8004a9e:	f898 2000 	ldrb.w	r2, [r8]
 8004aa2:	3a30      	subs	r2, #48	; 0x30
 8004aa4:	2a09      	cmp	r2, #9
 8004aa6:	d903      	bls.n	8004ab0 <_vfiprintf_r+0x1cc>
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0c5      	beq.n	8004a38 <_vfiprintf_r+0x154>
 8004aac:	9005      	str	r0, [sp, #20]
 8004aae:	e7c3      	b.n	8004a38 <_vfiprintf_r+0x154>
 8004ab0:	fb05 2000 	mla	r0, r5, r0, r2
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e7f0      	b.n	8004a9a <_vfiprintf_r+0x1b6>
 8004ab8:	ab03      	add	r3, sp, #12
 8004aba:	9300      	str	r3, [sp, #0]
 8004abc:	4622      	mov	r2, r4
 8004abe:	4b13      	ldr	r3, [pc, #76]	; (8004b0c <_vfiprintf_r+0x228>)
 8004ac0:	a904      	add	r1, sp, #16
 8004ac2:	4630      	mov	r0, r6
 8004ac4:	f7fe f81e 	bl	8002b04 <_printf_float>
 8004ac8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004acc:	4681      	mov	r9, r0
 8004ace:	d1d8      	bne.n	8004a82 <_vfiprintf_r+0x19e>
 8004ad0:	89a3      	ldrh	r3, [r4, #12]
 8004ad2:	065b      	lsls	r3, r3, #25
 8004ad4:	f53f af7d 	bmi.w	80049d2 <_vfiprintf_r+0xee>
 8004ad8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ada:	e77c      	b.n	80049d6 <_vfiprintf_r+0xf2>
 8004adc:	ab03      	add	r3, sp, #12
 8004ade:	9300      	str	r3, [sp, #0]
 8004ae0:	4622      	mov	r2, r4
 8004ae2:	4b0a      	ldr	r3, [pc, #40]	; (8004b0c <_vfiprintf_r+0x228>)
 8004ae4:	a904      	add	r1, sp, #16
 8004ae6:	4630      	mov	r0, r6
 8004ae8:	f7fe fac2 	bl	8003070 <_printf_i>
 8004aec:	e7ec      	b.n	8004ac8 <_vfiprintf_r+0x1e4>
 8004aee:	bf00      	nop
 8004af0:	08005178 	.word	0x08005178
 8004af4:	080052b4 	.word	0x080052b4
 8004af8:	08005198 	.word	0x08005198
 8004afc:	08005158 	.word	0x08005158
 8004b00:	080052ba 	.word	0x080052ba
 8004b04:	080052be 	.word	0x080052be
 8004b08:	08002b05 	.word	0x08002b05
 8004b0c:	080048c1 	.word	0x080048c1

08004b10 <_sbrk_r>:
 8004b10:	b538      	push	{r3, r4, r5, lr}
 8004b12:	4c06      	ldr	r4, [pc, #24]	; (8004b2c <_sbrk_r+0x1c>)
 8004b14:	2300      	movs	r3, #0
 8004b16:	4605      	mov	r5, r0
 8004b18:	4608      	mov	r0, r1
 8004b1a:	6023      	str	r3, [r4, #0]
 8004b1c:	f7fd febc 	bl	8002898 <_sbrk>
 8004b20:	1c43      	adds	r3, r0, #1
 8004b22:	d102      	bne.n	8004b2a <_sbrk_r+0x1a>
 8004b24:	6823      	ldr	r3, [r4, #0]
 8004b26:	b103      	cbz	r3, 8004b2a <_sbrk_r+0x1a>
 8004b28:	602b      	str	r3, [r5, #0]
 8004b2a:	bd38      	pop	{r3, r4, r5, pc}
 8004b2c:	200002dc 	.word	0x200002dc

08004b30 <__sread>:
 8004b30:	b510      	push	{r4, lr}
 8004b32:	460c      	mov	r4, r1
 8004b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b38:	f000 fa5c 	bl	8004ff4 <_read_r>
 8004b3c:	2800      	cmp	r0, #0
 8004b3e:	bfab      	itete	ge
 8004b40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004b42:	89a3      	ldrhlt	r3, [r4, #12]
 8004b44:	181b      	addge	r3, r3, r0
 8004b46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004b4a:	bfac      	ite	ge
 8004b4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004b4e:	81a3      	strhlt	r3, [r4, #12]
 8004b50:	bd10      	pop	{r4, pc}

08004b52 <__swrite>:
 8004b52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b56:	461f      	mov	r7, r3
 8004b58:	898b      	ldrh	r3, [r1, #12]
 8004b5a:	05db      	lsls	r3, r3, #23
 8004b5c:	4605      	mov	r5, r0
 8004b5e:	460c      	mov	r4, r1
 8004b60:	4616      	mov	r6, r2
 8004b62:	d505      	bpl.n	8004b70 <__swrite+0x1e>
 8004b64:	2302      	movs	r3, #2
 8004b66:	2200      	movs	r2, #0
 8004b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b6c:	f000 f9b8 	bl	8004ee0 <_lseek_r>
 8004b70:	89a3      	ldrh	r3, [r4, #12]
 8004b72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b7a:	81a3      	strh	r3, [r4, #12]
 8004b7c:	4632      	mov	r2, r6
 8004b7e:	463b      	mov	r3, r7
 8004b80:	4628      	mov	r0, r5
 8004b82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b86:	f000 b869 	b.w	8004c5c <_write_r>

08004b8a <__sseek>:
 8004b8a:	b510      	push	{r4, lr}
 8004b8c:	460c      	mov	r4, r1
 8004b8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b92:	f000 f9a5 	bl	8004ee0 <_lseek_r>
 8004b96:	1c43      	adds	r3, r0, #1
 8004b98:	89a3      	ldrh	r3, [r4, #12]
 8004b9a:	bf15      	itete	ne
 8004b9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8004b9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ba2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ba6:	81a3      	strheq	r3, [r4, #12]
 8004ba8:	bf18      	it	ne
 8004baa:	81a3      	strhne	r3, [r4, #12]
 8004bac:	bd10      	pop	{r4, pc}

08004bae <__sclose>:
 8004bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bb2:	f000 b8d3 	b.w	8004d5c <_close_r>
	...

08004bb8 <__swbuf_r>:
 8004bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bba:	460e      	mov	r6, r1
 8004bbc:	4614      	mov	r4, r2
 8004bbe:	4605      	mov	r5, r0
 8004bc0:	b118      	cbz	r0, 8004bca <__swbuf_r+0x12>
 8004bc2:	6983      	ldr	r3, [r0, #24]
 8004bc4:	b90b      	cbnz	r3, 8004bca <__swbuf_r+0x12>
 8004bc6:	f7ff fa25 	bl	8004014 <__sinit>
 8004bca:	4b21      	ldr	r3, [pc, #132]	; (8004c50 <__swbuf_r+0x98>)
 8004bcc:	429c      	cmp	r4, r3
 8004bce:	d12a      	bne.n	8004c26 <__swbuf_r+0x6e>
 8004bd0:	686c      	ldr	r4, [r5, #4]
 8004bd2:	69a3      	ldr	r3, [r4, #24]
 8004bd4:	60a3      	str	r3, [r4, #8]
 8004bd6:	89a3      	ldrh	r3, [r4, #12]
 8004bd8:	071a      	lsls	r2, r3, #28
 8004bda:	d52e      	bpl.n	8004c3a <__swbuf_r+0x82>
 8004bdc:	6923      	ldr	r3, [r4, #16]
 8004bde:	b363      	cbz	r3, 8004c3a <__swbuf_r+0x82>
 8004be0:	6923      	ldr	r3, [r4, #16]
 8004be2:	6820      	ldr	r0, [r4, #0]
 8004be4:	1ac0      	subs	r0, r0, r3
 8004be6:	6963      	ldr	r3, [r4, #20]
 8004be8:	b2f6      	uxtb	r6, r6
 8004bea:	4298      	cmp	r0, r3
 8004bec:	4637      	mov	r7, r6
 8004bee:	db04      	blt.n	8004bfa <__swbuf_r+0x42>
 8004bf0:	4621      	mov	r1, r4
 8004bf2:	4628      	mov	r0, r5
 8004bf4:	f000 f94a 	bl	8004e8c <_fflush_r>
 8004bf8:	bb28      	cbnz	r0, 8004c46 <__swbuf_r+0x8e>
 8004bfa:	68a3      	ldr	r3, [r4, #8]
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	60a3      	str	r3, [r4, #8]
 8004c00:	6823      	ldr	r3, [r4, #0]
 8004c02:	1c5a      	adds	r2, r3, #1
 8004c04:	6022      	str	r2, [r4, #0]
 8004c06:	701e      	strb	r6, [r3, #0]
 8004c08:	6963      	ldr	r3, [r4, #20]
 8004c0a:	3001      	adds	r0, #1
 8004c0c:	4298      	cmp	r0, r3
 8004c0e:	d004      	beq.n	8004c1a <__swbuf_r+0x62>
 8004c10:	89a3      	ldrh	r3, [r4, #12]
 8004c12:	07db      	lsls	r3, r3, #31
 8004c14:	d519      	bpl.n	8004c4a <__swbuf_r+0x92>
 8004c16:	2e0a      	cmp	r6, #10
 8004c18:	d117      	bne.n	8004c4a <__swbuf_r+0x92>
 8004c1a:	4621      	mov	r1, r4
 8004c1c:	4628      	mov	r0, r5
 8004c1e:	f000 f935 	bl	8004e8c <_fflush_r>
 8004c22:	b190      	cbz	r0, 8004c4a <__swbuf_r+0x92>
 8004c24:	e00f      	b.n	8004c46 <__swbuf_r+0x8e>
 8004c26:	4b0b      	ldr	r3, [pc, #44]	; (8004c54 <__swbuf_r+0x9c>)
 8004c28:	429c      	cmp	r4, r3
 8004c2a:	d101      	bne.n	8004c30 <__swbuf_r+0x78>
 8004c2c:	68ac      	ldr	r4, [r5, #8]
 8004c2e:	e7d0      	b.n	8004bd2 <__swbuf_r+0x1a>
 8004c30:	4b09      	ldr	r3, [pc, #36]	; (8004c58 <__swbuf_r+0xa0>)
 8004c32:	429c      	cmp	r4, r3
 8004c34:	bf08      	it	eq
 8004c36:	68ec      	ldreq	r4, [r5, #12]
 8004c38:	e7cb      	b.n	8004bd2 <__swbuf_r+0x1a>
 8004c3a:	4621      	mov	r1, r4
 8004c3c:	4628      	mov	r0, r5
 8004c3e:	f000 f81f 	bl	8004c80 <__swsetup_r>
 8004c42:	2800      	cmp	r0, #0
 8004c44:	d0cc      	beq.n	8004be0 <__swbuf_r+0x28>
 8004c46:	f04f 37ff 	mov.w	r7, #4294967295
 8004c4a:	4638      	mov	r0, r7
 8004c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	08005178 	.word	0x08005178
 8004c54:	08005198 	.word	0x08005198
 8004c58:	08005158 	.word	0x08005158

08004c5c <_write_r>:
 8004c5c:	b538      	push	{r3, r4, r5, lr}
 8004c5e:	4c07      	ldr	r4, [pc, #28]	; (8004c7c <_write_r+0x20>)
 8004c60:	4605      	mov	r5, r0
 8004c62:	4608      	mov	r0, r1
 8004c64:	4611      	mov	r1, r2
 8004c66:	2200      	movs	r2, #0
 8004c68:	6022      	str	r2, [r4, #0]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	f7fd fe06 	bl	800287c <_write>
 8004c70:	1c43      	adds	r3, r0, #1
 8004c72:	d102      	bne.n	8004c7a <_write_r+0x1e>
 8004c74:	6823      	ldr	r3, [r4, #0]
 8004c76:	b103      	cbz	r3, 8004c7a <_write_r+0x1e>
 8004c78:	602b      	str	r3, [r5, #0]
 8004c7a:	bd38      	pop	{r3, r4, r5, pc}
 8004c7c:	200002dc 	.word	0x200002dc

08004c80 <__swsetup_r>:
 8004c80:	4b32      	ldr	r3, [pc, #200]	; (8004d4c <__swsetup_r+0xcc>)
 8004c82:	b570      	push	{r4, r5, r6, lr}
 8004c84:	681d      	ldr	r5, [r3, #0]
 8004c86:	4606      	mov	r6, r0
 8004c88:	460c      	mov	r4, r1
 8004c8a:	b125      	cbz	r5, 8004c96 <__swsetup_r+0x16>
 8004c8c:	69ab      	ldr	r3, [r5, #24]
 8004c8e:	b913      	cbnz	r3, 8004c96 <__swsetup_r+0x16>
 8004c90:	4628      	mov	r0, r5
 8004c92:	f7ff f9bf 	bl	8004014 <__sinit>
 8004c96:	4b2e      	ldr	r3, [pc, #184]	; (8004d50 <__swsetup_r+0xd0>)
 8004c98:	429c      	cmp	r4, r3
 8004c9a:	d10f      	bne.n	8004cbc <__swsetup_r+0x3c>
 8004c9c:	686c      	ldr	r4, [r5, #4]
 8004c9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	0715      	lsls	r5, r2, #28
 8004ca6:	d42c      	bmi.n	8004d02 <__swsetup_r+0x82>
 8004ca8:	06d0      	lsls	r0, r2, #27
 8004caa:	d411      	bmi.n	8004cd0 <__swsetup_r+0x50>
 8004cac:	2209      	movs	r2, #9
 8004cae:	6032      	str	r2, [r6, #0]
 8004cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004cb4:	81a3      	strh	r3, [r4, #12]
 8004cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8004cba:	bd70      	pop	{r4, r5, r6, pc}
 8004cbc:	4b25      	ldr	r3, [pc, #148]	; (8004d54 <__swsetup_r+0xd4>)
 8004cbe:	429c      	cmp	r4, r3
 8004cc0:	d101      	bne.n	8004cc6 <__swsetup_r+0x46>
 8004cc2:	68ac      	ldr	r4, [r5, #8]
 8004cc4:	e7eb      	b.n	8004c9e <__swsetup_r+0x1e>
 8004cc6:	4b24      	ldr	r3, [pc, #144]	; (8004d58 <__swsetup_r+0xd8>)
 8004cc8:	429c      	cmp	r4, r3
 8004cca:	bf08      	it	eq
 8004ccc:	68ec      	ldreq	r4, [r5, #12]
 8004cce:	e7e6      	b.n	8004c9e <__swsetup_r+0x1e>
 8004cd0:	0751      	lsls	r1, r2, #29
 8004cd2:	d512      	bpl.n	8004cfa <__swsetup_r+0x7a>
 8004cd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004cd6:	b141      	cbz	r1, 8004cea <__swsetup_r+0x6a>
 8004cd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004cdc:	4299      	cmp	r1, r3
 8004cde:	d002      	beq.n	8004ce6 <__swsetup_r+0x66>
 8004ce0:	4630      	mov	r0, r6
 8004ce2:	f7ff fd29 	bl	8004738 <_free_r>
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	6363      	str	r3, [r4, #52]	; 0x34
 8004cea:	89a3      	ldrh	r3, [r4, #12]
 8004cec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004cf0:	81a3      	strh	r3, [r4, #12]
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	6063      	str	r3, [r4, #4]
 8004cf6:	6923      	ldr	r3, [r4, #16]
 8004cf8:	6023      	str	r3, [r4, #0]
 8004cfa:	89a3      	ldrh	r3, [r4, #12]
 8004cfc:	f043 0308 	orr.w	r3, r3, #8
 8004d00:	81a3      	strh	r3, [r4, #12]
 8004d02:	6923      	ldr	r3, [r4, #16]
 8004d04:	b94b      	cbnz	r3, 8004d1a <__swsetup_r+0x9a>
 8004d06:	89a3      	ldrh	r3, [r4, #12]
 8004d08:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d10:	d003      	beq.n	8004d1a <__swsetup_r+0x9a>
 8004d12:	4621      	mov	r1, r4
 8004d14:	4630      	mov	r0, r6
 8004d16:	f000 f919 	bl	8004f4c <__smakebuf_r>
 8004d1a:	89a2      	ldrh	r2, [r4, #12]
 8004d1c:	f012 0301 	ands.w	r3, r2, #1
 8004d20:	d00c      	beq.n	8004d3c <__swsetup_r+0xbc>
 8004d22:	2300      	movs	r3, #0
 8004d24:	60a3      	str	r3, [r4, #8]
 8004d26:	6963      	ldr	r3, [r4, #20]
 8004d28:	425b      	negs	r3, r3
 8004d2a:	61a3      	str	r3, [r4, #24]
 8004d2c:	6923      	ldr	r3, [r4, #16]
 8004d2e:	b953      	cbnz	r3, 8004d46 <__swsetup_r+0xc6>
 8004d30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d34:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004d38:	d1ba      	bne.n	8004cb0 <__swsetup_r+0x30>
 8004d3a:	bd70      	pop	{r4, r5, r6, pc}
 8004d3c:	0792      	lsls	r2, r2, #30
 8004d3e:	bf58      	it	pl
 8004d40:	6963      	ldrpl	r3, [r4, #20]
 8004d42:	60a3      	str	r3, [r4, #8]
 8004d44:	e7f2      	b.n	8004d2c <__swsetup_r+0xac>
 8004d46:	2000      	movs	r0, #0
 8004d48:	e7f7      	b.n	8004d3a <__swsetup_r+0xba>
 8004d4a:	bf00      	nop
 8004d4c:	2000000c 	.word	0x2000000c
 8004d50:	08005178 	.word	0x08005178
 8004d54:	08005198 	.word	0x08005198
 8004d58:	08005158 	.word	0x08005158

08004d5c <_close_r>:
 8004d5c:	b538      	push	{r3, r4, r5, lr}
 8004d5e:	4c06      	ldr	r4, [pc, #24]	; (8004d78 <_close_r+0x1c>)
 8004d60:	2300      	movs	r3, #0
 8004d62:	4605      	mov	r5, r0
 8004d64:	4608      	mov	r0, r1
 8004d66:	6023      	str	r3, [r4, #0]
 8004d68:	f7fd fdb0 	bl	80028cc <_close>
 8004d6c:	1c43      	adds	r3, r0, #1
 8004d6e:	d102      	bne.n	8004d76 <_close_r+0x1a>
 8004d70:	6823      	ldr	r3, [r4, #0]
 8004d72:	b103      	cbz	r3, 8004d76 <_close_r+0x1a>
 8004d74:	602b      	str	r3, [r5, #0]
 8004d76:	bd38      	pop	{r3, r4, r5, pc}
 8004d78:	200002dc 	.word	0x200002dc

08004d7c <__sflush_r>:
 8004d7c:	898a      	ldrh	r2, [r1, #12]
 8004d7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d82:	4605      	mov	r5, r0
 8004d84:	0710      	lsls	r0, r2, #28
 8004d86:	460c      	mov	r4, r1
 8004d88:	d45a      	bmi.n	8004e40 <__sflush_r+0xc4>
 8004d8a:	684b      	ldr	r3, [r1, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	dc05      	bgt.n	8004d9c <__sflush_r+0x20>
 8004d90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	dc02      	bgt.n	8004d9c <__sflush_r+0x20>
 8004d96:	2000      	movs	r0, #0
 8004d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d9e:	2e00      	cmp	r6, #0
 8004da0:	d0f9      	beq.n	8004d96 <__sflush_r+0x1a>
 8004da2:	2300      	movs	r3, #0
 8004da4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004da8:	682f      	ldr	r7, [r5, #0]
 8004daa:	602b      	str	r3, [r5, #0]
 8004dac:	d033      	beq.n	8004e16 <__sflush_r+0x9a>
 8004dae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004db0:	89a3      	ldrh	r3, [r4, #12]
 8004db2:	075a      	lsls	r2, r3, #29
 8004db4:	d505      	bpl.n	8004dc2 <__sflush_r+0x46>
 8004db6:	6863      	ldr	r3, [r4, #4]
 8004db8:	1ac0      	subs	r0, r0, r3
 8004dba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004dbc:	b10b      	cbz	r3, 8004dc2 <__sflush_r+0x46>
 8004dbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004dc0:	1ac0      	subs	r0, r0, r3
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004dc8:	6a21      	ldr	r1, [r4, #32]
 8004dca:	4628      	mov	r0, r5
 8004dcc:	47b0      	blx	r6
 8004dce:	1c43      	adds	r3, r0, #1
 8004dd0:	89a3      	ldrh	r3, [r4, #12]
 8004dd2:	d106      	bne.n	8004de2 <__sflush_r+0x66>
 8004dd4:	6829      	ldr	r1, [r5, #0]
 8004dd6:	291d      	cmp	r1, #29
 8004dd8:	d84b      	bhi.n	8004e72 <__sflush_r+0xf6>
 8004dda:	4a2b      	ldr	r2, [pc, #172]	; (8004e88 <__sflush_r+0x10c>)
 8004ddc:	40ca      	lsrs	r2, r1
 8004dde:	07d6      	lsls	r6, r2, #31
 8004de0:	d547      	bpl.n	8004e72 <__sflush_r+0xf6>
 8004de2:	2200      	movs	r2, #0
 8004de4:	6062      	str	r2, [r4, #4]
 8004de6:	04d9      	lsls	r1, r3, #19
 8004de8:	6922      	ldr	r2, [r4, #16]
 8004dea:	6022      	str	r2, [r4, #0]
 8004dec:	d504      	bpl.n	8004df8 <__sflush_r+0x7c>
 8004dee:	1c42      	adds	r2, r0, #1
 8004df0:	d101      	bne.n	8004df6 <__sflush_r+0x7a>
 8004df2:	682b      	ldr	r3, [r5, #0]
 8004df4:	b903      	cbnz	r3, 8004df8 <__sflush_r+0x7c>
 8004df6:	6560      	str	r0, [r4, #84]	; 0x54
 8004df8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004dfa:	602f      	str	r7, [r5, #0]
 8004dfc:	2900      	cmp	r1, #0
 8004dfe:	d0ca      	beq.n	8004d96 <__sflush_r+0x1a>
 8004e00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e04:	4299      	cmp	r1, r3
 8004e06:	d002      	beq.n	8004e0e <__sflush_r+0x92>
 8004e08:	4628      	mov	r0, r5
 8004e0a:	f7ff fc95 	bl	8004738 <_free_r>
 8004e0e:	2000      	movs	r0, #0
 8004e10:	6360      	str	r0, [r4, #52]	; 0x34
 8004e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e16:	6a21      	ldr	r1, [r4, #32]
 8004e18:	2301      	movs	r3, #1
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	47b0      	blx	r6
 8004e1e:	1c41      	adds	r1, r0, #1
 8004e20:	d1c6      	bne.n	8004db0 <__sflush_r+0x34>
 8004e22:	682b      	ldr	r3, [r5, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d0c3      	beq.n	8004db0 <__sflush_r+0x34>
 8004e28:	2b1d      	cmp	r3, #29
 8004e2a:	d001      	beq.n	8004e30 <__sflush_r+0xb4>
 8004e2c:	2b16      	cmp	r3, #22
 8004e2e:	d101      	bne.n	8004e34 <__sflush_r+0xb8>
 8004e30:	602f      	str	r7, [r5, #0]
 8004e32:	e7b0      	b.n	8004d96 <__sflush_r+0x1a>
 8004e34:	89a3      	ldrh	r3, [r4, #12]
 8004e36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e3a:	81a3      	strh	r3, [r4, #12]
 8004e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e40:	690f      	ldr	r7, [r1, #16]
 8004e42:	2f00      	cmp	r7, #0
 8004e44:	d0a7      	beq.n	8004d96 <__sflush_r+0x1a>
 8004e46:	0793      	lsls	r3, r2, #30
 8004e48:	680e      	ldr	r6, [r1, #0]
 8004e4a:	bf08      	it	eq
 8004e4c:	694b      	ldreq	r3, [r1, #20]
 8004e4e:	600f      	str	r7, [r1, #0]
 8004e50:	bf18      	it	ne
 8004e52:	2300      	movne	r3, #0
 8004e54:	eba6 0807 	sub.w	r8, r6, r7
 8004e58:	608b      	str	r3, [r1, #8]
 8004e5a:	f1b8 0f00 	cmp.w	r8, #0
 8004e5e:	dd9a      	ble.n	8004d96 <__sflush_r+0x1a>
 8004e60:	4643      	mov	r3, r8
 8004e62:	463a      	mov	r2, r7
 8004e64:	6a21      	ldr	r1, [r4, #32]
 8004e66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004e68:	4628      	mov	r0, r5
 8004e6a:	47b0      	blx	r6
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	dc07      	bgt.n	8004e80 <__sflush_r+0x104>
 8004e70:	89a3      	ldrh	r3, [r4, #12]
 8004e72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e76:	81a3      	strh	r3, [r4, #12]
 8004e78:	f04f 30ff 	mov.w	r0, #4294967295
 8004e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e80:	4407      	add	r7, r0
 8004e82:	eba8 0800 	sub.w	r8, r8, r0
 8004e86:	e7e8      	b.n	8004e5a <__sflush_r+0xde>
 8004e88:	20400001 	.word	0x20400001

08004e8c <_fflush_r>:
 8004e8c:	b538      	push	{r3, r4, r5, lr}
 8004e8e:	690b      	ldr	r3, [r1, #16]
 8004e90:	4605      	mov	r5, r0
 8004e92:	460c      	mov	r4, r1
 8004e94:	b1db      	cbz	r3, 8004ece <_fflush_r+0x42>
 8004e96:	b118      	cbz	r0, 8004ea0 <_fflush_r+0x14>
 8004e98:	6983      	ldr	r3, [r0, #24]
 8004e9a:	b90b      	cbnz	r3, 8004ea0 <_fflush_r+0x14>
 8004e9c:	f7ff f8ba 	bl	8004014 <__sinit>
 8004ea0:	4b0c      	ldr	r3, [pc, #48]	; (8004ed4 <_fflush_r+0x48>)
 8004ea2:	429c      	cmp	r4, r3
 8004ea4:	d109      	bne.n	8004eba <_fflush_r+0x2e>
 8004ea6:	686c      	ldr	r4, [r5, #4]
 8004ea8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004eac:	b17b      	cbz	r3, 8004ece <_fflush_r+0x42>
 8004eae:	4621      	mov	r1, r4
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004eb6:	f7ff bf61 	b.w	8004d7c <__sflush_r>
 8004eba:	4b07      	ldr	r3, [pc, #28]	; (8004ed8 <_fflush_r+0x4c>)
 8004ebc:	429c      	cmp	r4, r3
 8004ebe:	d101      	bne.n	8004ec4 <_fflush_r+0x38>
 8004ec0:	68ac      	ldr	r4, [r5, #8]
 8004ec2:	e7f1      	b.n	8004ea8 <_fflush_r+0x1c>
 8004ec4:	4b05      	ldr	r3, [pc, #20]	; (8004edc <_fflush_r+0x50>)
 8004ec6:	429c      	cmp	r4, r3
 8004ec8:	bf08      	it	eq
 8004eca:	68ec      	ldreq	r4, [r5, #12]
 8004ecc:	e7ec      	b.n	8004ea8 <_fflush_r+0x1c>
 8004ece:	2000      	movs	r0, #0
 8004ed0:	bd38      	pop	{r3, r4, r5, pc}
 8004ed2:	bf00      	nop
 8004ed4:	08005178 	.word	0x08005178
 8004ed8:	08005198 	.word	0x08005198
 8004edc:	08005158 	.word	0x08005158

08004ee0 <_lseek_r>:
 8004ee0:	b538      	push	{r3, r4, r5, lr}
 8004ee2:	4c07      	ldr	r4, [pc, #28]	; (8004f00 <_lseek_r+0x20>)
 8004ee4:	4605      	mov	r5, r0
 8004ee6:	4608      	mov	r0, r1
 8004ee8:	4611      	mov	r1, r2
 8004eea:	2200      	movs	r2, #0
 8004eec:	6022      	str	r2, [r4, #0]
 8004eee:	461a      	mov	r2, r3
 8004ef0:	f7fd fcf6 	bl	80028e0 <_lseek>
 8004ef4:	1c43      	adds	r3, r0, #1
 8004ef6:	d102      	bne.n	8004efe <_lseek_r+0x1e>
 8004ef8:	6823      	ldr	r3, [r4, #0]
 8004efa:	b103      	cbz	r3, 8004efe <_lseek_r+0x1e>
 8004efc:	602b      	str	r3, [r5, #0]
 8004efe:	bd38      	pop	{r3, r4, r5, pc}
 8004f00:	200002dc 	.word	0x200002dc

08004f04 <__swhatbuf_r>:
 8004f04:	b570      	push	{r4, r5, r6, lr}
 8004f06:	460e      	mov	r6, r1
 8004f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f0c:	2900      	cmp	r1, #0
 8004f0e:	b090      	sub	sp, #64	; 0x40
 8004f10:	4614      	mov	r4, r2
 8004f12:	461d      	mov	r5, r3
 8004f14:	da07      	bge.n	8004f26 <__swhatbuf_r+0x22>
 8004f16:	2300      	movs	r3, #0
 8004f18:	602b      	str	r3, [r5, #0]
 8004f1a:	89b3      	ldrh	r3, [r6, #12]
 8004f1c:	061a      	lsls	r2, r3, #24
 8004f1e:	d410      	bmi.n	8004f42 <__swhatbuf_r+0x3e>
 8004f20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f24:	e00e      	b.n	8004f44 <__swhatbuf_r+0x40>
 8004f26:	aa01      	add	r2, sp, #4
 8004f28:	f000 f884 	bl	8005034 <_fstat_r>
 8004f2c:	2800      	cmp	r0, #0
 8004f2e:	dbf2      	blt.n	8004f16 <__swhatbuf_r+0x12>
 8004f30:	9a02      	ldr	r2, [sp, #8]
 8004f32:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004f36:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004f3a:	425a      	negs	r2, r3
 8004f3c:	415a      	adcs	r2, r3
 8004f3e:	602a      	str	r2, [r5, #0]
 8004f40:	e7ee      	b.n	8004f20 <__swhatbuf_r+0x1c>
 8004f42:	2340      	movs	r3, #64	; 0x40
 8004f44:	2000      	movs	r0, #0
 8004f46:	6023      	str	r3, [r4, #0]
 8004f48:	b010      	add	sp, #64	; 0x40
 8004f4a:	bd70      	pop	{r4, r5, r6, pc}

08004f4c <__smakebuf_r>:
 8004f4c:	898b      	ldrh	r3, [r1, #12]
 8004f4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f50:	079d      	lsls	r5, r3, #30
 8004f52:	4606      	mov	r6, r0
 8004f54:	460c      	mov	r4, r1
 8004f56:	d507      	bpl.n	8004f68 <__smakebuf_r+0x1c>
 8004f58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004f5c:	6023      	str	r3, [r4, #0]
 8004f5e:	6123      	str	r3, [r4, #16]
 8004f60:	2301      	movs	r3, #1
 8004f62:	6163      	str	r3, [r4, #20]
 8004f64:	b002      	add	sp, #8
 8004f66:	bd70      	pop	{r4, r5, r6, pc}
 8004f68:	ab01      	add	r3, sp, #4
 8004f6a:	466a      	mov	r2, sp
 8004f6c:	f7ff ffca 	bl	8004f04 <__swhatbuf_r>
 8004f70:	9900      	ldr	r1, [sp, #0]
 8004f72:	4605      	mov	r5, r0
 8004f74:	4630      	mov	r0, r6
 8004f76:	f7ff fc2d 	bl	80047d4 <_malloc_r>
 8004f7a:	b948      	cbnz	r0, 8004f90 <__smakebuf_r+0x44>
 8004f7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f80:	059a      	lsls	r2, r3, #22
 8004f82:	d4ef      	bmi.n	8004f64 <__smakebuf_r+0x18>
 8004f84:	f023 0303 	bic.w	r3, r3, #3
 8004f88:	f043 0302 	orr.w	r3, r3, #2
 8004f8c:	81a3      	strh	r3, [r4, #12]
 8004f8e:	e7e3      	b.n	8004f58 <__smakebuf_r+0xc>
 8004f90:	4b0d      	ldr	r3, [pc, #52]	; (8004fc8 <__smakebuf_r+0x7c>)
 8004f92:	62b3      	str	r3, [r6, #40]	; 0x28
 8004f94:	89a3      	ldrh	r3, [r4, #12]
 8004f96:	6020      	str	r0, [r4, #0]
 8004f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f9c:	81a3      	strh	r3, [r4, #12]
 8004f9e:	9b00      	ldr	r3, [sp, #0]
 8004fa0:	6163      	str	r3, [r4, #20]
 8004fa2:	9b01      	ldr	r3, [sp, #4]
 8004fa4:	6120      	str	r0, [r4, #16]
 8004fa6:	b15b      	cbz	r3, 8004fc0 <__smakebuf_r+0x74>
 8004fa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fac:	4630      	mov	r0, r6
 8004fae:	f000 f853 	bl	8005058 <_isatty_r>
 8004fb2:	b128      	cbz	r0, 8004fc0 <__smakebuf_r+0x74>
 8004fb4:	89a3      	ldrh	r3, [r4, #12]
 8004fb6:	f023 0303 	bic.w	r3, r3, #3
 8004fba:	f043 0301 	orr.w	r3, r3, #1
 8004fbe:	81a3      	strh	r3, [r4, #12]
 8004fc0:	89a3      	ldrh	r3, [r4, #12]
 8004fc2:	431d      	orrs	r5, r3
 8004fc4:	81a5      	strh	r5, [r4, #12]
 8004fc6:	e7cd      	b.n	8004f64 <__smakebuf_r+0x18>
 8004fc8:	08003f95 	.word	0x08003f95

08004fcc <__ascii_mbtowc>:
 8004fcc:	b082      	sub	sp, #8
 8004fce:	b901      	cbnz	r1, 8004fd2 <__ascii_mbtowc+0x6>
 8004fd0:	a901      	add	r1, sp, #4
 8004fd2:	b142      	cbz	r2, 8004fe6 <__ascii_mbtowc+0x1a>
 8004fd4:	b14b      	cbz	r3, 8004fea <__ascii_mbtowc+0x1e>
 8004fd6:	7813      	ldrb	r3, [r2, #0]
 8004fd8:	600b      	str	r3, [r1, #0]
 8004fda:	7812      	ldrb	r2, [r2, #0]
 8004fdc:	1c10      	adds	r0, r2, #0
 8004fde:	bf18      	it	ne
 8004fe0:	2001      	movne	r0, #1
 8004fe2:	b002      	add	sp, #8
 8004fe4:	4770      	bx	lr
 8004fe6:	4610      	mov	r0, r2
 8004fe8:	e7fb      	b.n	8004fe2 <__ascii_mbtowc+0x16>
 8004fea:	f06f 0001 	mvn.w	r0, #1
 8004fee:	e7f8      	b.n	8004fe2 <__ascii_mbtowc+0x16>

08004ff0 <__malloc_lock>:
 8004ff0:	4770      	bx	lr

08004ff2 <__malloc_unlock>:
 8004ff2:	4770      	bx	lr

08004ff4 <_read_r>:
 8004ff4:	b538      	push	{r3, r4, r5, lr}
 8004ff6:	4c07      	ldr	r4, [pc, #28]	; (8005014 <_read_r+0x20>)
 8004ff8:	4605      	mov	r5, r0
 8004ffa:	4608      	mov	r0, r1
 8004ffc:	4611      	mov	r1, r2
 8004ffe:	2200      	movs	r2, #0
 8005000:	6022      	str	r2, [r4, #0]
 8005002:	461a      	mov	r2, r3
 8005004:	f7fd fc2c 	bl	8002860 <_read>
 8005008:	1c43      	adds	r3, r0, #1
 800500a:	d102      	bne.n	8005012 <_read_r+0x1e>
 800500c:	6823      	ldr	r3, [r4, #0]
 800500e:	b103      	cbz	r3, 8005012 <_read_r+0x1e>
 8005010:	602b      	str	r3, [r5, #0]
 8005012:	bd38      	pop	{r3, r4, r5, pc}
 8005014:	200002dc 	.word	0x200002dc

08005018 <__ascii_wctomb>:
 8005018:	b149      	cbz	r1, 800502e <__ascii_wctomb+0x16>
 800501a:	2aff      	cmp	r2, #255	; 0xff
 800501c:	bf85      	ittet	hi
 800501e:	238a      	movhi	r3, #138	; 0x8a
 8005020:	6003      	strhi	r3, [r0, #0]
 8005022:	700a      	strbls	r2, [r1, #0]
 8005024:	f04f 30ff 	movhi.w	r0, #4294967295
 8005028:	bf98      	it	ls
 800502a:	2001      	movls	r0, #1
 800502c:	4770      	bx	lr
 800502e:	4608      	mov	r0, r1
 8005030:	4770      	bx	lr
	...

08005034 <_fstat_r>:
 8005034:	b538      	push	{r3, r4, r5, lr}
 8005036:	4c07      	ldr	r4, [pc, #28]	; (8005054 <_fstat_r+0x20>)
 8005038:	2300      	movs	r3, #0
 800503a:	4605      	mov	r5, r0
 800503c:	4608      	mov	r0, r1
 800503e:	4611      	mov	r1, r2
 8005040:	6023      	str	r3, [r4, #0]
 8005042:	f7fd fc46 	bl	80028d2 <_fstat>
 8005046:	1c43      	adds	r3, r0, #1
 8005048:	d102      	bne.n	8005050 <_fstat_r+0x1c>
 800504a:	6823      	ldr	r3, [r4, #0]
 800504c:	b103      	cbz	r3, 8005050 <_fstat_r+0x1c>
 800504e:	602b      	str	r3, [r5, #0]
 8005050:	bd38      	pop	{r3, r4, r5, pc}
 8005052:	bf00      	nop
 8005054:	200002dc 	.word	0x200002dc

08005058 <_isatty_r>:
 8005058:	b538      	push	{r3, r4, r5, lr}
 800505a:	4c06      	ldr	r4, [pc, #24]	; (8005074 <_isatty_r+0x1c>)
 800505c:	2300      	movs	r3, #0
 800505e:	4605      	mov	r5, r0
 8005060:	4608      	mov	r0, r1
 8005062:	6023      	str	r3, [r4, #0]
 8005064:	f7fd fc3a 	bl	80028dc <_isatty>
 8005068:	1c43      	adds	r3, r0, #1
 800506a:	d102      	bne.n	8005072 <_isatty_r+0x1a>
 800506c:	6823      	ldr	r3, [r4, #0]
 800506e:	b103      	cbz	r3, 8005072 <_isatty_r+0x1a>
 8005070:	602b      	str	r3, [r5, #0]
 8005072:	bd38      	pop	{r3, r4, r5, pc}
 8005074:	200002dc 	.word	0x200002dc

08005078 <_init>:
 8005078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507a:	bf00      	nop
 800507c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800507e:	bc08      	pop	{r3}
 8005080:	469e      	mov	lr, r3
 8005082:	4770      	bx	lr

08005084 <_fini>:
 8005084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005086:	bf00      	nop
 8005088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800508a:	bc08      	pop	{r3}
 800508c:	469e      	mov	lr, r3
 800508e:	4770      	bx	lr
